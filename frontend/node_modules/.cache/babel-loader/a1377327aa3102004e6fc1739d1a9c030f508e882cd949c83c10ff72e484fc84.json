{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\frontend\\\\src\\\\components\\\\SudokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect,\n  row,\n  col,\n  playerPositions,\n  wsRef\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server when cell is focused\n  const handleFocus = () => {\n    if (wsRef && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'cellSelection',\n        position: {\n          row,\n          col\n        }\n      }));\n    }\n  };\n\n  // Determine the CSS class based on editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions.filter(player => player.position.row === row && player.position.col === col).map(player => {\n    return {\n      boxShadow: `inset 0 0 0 3px ${player.color}`,\n      zIndex: 1,\n      position: 'relative'\n    };\n  })[0] || {};\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    onFocus: handleFocus,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass,\n    style: playerHighlights\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_c = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset,\n  incorrectCells,\n  playerPositions,\n  wsRef\n}) {\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        // Calculate the global row and column for this cell\n        const globalRow = rowOffset + colIndex;\n        const globalCol = colOffset + rowIndex;\n\n        // Check if this cell is in the incorrect cells list\n        const isIncorrect = incorrectCells.some(cell => cell.row === globalRow && cell.col === globalCol);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.value,\n          isEditable: cell.isEditable,\n          isIncorrect: isIncorrect,\n          row: globalRow,\n          col: globalCol,\n          onChange: value => onCellChange(globalRow, globalCol, value),\n          playerPositions: playerPositions,\n          wsRef: wsRef\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange,\n  incorrectCells,\n  playerPositions,\n  wsRef\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3,\n        incorrectCells: incorrectCells,\n        playerPositions: playerPositions,\n        wsRef: wsRef\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n// Check if a client ID exists in localStorage\n_c3 = FinalGrid;\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction SudokuGame() {\n  _s();\n  const {\n    puzzleId: urlPuzzleId\n  } = useParams();\n  const navigate = useNavigate();\n  const [puzzleId, setPuzzleId] = useState(parseInt(urlPuzzleId, 10) || null);\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({\n    value: '',\n    isEditable: true\n  })));\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  });\n  const [players, setPlayers] = useState([]);\n  const [chatInput, setChatInput] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [incorrectCells, setIncorrectCells] = useState([]);\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const [connectionError, setConnectionError] = useState(false);\n  const chatLogRef = useRef(null);\n  const ws = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    // Use the correct WebSocket path with wss:// for secure connections\n    const wsUrl = 'ws://localhost:8080';\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\n    ws.current = new WebSocket(wsUrl);\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n      setConnectionError(false);\n      ws.current.send(JSON.stringify({\n        type: 'identify',\n        clientId,\n        puzzleId: puzzleId\n      }));\n      ws.current.send(JSON.stringify({\n        type: 'loadChat'\n      }));\n    };\n    ws.current.onerror = error => {\n      console.error('WebSocket error:', error);\n      setConnectionError(true);\n    };\n    ws.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'gameState') {\n        // Handle combined game state update including player positions\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          isEditable: data.board[colIndex][rowIndex].isEditable\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        setIncorrectCells(data.incorrectCells);\n\n        // Add this line to update player positions from game state\n        if (data.playerPositions) {\n          setPlayerPositions(data.playerPositions);\n        }\n      } else if (data.type === 'playerPositions') {\n        setPlayerPositions(data.positions);\n      } else if (data.type === 'puzzleNotFound') {\n        // Handle case where puzzle was not found\n        alert('Puzzle not found. Returning to puzzle selection.');\n        navigate('/');\n      }\n    };\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [puzzleId, navigate]);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '' && ws.current && ws.current.readyState === WebSocket.OPEN) {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1\n      };\n      ws.current.send(JSON.stringify({\n        type: 'chat',\n        message\n      }));\n      setChatInput('');\n    }\n  };\n  const handleCheckSolution = () => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify({\n        type: 'checkSolution'\n      }));\n    }\n  };\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n\n    // Update local state\n    setGridData(newGrid);\n\n    // Immediately remove this cell from incorrectCells locally for better user experience\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      // Transpose the grid before sending to the server\n      const transposedGrid = Array.from({\n        length: 9\n      }, (_, rowIndex) => Array.from({\n        length: 9\n      }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable\n      })));\n\n      // Send with properly transposed coordinates for changedCell\n      ws.current.send(JSON.stringify({\n        type: 'update',\n        board: transposedGrid,\n        changedCell: {\n          row: row,\n          col: col\n        }\n      }));\n    }\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      // Notify the server to clear the board\n      ws.current.send(JSON.stringify({\n        type: 'clearBoard'\n      }));\n    }\n  };\n  const handleReturnToMenu = () => {\n    navigate('/');\n  };\n  if (connectionError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connection Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Unable to connect to the game server. Please try again later.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"menu-button\",\n          onClick: handleReturnToMenu,\n          children: \"Return to Puzzle Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-section\",\n          children: /*#__PURE__*/_jsxDEV(FinalGrid, {\n            gridData: gridData,\n            onCellChange: handleCellChange,\n            incorrectCells: incorrectCells,\n            playerPositions: playerPositions,\n            wsRef: ws\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-controls-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clearBoardBtn\",\n            onClick: handleClearBoard,\n            children: \"Clear Board\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"checkSolutionBtn\",\n            onClick: handleCheckSolution,\n            children: \"Check Solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatLog\",\n            ref: chatLogRef,\n            children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: msg.color || '#000'\n                },\n                children: [msg.user, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message\",\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: new Date(msg.time).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: true\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatInput\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: chatInput,\n              onChange: e => setChatInput(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              },\n              placeholder: \"Type to chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clientInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"You are:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: clientInfo.color\n              },\n              children: [\" \", clientInfo.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"playerHeader\",\n            children: \"Connected Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerList\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: {\n                  color: player.color\n                },\n                children: player.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuGame, \"baC7kKecjNfjTZT9ekGhJaYfeko=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c4 = SudokuGame;\nexport default SudokuGame;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"ThreeGrid\");\n$RefreshReg$(_c3, \"FinalGrid\");\n$RefreshReg$(_c4, \"SudokuGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","jsxDEV","_jsxDEV","Cell","value","isEditable","onChange","isIncorrect","row","col","playerPositions","wsRef","handleChange","event","inputValue","target","slice","test","handleFocus","current","readyState","WebSocket","OPEN","send","JSON","stringify","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","children","rowIndex","cell","colIndex","globalRow","globalCol","some","_c2","FinalGrid","gridRow","gridCol","_c3","clientId","localStorage","getItem","crypto","randomUUID","setItem","SudokuGame","_s","puzzleId","urlPuzzleId","navigate","setPuzzleId","parseInt","setGridData","fill","puzzleTitle","setPuzzleTitle","clientInfo","setClientInfo","name","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","setPlayerPositions","connectionError","setConnectionError","chatLogRef","ws","scrollTop","scrollHeight","wsUrl","console","log","onopen","onerror","error","onmessage","data","parse","updatedGrid","board","title","client","messages","positions","alert","onclose","close","sendChatMessage","trim","message","user","text","handleCheckSolution","handleCellChange","newGrid","r","prev","transposedGrid","changedCell","handleClearBoard","clearedGrid","handleReturnToMenu","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","_c4","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport '../index.css';\r\n\r\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, wsRef }) {\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value.slice(-1);\r\n    if (/^[1-9]?$/.test(inputValue)) {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // Send position to server when cell is focused\r\n  const handleFocus = () => {\r\n    if (wsRef && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify({ \r\n        type: 'cellSelection', \r\n        position: { row, col } \r\n      }));\r\n    }\r\n  };\r\n\r\n  // Determine the CSS class based on editable state and incorrect state\r\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\r\n  if (isIncorrect) {\r\n    cellClass += ' incorrect-cell';\r\n  }\r\n\r\n  // Add player position highlights\r\n  const playerHighlights = playerPositions\r\n    .filter(player => player.position.row === row && player.position.col === col)\r\n    .map(player => {\r\n      return {\r\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n      };\r\n    })[0] || {};\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={isEditable ? handleChange : undefined}\r\n      onFocus={handleFocus}\r\n      readOnly={!isEditable}\r\n      maxLength=\"2\"\r\n      className={cellClass}\r\n      style={playerHighlights}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, wsRef }) {\r\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\r\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\r\n  );\r\n\r\n  return (\r\n    <div className=\"threeGrid\">\r\n      {transposedGridData.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"grid-row\">\r\n          {row.map((cell, colIndex) => {\r\n            // Calculate the global row and column for this cell\r\n            const globalRow = rowOffset + colIndex;\r\n            const globalCol = colOffset + rowIndex;\r\n            \r\n            // Check if this cell is in the incorrect cells list\r\n            const isIncorrect = incorrectCells.some(\r\n              cell => cell.row === globalRow && cell.col === globalCol\r\n            );\r\n            \r\n            return (\r\n              <Cell\r\n                key={colIndex}\r\n                value={cell.value}\r\n                isEditable={cell.isEditable}\r\n                isIncorrect={isIncorrect}\r\n                row={globalRow}\r\n                col={globalCol}\r\n                onChange={(value) =>\r\n                  onCellChange(globalRow, globalCol, value)\r\n                }\r\n                playerPositions={playerPositions}\r\n                wsRef={wsRef}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, wsRef }) {\r\n  return (\r\n    <div className=\"finalGrid\">\r\n      {Array.from({ length: 3 }, (_, gridRow) => (\r\n        <div key={gridRow} className=\"grid-row\">\r\n          {Array.from({ length: 3 }, (_, gridCol) => (\r\n            <ThreeGrid\r\n              key={gridCol}\r\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\r\n                row.slice(gridCol * 3, gridCol * 3 + 3)\r\n              )}\r\n              onCellChange={onCellChange}\r\n              rowOffset={gridRow * 3}\r\n              colOffset={gridCol * 3}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              wsRef={wsRef}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem('clientId');\r\nif (!clientId) {\r\n  clientId = crypto.randomUUID();\r\n  localStorage.setItem('clientId', clientId);\r\n}\r\n\r\nfunction SudokuGame() {\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [puzzleId, setPuzzleId] = useState(parseInt(urlPuzzleId, 10) || null);\r\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({ value: '', isEditable: true })));\r\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\r\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' });\r\n  const [players, setPlayers] = useState([]);\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [connectionError, setConnectionError] = useState(false);\r\n\r\n  const chatLogRef = useRef(null);\r\n  const ws = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    // Use the correct WebSocket path with wss:// for secure connections\r\n    const wsUrl = 'ws://localhost:8080';\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    \r\n    ws.current = new WebSocket(wsUrl);\r\n\r\n  ws.current.onopen = () => {\r\n    console.log('Connected to WebSocket server');\r\n    setConnectionError(false);\r\n    ws.current.send(JSON.stringify({ \r\n      type: 'identify', \r\n      clientId,\r\n      puzzleId: puzzleId\r\n    }));\r\n    ws.current.send(JSON.stringify({ type: 'loadChat' }));\r\n  };\r\n\r\n    ws.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n      setConnectionError(true);\r\n    };\r\n\r\n    ws.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      \r\n      if (data.type === 'update') {\r\n        // Update the grid with the new state from the server\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n    \r\n        setGridData(updatedGrid); // Set the grid data in row-major order\r\n        setPuzzleTitle(data.title); // Update the puzzle title\r\n\r\n        if (data.puzzleId) {\r\n          setPuzzleId(data.puzzleId);\r\n        }\r\n\r\n        if (data.client) {\r\n          setClientInfo(data.client); // Set the client's name and color\r\n        }\r\n      } else if (data.type === 'players') {\r\n        setPlayers(data.players); // Update the list of connected players \r\n      } else if (data.type === 'chatHistory') {\r\n        setChatMessages(data.messages); // Load chat history\r\n      } else if (data.type === 'checkResult') {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === 'gameState') {\r\n        // Handle combined game state update including player positions\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value,\r\n            isEditable: data.board[colIndex][rowIndex].isEditable,\r\n          }))\r\n        );\r\n    \r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n        if (data.puzzleId) {\r\n          setPuzzleId(data.puzzleId);\r\n        }\r\n        setIncorrectCells(data.incorrectCells);\r\n        \r\n        // Add this line to update player positions from game state\r\n        if (data.playerPositions) {\r\n          setPlayerPositions(data.playerPositions);\r\n        }\r\n      } else if (data.type === 'playerPositions') {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === 'puzzleNotFound') {\r\n        // Handle case where puzzle was not found\r\n        alert('Puzzle not found. Returning to puzzle selection.');\r\n        navigate('/');\r\n      }\r\n    };\r\n\r\n    ws.current.onclose = () => {\r\n      console.log('Disconnected from WebSocket server');\r\n    };\r\n\r\n    return () => {\r\n      if (ws.current) {\r\n        ws.current.close();\r\n      }\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const sendChatMessage = () => {\r\n    if (chatInput.trim() !== '' && ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      const message = {\r\n        user: clientInfo.name,\r\n        color: clientInfo.color,\r\n        text: chatInput,\r\n        puzzleId: puzzleId || 1,\r\n      };\r\n      \r\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\r\n      setChatInput('');\r\n    }\r\n  };\r\n\r\n  const handleCheckSolution = () => {\r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      ws.current.send(JSON.stringify({ \r\n        type: 'checkSolution'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    // Update the local grid\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? { ...cell, value }\r\n          : cell\r\n      )\r\n    );\r\n  \r\n    // Update local state\r\n    setGridData(newGrid);\r\n  \r\n    // Immediately remove this cell from incorrectCells locally for better user experience\r\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\r\n  \r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      // Transpose the grid before sending to the server\r\n      const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n        Array.from({ length: 9 }, (_, colIndex) => ({\r\n          value: newGrid[colIndex][rowIndex].value,\r\n          isEditable: newGrid[colIndex][rowIndex].isEditable,\r\n        }))\r\n      );\r\n    \r\n      // Send with properly transposed coordinates for changedCell\r\n      ws.current.send(JSON.stringify({ \r\n        type: 'update', \r\n        board: transposedGrid,\r\n        changedCell: { \r\n          row: row,\r\n          col: col\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map(row =>\r\n      row.map(cell => ({\r\n        ...cell,\r\n        value: cell.isEditable ? '' : cell.value\r\n      }))\r\n    );\r\n    \r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    \r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      // Notify the server to clear the board\r\n      ws.current.send(JSON.stringify({ \r\n        type: 'clearBoard'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleReturnToMenu = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (connectionError) {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"error-container\">\r\n          <h2>Connection Error</h2>\r\n          <p>Unable to connect to the game server. Please try again later.</p>\r\n          <button className=\"menu-button\" onClick={handleReturnToMenu}>\r\n            Return to Puzzle Selection\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n      \r\n      <div className=\"app-container\">\r\n        <div className=\"left-section\">\r\n          <div className=\"board-section\">\r\n            <FinalGrid \r\n              gridData={gridData} \r\n              onCellChange={handleCellChange}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              wsRef={ws} \r\n            />\r\n          </div>\r\n          \r\n          <div className=\"board-controls-section\">\r\n            <button \r\n              className=\"clearBoardBtn\" \r\n              onClick={handleClearBoard}\r\n            >\r\n              Clear Board\r\n            </button>\r\n            <button \r\n              className=\"checkSolutionBtn\" \r\n              onClick={handleCheckSolution}\r\n            >\r\n              Check Solution\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"right-section\">\r\n          <div className=\"chatBox\">\r\n            <div className=\"chatLog\" ref={chatLogRef}>\r\n              {chatMessages.map((msg, index) => (\r\n                <div key={index}>\r\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\r\n                  <span className=\"message\">{msg.message}</span>\r\n                  <span className=\"time\">\r\n                    {new Date(msg.time).toLocaleTimeString([], {\r\n                      hour: '2-digit',\r\n                      minute: '2-digit',\r\n                      hour12: true,\r\n                    })}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"chatInput\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatInput}\r\n                onChange={(e) => setChatInput(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    sendChatMessage();\r\n                  }\r\n                }}\r\n                placeholder=\"Type to chat\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"players-section\">\r\n            <div className=\"clientInfo\">\r\n              <span>You are:</span>\r\n              <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\r\n            </div>\r\n\r\n            <h3 className=\"playerHeader\">Connected Players:</h3>\r\n\r\n            <div className=\"playerList\">\r\n              <ul>\r\n                {players.map((player, index) => (\r\n                  <li key={index} style={{ color: player.color }}>\r\n                    {player.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}