{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PermHeader() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"PermHeader\",\n    children: \"Suduoku\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = PermHeader;\nfunction Cell({\n  value,\n  onChange\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue); // Notify parent of the change\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: handleChange,\n    className: \"cell\",\n    maxLength: \"1\" // Limit input to a single character\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: cell,\n        onChange: value => onCellChange(rowOffset + rowIndex, colOffset + colIndex, value)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c3 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_c4 = FinalGrid;\nfunction App() {\n  _s();\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080'); // Connect to the backend WebSocket server\n\n    ws.onopen = () => {\n      console.log('Connected to WebSocket server');\n    };\n    ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'update') {\n        setGridData(data.board); // Update the grid with the new state from the server\n      }\n    };\n    ws.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n    return () => ws.close(); // Clean up WebSocket connection on unmount\n  }, []);\n  const handleCellChange = (row, col, value) => {\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? value : cell));\n    setGridData(newGrid);\n\n    // Send the updated grid to the server\n    const ws = new WebSocket('ws://localhost:8080');\n    ws.onopen = () => {\n      ws.send(JSON.stringify({\n        type: 'update',\n        board: newGrid\n      }));\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PermHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FinalGrid, {\n      gridData: gridData,\n      onCellChange: handleCellChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"F330NB1c1Ls8JdBWCAH78xvdQb0=\");\n_c5 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 121,\n  columnNumber: 3\n}, this));\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"PermHeader\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"ThreeGrid\");\n$RefreshReg$(_c4, \"FinalGrid\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","jsxDEV","_jsxDEV","PermHeader","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Cell","value","onChange","handleChange","event","inputValue","target","slice","test","type","maxLength","_c2","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","map","row","rowIndex","cell","colIndex","_c3","FinalGrid","Array","from","length","_","gridRow","gridCol","_c4","App","_s","setGridData","fill","ws","WebSocket","onopen","console","log","onmessage","data","JSON","parse","board","onclose","close","handleCellChange","col","newGrid","r","send","stringify","_c5","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/src/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction PermHeader() {\n  return <h1 className=\"PermHeader\">Suduoku</h1>;\n}\n\nfunction Cell({ value, onChange }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue); // Notify parent of the change\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={handleChange}\n      className=\"cell\"\n      maxLength=\"1\" // Limit input to a single character\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset }) {\n  return (\n    <div className=\"threeGrid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              value={cell}\n              onChange={(value) =>\n                onCellChange(rowOffset + rowIndex, colOffset + colIndex, value)\n              }\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FinalGrid({ gridData, onCellChange }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080'); // Connect to the backend WebSocket server\n\n    ws.onopen = () => {\n      console.log('Connected to WebSocket server');\n    };\n\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'update') {\n        setGridData(data.board); // Update the grid with the new state from the server\n      }\n    };\n\n    ws.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const handleCellChange = (row, col, value) => {\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col ? value : cell\n      )\n    );\n    setGridData(newGrid);\n\n    // Send the updated grid to the server\n    const ws = new WebSocket('ws://localhost:8080');\n    ws.onopen = () => {\n      ws.send(JSON.stringify({ type: 'update', board: newGrid }));\n    };\n  };\n\n  return (\n    <div>\n      <PermHeader />\n      <FinalGrid gridData={gridData} onCellChange={handleCellChange} />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}