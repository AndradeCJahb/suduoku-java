{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import ReactDOM from'react-dom/client';import'./index.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Header(){return/*#__PURE__*/_jsx(\"div\",{className:\"header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-content\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/favicon.ico\",alt:\"Suduoku Logo\",className:\"header-logo\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"header-title\",children:\"Suduoku\"})]})});}function Cell(_ref){let{value,isEditable,onChange,isIncorrect}=_ref;const handleChange=event=>{const inputValue=event.target.value.slice(-1);if(/^[1-9]?$/.test(inputValue)){onChange(inputValue);}};// Determine the CSS class based on both editable state and incorrect state\nlet cellClass=isEditable?'cell':'non-editable-cell';if(isIncorrect){cellClass+=' incorrect-cell';}return/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:value,onChange:isEditable?handleChange:undefined,readOnly:!isEditable,maxLength:\"2\",className:cellClass});}function ThreeGrid(_ref2){let{gridData,onCellChange,rowOffset,colOffset,incorrectCells}=_ref2;const transposedGridData=Array.from({length:3},(_,i)=>Array.from({length:3},(_,j)=>gridData[j][i]));return/*#__PURE__*/_jsx(\"div\",{className:\"threeGrid\",children:transposedGridData.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:row.map((cell,colIndex)=>{// Calculate the global row and column for this cell\nconst globalRow=rowOffset+colIndex;const globalCol=colOffset+rowIndex;// Check if this cell is in the incorrect cells list\nconst isIncorrect=incorrectCells.some(cell=>cell.row===globalRow&&cell.col===globalCol);return/*#__PURE__*/_jsx(Cell,{value:cell.value,isEditable:cell.isEditable,isIncorrect:isIncorrect,onChange:value=>onCellChange(globalRow,globalCol,value)},colIndex);})},rowIndex))});}function FinalGrid(_ref3){let{gridData,onCellChange,incorrectCells}=_ref3;return/*#__PURE__*/_jsx(\"div\",{className:\"finalGrid\",children:Array.from({length:3},(_,gridRow)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:Array.from({length:3},(_,gridCol)=>/*#__PURE__*/_jsx(ThreeGrid,{gridData:gridData.slice(gridRow*3,gridRow*3+3).map(row=>row.slice(gridCol*3,gridCol*3+3)),onCellChange:onCellChange,rowOffset:gridRow*3,colOffset:gridCol*3,incorrectCells:incorrectCells},gridCol))},gridRow))});}// Check if a client ID exists in localStorage\nlet clientId=localStorage.getItem('clientId');if(!clientId){clientId=crypto.randomUUID();localStorage.setItem('clientId',clientId);}function App(){const[gridData,setGridData]=useState(Array(9).fill(Array(9).fill(''))// Initialize empty 9x9 grid\n);const[puzzleTitle,setPuzzleTitle]=useState('');// State for the puzzle title\nconst[puzzleId,setPuzzleId]=useState(null);// Add state for the puzzle ID\nconst[clientInfo,setClientInfo]=useState({name:'',color:''});// State for the client's name and color\nconst[players,setPlayers]=useState([]);// State for the list of connected players\nconst[chatInput,setChatInput]=useState('');// State for the chat input box\nconst[chatMessages,setChatMessages]=useState([]);// State for the list of chat messages\nconst[incorrectCells,setIncorrectCells]=useState([]);// Track incorrect cells\nconst chatLogRef=useRef(null);const ws=useRef(null);// Use useRef to persist the WebSocket instance\nuseEffect(()=>{// Scroll to the bottom of the chat log whenever messages are updated\nif(chatLogRef.current){chatLogRef.current.scrollTop=chatLogRef.current.scrollHeight;}},[chatMessages]);useEffect(()=>{ws.current=new WebSocket('https://1dc8-24-20-96-196.ngrok-free.app');// Connect to the backend WebSocket server\nws.current.onopen=()=>{console.log('Connected to WebSocket server');// Send the client ID to the server\nws.current.send(JSON.stringify({type:'identify',clientId}));// Request chat history for the current puzzle\nws.current.send(JSON.stringify({type:'loadChat'}));};ws.current.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='update'){// Update the grid with the new state from the server\nconst updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,// Swap row and column indices\nisEditable:data.board[colIndex][rowIndex].isEditable// Swap row and column indices\n})));setGridData(updatedGrid);// Set the grid data in row-major order\nsetPuzzleTitle(data.title);// Update the puzzle title\nif(data.puzzleId){setPuzzleId(data.puzzleId);}if(data.client){setClientInfo(data.client);// Set the client's name and color\n}}else if(data.type==='players'){setPlayers(data.players);// Update the list of connected players \n}else if(data.type==='chatHistory'){setChatMessages(data.messages);// Load chat history\n}else if(data.type==='checkResult'){if(data.error){alert(data.error);}else{// This should completely replace the current incorrectCells state\nsetIncorrectCells(data.incorrectCells);}}};ws.current.onclose=()=>{console.log('Disconnected from WebSocket server');};return()=>ws.current.close();// Clean up WebSocket connection on unmount\n},[]);const sendChatMessage=()=>{if(chatInput.trim()!==''){const message={user:clientInfo.name,color:clientInfo.color,text:chatInput,puzzleId:puzzleId||1// Use the actual puzzle ID from state\n};// Send the chat message to the server\nws.current.send(JSON.stringify({type:'chat',message}));// Clear the input box after sending the message\nsetChatInput('');}};const handleCheckSolution=()=>{// Request solution check from server\nws.current.send(JSON.stringify({type:'checkSolution'}));};const handleCellChange=(row,col,value)=>{// Update the local grid\nconst newGrid=gridData.map((r,rowIndex)=>r.map((cell,colIndex)=>rowIndex===row&&colIndex===col?{...cell,value}:cell));// Update local state\nsetGridData(newGrid);// Don't modify incorrectCells locally, let the server broadcast the changes\n// setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n// Transpose the grid before sending to the server\nconst transposedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:newGrid[colIndex][rowIndex].value,isEditable:newGrid[colIndex][rowIndex].isEditable})));// Send with properly transposed coordinates for changedCell\nws.current.send(JSON.stringify({type:'update',board:transposedGrid,changedCell:{row:col,// Note the transposition here\ncol:row}}));};const handleClearBoard=()=>{// Create a new grid with only locked cells\nconst clearedGrid=gridData.map(row=>row.map(cell=>({...cell,value:cell.isEditable?'':cell.value})));// Update local state\nsetGridData(clearedGrid);setIncorrectCells([]);// Transpose the grid before sending to the server\nconst transposedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:clearedGrid[colIndex][rowIndex].value,isEditable:clearedGrid[colIndex][rowIndex].isEditable})));// Send the cleared grid to the server\nws.current.send(JSON.stringify({type:'clearBoard',board:transposedGrid}));};// Update the App component's return statement\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"sudokuTitle\",children:puzzleTitle}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"board-section\",children:/*#__PURE__*/_jsx(FinalGrid,{gridData:gridData,onCellChange:handleCellChange,incorrectCells:incorrectCells})}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-controls-section\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"clearBoardBtn\",onClick:handleClearBoard,children:\"Clear Board\"}),/*#__PURE__*/_jsx(\"button\",{className:\"checkSolutionBtn\",onClick:handleCheckSolution,children:\"Check Solution\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"right-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatLog\",ref:chatLogRef,children:chatMessages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{style:{color:msg.color||'#000'},children:[msg.user,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"message\",children:msg.message}),/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:new Date(msg.time).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit',hour12:true})})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"chatInput\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:chatInput,onChange:e=>setChatInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'){sendChatMessage();}},placeholder:\"Type to chat\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"players-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"clientInfo\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"You are:\"}),/*#__PURE__*/_jsxs(\"span\",{style:{color:clientInfo.color},children:[\" \",clientInfo.name]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"playerHeader\",children:\"Connected Players:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"playerList\",children:/*#__PURE__*/_jsx(\"ul\",{children:players.map((player,index)=>/*#__PURE__*/_jsx(\"li\",{style:{color:player.color},children:player.name},index))})})]})]})]})]});}const root=ReactDOM.createRoot(document.getElementById('root'));root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactDOM","jsx","_jsx","jsxs","_jsxs","Header","className","children","src","alt","Cell","_ref","value","isEditable","onChange","isIncorrect","handleChange","event","inputValue","target","slice","test","cellClass","type","undefined","readOnly","maxLength","ThreeGrid","_ref2","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","map","row","rowIndex","cell","colIndex","globalRow","globalCol","some","col","FinalGrid","_ref3","gridRow","gridCol","clientId","localStorage","getItem","crypto","randomUUID","setItem","App","setGridData","fill","puzzleTitle","setPuzzleTitle","puzzleId","setPuzzleId","clientInfo","setClientInfo","name","color","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","chatLogRef","ws","current","scrollTop","scrollHeight","WebSocket","onopen","console","log","send","JSON","stringify","onmessage","data","parse","updatedGrid","board","title","client","messages","error","alert","onclose","close","sendChatMessage","trim","message","user","text","handleCheckSolution","handleCellChange","newGrid","r","transposedGrid","changedCell","handleClearBoard","clearedGrid","onClick","ref","msg","index","style","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","player","root","createRoot","document","getElementById","render","StrictMode"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"header-content\">\n        <img \n          src=\"/favicon.ico\" \n          alt=\"Suduoku Logo\" \n          className=\"header-logo\" \n        />\n        <h1 className=\"header-title\">Suduoku</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction Cell({ value, isEditable, onChange, isIncorrect }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Determine the CSS class based on both editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={isEditable ? handleChange : undefined}\n      readOnly={!isEditable}\n      maxLength=\"2\"\n      className={cellClass}\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells }) {\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\n  );\n\n  return (\n    <div className=\"threeGrid\">\n      {transposedGridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => {\n            // Calculate the global row and column for this cell\n            const globalRow = rowOffset + colIndex;\n            const globalCol = colOffset + rowIndex;\n            \n            // Check if this cell is in the incorrect cells list\n            const isIncorrect = incorrectCells.some(\n              cell => cell.row === globalRow && cell.col === globalCol\n            );\n            \n            return (\n              <Cell\n                key={colIndex}\n                value={cell.value}\n                isEditable={cell.isEditable}\n                isIncorrect={isIncorrect}\n                onChange={(value) =>\n                  onCellChange(globalRow, globalCol, value)\n                }\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FinalGrid({ gridData, onCellChange, incorrectCells }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n              incorrectCells={incorrectCells}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  const [puzzleTitle, setPuzzleTitle] = useState(''); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n  \n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    ws.current = new WebSocket('https://1dc8-24-20-96-196.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      // Send the client ID to the server\n      ws.current.send(JSON.stringify({ type: 'identify', clientId }));\n  \n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({ type: 'loadChat' }));\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n          }))\n        );\n    \n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        if (data.error) {\n          alert(data.error);\n        } else {\n          // This should completely replace the current incorrectCells state\n          setIncorrectCells(data.incorrectCells);\n        }\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1, // Use the actual puzzle ID from state\n      };\n      \n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\n      \n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n\n  const handleCheckSolution = () => {\n    // Request solution check from server\n    ws.current.send(JSON.stringify({ \n      type: 'checkSolution'\n    }));\n  };\n\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value }\n          : cell\n      )\n    );\n  \n    // Update local state\n    setGridData(newGrid);\n  \n    // Don't modify incorrectCells locally, let the server broadcast the changes\n    // setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n  \n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n  \n    // Send with properly transposed coordinates for changedCell\n    ws.current.send(JSON.stringify({ \n      type: 'update', \n      board: transposedGrid,\n      changedCell: { \n        row: col,  // Note the transposition here\n        col: row\n      }\n    }));\n  };\n\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row =>\n      row.map(cell => ({\n        ...cell,\n        value: cell.isEditable ? '' : cell.value\n      }))\n    );\n    \n    // Update local state\n    setGridData(clearedGrid);\n    \n    setIncorrectCells([]);\n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: clearedGrid[colIndex][rowIndex].value,\n        isEditable: clearedGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n    \n    // Send the cleared grid to the server\n    ws.current.send(JSON.stringify({ \n      type: 'clearBoard', \n      board: transposedGrid \n    }));\n  };\n\n\n  // Update the App component's return statement\n\nreturn (\n  <div>\n    <Header />\n    <div className=\"sudokuTitle\">{puzzleTitle}</div>\n    \n    <div className=\"app-container\">\n      <div className=\"left-section\">\n        <div className=\"board-section\">\n          <FinalGrid \n            gridData={gridData} \n            onCellChange={handleCellChange}\n            incorrectCells={incorrectCells}\n          />\n        </div>\n        \n        <div className=\"board-controls-section\">\n          <button \n            className=\"clearBoardBtn\" \n            onClick={handleClearBoard}\n          >\n            Clear Board\n          </button>\n          <button \n            className=\"checkSolutionBtn\" \n            onClick={handleCheckSolution}\n          >\n            Check Solution\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"right-section\">\n        <div className=\"chatBox\">\n          <div className=\"chatLog\" ref={chatLogRef}>\n            {chatMessages.map((msg, index) => (\n              <div key={index}>\n                <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\n                <span className=\"message\">{msg.message}</span>\n                <span className=\"time\">\n                  {new Date(msg.time).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: true,\n                  })}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"chatInput\">\n            <input\n              type=\"text\"\n              value={chatInput}\n              onChange={(e) => setChatInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              }}\n              placeholder=\"Type to chat\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"players-section\">\n          <div className=\"clientInfo\">\n            <span>You are:</span>\n            <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\n          </div>\n\n          <h3 className=\"playerHeader\">Connected Players:</h3>\n\n          <div className=\"playerList\">\n            <ul>\n              {players.map((player, index) => (\n                <li key={index} style={{ color: player.color }}>\n                  {player.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}