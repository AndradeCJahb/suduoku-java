{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/favicon.ico\",\n        alt: \"Suduoku Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"header-title\",\n        children: \"Suduoku\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_c = Header;\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect,\n  row,\n  col,\n  playerPositions,\n  wsRef\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server when cell is focused\n  const handleFocus = () => {\n    if (wsRef && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'cellSelection',\n        position: {\n          row,\n          col\n        }\n      }));\n    }\n  };\n\n  // Determine the CSS class based on editable state, incorrect state, and player positions\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions.filter(player => player.position.row === row && player.position.col === col).map(player => {\n    return {\n      boxShadow: `inset 0 0 0 3px ${player.color}`,\n      zIndex: 1,\n      position: 'relative'\n    };\n  })[0] || {};\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    onFocus: handleFocus,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass,\n    style: playerHighlights\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset,\n  incorrectCells,\n  playerPositions,\n  wsRef\n}) {\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        // Calculate the global row and column for this cell\n        const globalRow = rowOffset + colIndex;\n        const globalCol = colOffset + rowIndex;\n\n        // Check if this cell is in the incorrect cells list\n        const isIncorrect = incorrectCells.some(cell => cell.row === globalRow && cell.col === globalCol);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.value,\n          isEditable: cell.isEditable,\n          isIncorrect: isIncorrect,\n          row: globalRow,\n          col: globalCol,\n          onChange: value => onCellChange(globalRow, globalCol, value),\n          playerPositions: playerPositions,\n          wsRef: wsRef // Pass to Cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_c3 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange,\n  incorrectCells,\n  playerPositions,\n  wsRef\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3,\n        incorrectCells: incorrectCells,\n        playerPositions: playerPositions,\n        wsRef: wsRef // Pass it further down\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n// Check if a client ID exists in localStorage\n_c4 = FinalGrid;\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction App() {\n  _s();\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n  const [puzzleTitle, setPuzzleTitle] = useState('SUDUOKU'); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    ws.current = new WebSocket('https://2a72-2601-1c2-4503-61b0-62-7a49-5af4-c336.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n      ws.current.send(JSON.stringify({\n        type: 'identify',\n        clientId\n      }));\n\n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({\n        type: 'loadChat'\n      }));\n    };\n    ws.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'gameState') {\n        // Handle combined game state update including player positions\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          isEditable: data.board[colIndex][rowIndex].isEditable\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        setIncorrectCells(data.incorrectCells);\n\n        // Add this line to update player positions from game state\n        if (data.playerPositions) {\n          setPlayerPositions(data.playerPositions);\n        }\n      } else if (data.type === 'playerPositions') {\n        setPlayerPositions(data.positions);\n      }\n    };\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1 // Use the actual puzzle ID from state\n      };\n\n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({\n        type: 'chat',\n        message\n      }));\n\n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n  const handleCheckSolution = () => {\n    // Request solution check from server\n    ws.current.send(JSON.stringify({\n      type: 'checkSolution'\n    }));\n  };\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n\n    // Update local state\n    setGridData(newGrid);\n\n    // Immediately remove this cell from incorrectCells locally for better user experience\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n\n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({\n      length: 9\n    }, (_, rowIndex) => Array.from({\n      length: 9\n    }, (_, colIndex) => ({\n      value: newGrid[colIndex][rowIndex].value,\n      isEditable: newGrid[colIndex][rowIndex].isEditable\n    })));\n\n    // Send with properly transposed coordinates for changedCell\n    ws.current.send(JSON.stringify({\n      type: 'update',\n      board: transposedGrid,\n      changedCell: {\n        row: row,\n        // Note the transposition here\n        col: col\n      }\n    }));\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n\n    // Just notify the server to clear the board\n    ws.current.send(JSON.stringify({\n      type: 'clearBoard'\n    }));\n  };\n\n  // Update the App component's return statement\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-section\",\n          children: /*#__PURE__*/_jsxDEV(FinalGrid, {\n            gridData: gridData,\n            onCellChange: handleCellChange,\n            incorrectCells: incorrectCells,\n            playerPositions: playerPositions,\n            wsRef: ws\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-controls-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clearBoardBtn\",\n            onClick: handleClearBoard,\n            children: \"Clear Board\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"checkSolutionBtn\",\n            onClick: handleCheckSolution,\n            children: \"Check Solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatLog\",\n            ref: chatLogRef,\n            children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: msg.color || '#000'\n                },\n                children: [msg.user, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message\",\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: new Date(msg.time).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: true\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 17\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatInput\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: chatInput,\n              onChange: e => setChatInput(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              },\n              placeholder: \"Type to chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clientInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"You are:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: clientInfo.color\n              },\n              children: [\" \", clientInfo.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"playerHeader\",\n            children: \"Connected Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerList\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: {\n                  color: player.color\n                },\n                children: player.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"HgpZKPvkGvLFvg4+PVdk2jV3VvI=\");\n_c5 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 416,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 415,\n  columnNumber: 3\n}, this));\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"ThreeGrid\");\n$RefreshReg$(_c4, \"FinalGrid\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactDOM","jsxDEV","_jsxDEV","Header","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","Cell","value","isEditable","onChange","isIncorrect","row","col","playerPositions","wsRef","handleChange","event","inputValue","target","slice","test","handleFocus","current","readyState","WebSocket","OPEN","send","JSON","stringify","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","style","_c2","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","rowIndex","cell","colIndex","globalRow","globalCol","some","_c3","FinalGrid","gridRow","gridCol","_c4","clientId","localStorage","getItem","crypto","randomUUID","setItem","App","_s","setGridData","fill","puzzleTitle","setPuzzleTitle","puzzleId","setPuzzleId","clientInfo","setClientInfo","name","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","setPlayerPositions","chatLogRef","ws","scrollTop","scrollHeight","onopen","console","log","onmessage","data","parse","updatedGrid","board","title","client","messages","positions","onclose","close","sendChatMessage","trim","message","user","text","handleCheckSolution","handleCellChange","newGrid","r","prev","transposedGrid","changedCell","handleClearBoard","clearedGrid","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","_c5","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"header-content\">\n        <img \n          src=\"/favicon.ico\" \n          alt=\"Suduoku Logo\" \n          className=\"header-logo\" \n        />\n        <h1 className=\"header-title\">Suduoku</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, wsRef }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server when cell is focused\n  const handleFocus = () => {\n    if (wsRef && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({ \n        type: 'cellSelection', \n        position: { \n          row, \n          col \n        } \n      }));\n    }\n  };\n\n  // Determine the CSS class based on editable state, incorrect state, and player positions\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions\n    .filter(player => player.position.row === row && player.position.col === col)\n    .map(player => {\n      return {\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\n        zIndex: 1,\n        position: 'relative'\n      };\n    })[0] || {};\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={isEditable ? handleChange : undefined}\n      onFocus={handleFocus}\n      readOnly={!isEditable}\n      maxLength=\"2\"\n      className={cellClass}\n      style={playerHighlights}\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, wsRef }) {\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\n  );\n\n  return (\n    <div className=\"threeGrid\">\n      {transposedGridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => {\n            // Calculate the global row and column for this cell\n            const globalRow = rowOffset + colIndex;\n            const globalCol = colOffset + rowIndex;\n            \n            // Check if this cell is in the incorrect cells list\n            const isIncorrect = incorrectCells.some(\n              cell => cell.row === globalRow && cell.col === globalCol\n            );\n            \n            return (\n              <Cell\n                key={colIndex}\n                value={cell.value}\n                isEditable={cell.isEditable}\n                isIncorrect={isIncorrect}\n                row={globalRow}\n                col={globalCol}\n                onChange={(value) =>\n                  onCellChange(globalRow, globalCol, value)\n                }\n                playerPositions={playerPositions}\n                wsRef={wsRef} // Pass to Cell\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, wsRef }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n              incorrectCells={incorrectCells}\n              playerPositions={playerPositions}\n              wsRef={wsRef} // Pass it further down\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  const [puzzleTitle, setPuzzleTitle] = useState('SUDUOKU'); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n  const [playerPositions, setPlayerPositions] = useState([]);\n\n  \n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    ws.current = new WebSocket('https://2a72-2601-1c2-4503-61b0-62-7a49-5af4-c336.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      ws.current.send(JSON.stringify({ type: 'identify', clientId }));\n  \n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({ type: 'loadChat' }));\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n          }))\n        );\n    \n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'gameState') {\n        // Handle combined game state update including player positions\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value,\n            isEditable: data.board[colIndex][rowIndex].isEditable,\n          }))\n        );\n    \n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        setIncorrectCells(data.incorrectCells);\n        \n        // Add this line to update player positions from game state\n        if (data.playerPositions) {\n          setPlayerPositions(data.playerPositions);\n        }\n      } else if (data.type === 'playerPositions') {\n        setPlayerPositions(data.positions);\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1, // Use the actual puzzle ID from state\n      };\n      \n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\n      \n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n\n  const handleCheckSolution = () => {\n    // Request solution check from server\n    ws.current.send(JSON.stringify({ \n      type: 'checkSolution'\n    }));\n  };\n\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value }\n          : cell\n      )\n    );\n  \n    // Update local state\n    setGridData(newGrid);\n  \n    // Immediately remove this cell from incorrectCells locally for better user experience\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n  \n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n  \n    // Send with properly transposed coordinates for changedCell\n    ws.current.send(JSON.stringify({ \n      type: 'update', \n      board: transposedGrid,\n      changedCell: { \n        row: row,  // Note the transposition here\n        col: col\n      }\n    }));\n  };\n\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row =>\n      row.map(cell => ({\n        ...cell,\n        value: cell.isEditable ? '' : cell.value\n      }))\n    );\n    \n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    \n    // Just notify the server to clear the board\n    ws.current.send(JSON.stringify({ \n      type: 'clearBoard'\n    }));\n  };\n\n\n  // Update the App component's return statement\n\nreturn (\n  <div>\n    <Header />\n    <div className=\"sudokuTitle\">{puzzleTitle}</div>\n    \n    <div className=\"app-container\">\n      <div className=\"left-section\">\n        <div className=\"board-section\">\n          <FinalGrid \n            gridData={gridData} \n            onCellChange={handleCellChange}\n            incorrectCells={incorrectCells}\n            playerPositions={playerPositions}\n            wsRef={ws} \n          />\n        </div>\n        \n        <div className=\"board-controls-section\">\n          <button \n            className=\"clearBoardBtn\" \n            onClick={handleClearBoard}\n          >\n            Clear Board\n          </button>\n          <button \n            className=\"checkSolutionBtn\" \n            onClick={handleCheckSolution}\n          >\n            Check Solution\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"right-section\">\n        <div className=\"chatBox\">\n          <div className=\"chatLog\" ref={chatLogRef}>\n            {chatMessages.map((msg, index) => (\n              <div key={index}>\n                <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\n                <span className=\"message\">{msg.message}</span>\n                <span className=\"time\">\n                  {new Date(msg.time).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: true,\n                  })}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"chatInput\">\n            <input\n              type=\"text\"\n              value={chatInput}\n              onChange={(e) => setChatInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              }}\n              placeholder=\"Type to chat\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"players-section\">\n          <div className=\"clientInfo\">\n            <span>You are:</span>\n            <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\n          </div>\n\n          <h3 className=\"playerHeader\">Connected Players:</h3>\n\n          <div className=\"playerList\">\n            <ul>\n              {players.map((player, index) => (\n                <li key={index} style={{ color: player.color }}>\n                  {player.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}