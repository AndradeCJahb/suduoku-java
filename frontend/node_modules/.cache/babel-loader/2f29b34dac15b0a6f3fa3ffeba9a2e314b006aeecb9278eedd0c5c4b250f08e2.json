{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuBoard.js\";\nimport React from \"react\";\nimport webSocketManager from \"./WebSocketManager\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect,\n  row,\n  col,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server and update focusedCell when cell is focused\n  const handleFocus = () => {\n    setFocusedCell({\n      row,\n      col\n    }); // Update the focusedCell state\n    webSocketManager.send({\n      type: \"sendPlayerPosition\",\n      position: {\n        row,\n        col\n      },\n      clientId: clientId\n    });\n  };\n\n  // Determine the CSS class based on editable state and incorrect state\n  let cellClass = isEditable ? \"cell\" : \"non-editable-cell\";\n  if (isIncorrect) {\n    cellClass += \" incorrect-cell\";\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions.filter(player => player.position.row === row && player.position.col === col).map(player => {\n    return {\n      boxShadow: `inset 0 0 0 3px ${player.color}`,\n      zIndex: 1,\n      position: \"relative\"\n    };\n  })[0] || {};\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    onFocus: handleFocus,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass,\n    style: playerHighlights,\n    \"data-row\": row,\n    \"data-col\": col,\n    inputMode: \"none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_c = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset,\n  incorrectCells,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        const globalRow = rowOffset + colIndex;\n        const globalCol = colOffset + rowIndex;\n        const isIncorrect = incorrectCells.some(cell => cell.col === globalRow && cell.row === globalCol);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.value,\n          isEditable: cell.isEditable,\n          isIncorrect: isIncorrect,\n          row: globalRow,\n          col: globalCol,\n          onChange: value => onCellChange(globalRow, globalCol, value),\n          playerPositions: playerPositions,\n          setFocusedCell: setFocusedCell,\n          clientId: clientId\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_c2 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange,\n  incorrectCells,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3,\n        incorrectCells: incorrectCells,\n        playerPositions: playerPositions,\n        setFocusedCell: setFocusedCell,\n        clientId: clientId\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n_c3 = FinalGrid;\nfunction SudokuBoard({\n  gridData,\n  handleCellChange,\n  incorrectCells,\n  playerPositions,\n  setFocusedCell,\n  clientId,\n  puzzleTitle\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FinalGrid, {\n      gridData: gridData,\n      onCellChange: handleCellChange,\n      incorrectCells: incorrectCells,\n      playerPositions: playerPositions,\n      setFocusedCell: setFocusedCell,\n      clientId: clientId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n}\n_c4 = SudokuBoard;\nexport default SudokuBoard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"ThreeGrid\");\n$RefreshReg$(_c3, \"FinalGrid\");\n$RefreshReg$(_c4, \"SudokuBoard\");","map":{"version":3,"names":["React","webSocketManager","jsxDEV","_jsxDEV","Cell","value","isEditable","onChange","isIncorrect","row","col","playerPositions","setFocusedCell","clientId","handleChange","event","inputValue","target","slice","test","handleFocus","send","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","inputMode","fileName","_jsxFileName","lineNumber","columnNumber","_c","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","children","rowIndex","cell","colIndex","globalRow","globalCol","some","_c2","FinalGrid","gridRow","gridCol","_c3","SudokuBoard","handleCellChange","puzzleTitle","_c4","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuBoard.js"],"sourcesContent":["import React from \"react\";\nimport webSocketManager from \"./WebSocketManager\";\n\nfunction Cell({\n    value,\n    isEditable,\n    onChange,\n    isIncorrect,\n    row,\n    col,\n    playerPositions,\n    setFocusedCell,\n    clientId,\n}) {\n    const handleChange = (event) => {\n        const inputValue = event.target.value.slice(-1);\n        if (/^[1-9]?$/.test(inputValue)) {\n            onChange(inputValue);\n        }\n    };\n\n    // Send position to server and update focusedCell when cell is focused\n    const handleFocus = () => {\n        setFocusedCell({ row, col }); // Update the focusedCell state\n        webSocketManager.send({\n            type: \"sendPlayerPosition\",\n            position: { row, col },\n            clientId: clientId,\n        });\n    };\n\n    // Determine the CSS class based on editable state and incorrect state\n    let cellClass = isEditable ? \"cell\" : \"non-editable-cell\";\n    if (isIncorrect) {\n        cellClass += \" incorrect-cell\";\n    }\n\n    // Add player position highlights\n    const playerHighlights =\n        playerPositions\n            .filter(\n                (player) =>\n                    player.position.row === row && player.position.col === col,\n            )\n            .map((player) => {\n                return {\n                    boxShadow: `inset 0 0 0 3px ${player.color}`,\n                    zIndex: 1,\n                    position: \"relative\",\n                };\n            })[0] || {};\n\n    return (\n        <input\n            type=\"text\"\n            value={value}\n            onChange={isEditable ? handleChange : undefined}\n            onFocus={handleFocus}\n            readOnly={!isEditable}\n            maxLength=\"2\"\n            className={cellClass}\n            style={playerHighlights}\n            data-row={row}\n            data-col={col}\n            inputMode=\"none\"\n        />\n    );\n}\n\nfunction ThreeGrid({\n    gridData,\n    onCellChange,\n    rowOffset,\n    colOffset,\n    incorrectCells,\n    playerPositions,\n    setFocusedCell,\n    clientId,\n}) {\n    const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n        Array.from({ length: 3 }, (_, j) => gridData[j][i]),\n    );\n\n    return (\n        <div className=\"threeGrid\">\n            {transposedGridData.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"grid-row\">\n                    {row.map((cell, colIndex) => {\n                        const globalRow = rowOffset + colIndex;\n                        const globalCol = colOffset + rowIndex;\n\n                        const isIncorrect = incorrectCells.some(\n                            (cell) =>\n                                cell.col === globalRow &&\n                                cell.row === globalCol,\n                        );\n\n                        return (\n                            <Cell\n                                key={colIndex}\n                                value={cell.value}\n                                isEditable={cell.isEditable}\n                                isIncorrect={isIncorrect}\n                                row={globalRow}\n                                col={globalCol}\n                                onChange={(value) =>\n                                    onCellChange(globalRow, globalCol, value)\n                                }\n                                playerPositions={playerPositions}\n                                setFocusedCell={setFocusedCell}\n                                clientId={clientId}\n                            />\n                        );\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nfunction FinalGrid({\n    gridData,\n    onCellChange,\n    incorrectCells,\n    playerPositions,\n    setFocusedCell,\n    clientId,\n}) {\n    return (\n        <div className=\"finalGrid\">\n            {Array.from({ length: 3 }, (_, gridRow) => (\n                <div key={gridRow} className=\"grid-row\">\n                    {Array.from({ length: 3 }, (_, gridCol) => (\n                        <ThreeGrid\n                            key={gridCol}\n                            gridData={gridData\n                                .slice(gridRow * 3, gridRow * 3 + 3)\n                                .map((row) =>\n                                    row.slice(gridCol * 3, gridCol * 3 + 3),\n                                )}\n                            onCellChange={onCellChange}\n                            rowOffset={gridRow * 3}\n                            colOffset={gridCol * 3}\n                            incorrectCells={incorrectCells}\n                            playerPositions={playerPositions}\n                            setFocusedCell={setFocusedCell}\n                            clientId={clientId}\n                        />\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nfunction SudokuBoard({\n    gridData,\n    handleCellChange,\n    incorrectCells,\n    playerPositions,\n    setFocusedCell,\n    clientId,\n    puzzleTitle,\n}) {\n    return (\n        <div className=\"sudoku-container\">\n            <div className=\"sudokuTitle\">{puzzleTitle}</div>\n            <FinalGrid\n                gridData={gridData}\n                onCellChange={handleCellChange}\n                incorrectCells={incorrectCells}\n                playerPositions={playerPositions}\n                setFocusedCell={setFocusedCell}\n                clientId={clientId}\n            />\n        </div>\n    );\n}\n\nexport default SudokuBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}