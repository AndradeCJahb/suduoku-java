{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport '../index.css';\nimport webSocketManager from './WebSocketManager';\nimport SudokuBoard from './SudokuBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect,\n  row,\n  col,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server and update focusedCell when cell is focused\n  const handleFocus = () => {\n    setFocusedCell({\n      row,\n      col\n    }); // Update the focusedCell state\n    webSocketManager.send({\n      type: 'sendPlayerPosition',\n      position: {\n        row,\n        col\n      },\n      clientId: clientId\n    });\n  };\n\n  // Determine the CSS class based on editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions.filter(player => player.position.row === row && player.position.col === col).map(player => {\n    return {\n      boxShadow: `inset 0 0 0 3px ${player.color}`,\n      zIndex: 1,\n      position: 'relative'\n    };\n  })[0] || {};\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    onFocus: handleFocus,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass,\n    style: playerHighlights,\n    \"data-row\": row,\n    \"data-col\": col,\n    inputMode: \"numeric\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n// Check if a client ID exists in localStorage\n_c = Cell;\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = generateUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nfunction SudokuGame() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    puzzleId: urlPuzzleId\n  } = useParams();\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({\n    value: '',\n    isEditable: true\n  })));\n  const [players, setPlayers] = useState([]);\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const [focusedCell, setFocusedCell] = useState({\n    row: 5,\n    col: 5\n  });\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  });\n  const [chatInput, setChatInput] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [incorrectCells, setIncorrectCells] = useState([]);\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    const wsUrl = 'ws://localhost:8080/ws';\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\n    webSocketManager.connect(wsUrl);\n    const handleMessage = data => {\n      if (data.type === 'updatePuzzle') {\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n      } else if (data.type === 'updatePlayers') {\n        setPlayers(data.players);\n      } else if (data.type === 'updateIdentity') {\n        setClientInfo(data.client);\n      } else if (data.type === 'updateChat') {\n        setChatMessages(data.messages);\n      } else if (data.type === 'updatePuzzleSolved') {\n        setPuzzleSolved(true);\n      } else if (data.type === 'updateIncorrectCells') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'updatePlayerPositions') {\n        setPlayerPositions(data.positions);\n      } else if (data.type === 'puzzleNotFound') {\n        alert('Puzzle not found. Returning to puzzle selection.');\n        navigate('/');\n      }\n    };\n    webSocketManager.addListener(handleMessage);\n\n    // Send initial messages\n    webSocketManager.send({\n      type: 'fetchIdentity',\n      clientId\n    });\n    webSocketManager.send({\n      type: 'fetchPuzzle',\n      clientId,\n      puzzleId\n    });\n    webSocketManager.send({\n      type: 'fetchChat',\n      puzzleId\n    });\n    return () => {\n      webSocketManager.removeListener(handleMessage);\n      webSocketManager.send({\n        type: 'sendLeaveRoom',\n        clientId: clientId,\n        puzzleId: puzzleId\n      });\n    };\n  }, [puzzleId, navigate]);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId\n      };\n      webSocketManager.send({\n        type: 'sendChat',\n        message\n      });\n      setChatInput('');\n    }\n  };\n  const handleKeyDown = event => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    switch (event.key) {\n      case 'ArrowUp':\n        if (col > 0) setFocusedCell({\n          row: row,\n          col: col - 1\n        });\n        break;\n      case 'ArrowDown':\n        if (col < 8) setFocusedCell({\n          row: row,\n          col: col + 1\n        });\n        break;\n      case 'ArrowLeft':\n        if (row > 0) setFocusedCell({\n          row: row - 1,\n          col: col\n        });\n        break;\n      case 'ArrowRight':\n        if (row < 8) setFocusedCell({\n          row: row + 1,\n          col: col\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    const handleKeyPress = event => handleKeyDown(event);\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  });\n  useEffect(() => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    const targetCell = document.querySelector(`input[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    if (targetCell) {\n      targetCell.focus();\n      // Ensure the cursor is always at the end of the input value\n      const valueLength = targetCell.value.length;\n      setTimeout(() => {\n        targetCell.setSelectionRange(valueLength, valueLength);\n      }, 0); // Use a timeout to ensure this runs after the focus event\n    }\n  }, [focusedCell]);\n  const handleCheckSolution = () => {\n    webSocketManager.send({\n      type: 'sendCheckSolution',\n      puzzleId: puzzleId\n    });\n  };\n  const handleCellChange = (row, col, value) => {\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n    setGridData(newGrid);\n    setPuzzleSolved(false);\n    webSocketManager.send({\n      type: 'sendIncorrectCellsUpdate',\n      puzzleId: puzzleId,\n      row: col,\n      col: row\n    });\n    webSocketManager.send({\n      type: 'sendCellChange',\n      puzzleId: puzzleId,\n      row: col,\n      col: row,\n      value: value || 0\n    });\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    setPuzzleSolved(false);\n    webSocketManager.send({\n      type: 'sendClearBoard',\n      puzzleId: puzzleId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solved-popup\",\n      style: {\n        display: puzzleSolved ? 'flex' : 'none'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"solved-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close-solved\",\n          onClick: () => setPuzzleSolved(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"solved-title\",\n          children: \"Puzzle Solved!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"solved-text\",\n          children: \"Congratulations! You've successfully completed the puzzle.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: /*#__PURE__*/_jsxDEV(SudokuBoard, {\n          gridData: gridData,\n          handleCellChange: handleCellChange,\n          incorrectCells: incorrectCells,\n          playerPositions: playerPositions,\n          setFocusedCell: setFocusedCell,\n          handleClearBoard: handleClearBoard,\n          handleCheckSolution: handleCheckSolution,\n          clientId: clientId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatLog\",\n            ref: chatLogRef,\n            children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: msg.color || '#000'\n                },\n                children: [msg.user, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message\",\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: new Date(msg.time).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: true\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatInput\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: chatInput,\n              onChange: e => setChatInput(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              },\n              placeholder: \"Type to chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clientInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"You are:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: clientInfo.color\n              },\n              children: [\" \", clientInfo.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"playerHeader\",\n            children: \"Connected Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerList\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: {\n                  color: player.color\n                },\n                children: player.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuGame, \"025Vp6At9dIBuBEOB+5112qvK1w=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c2 = SudokuGame;\nexport default SudokuGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"SudokuGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","webSocketManager","SudokuBoard","jsxDEV","_jsxDEV","Cell","value","isEditable","onChange","isIncorrect","row","col","playerPositions","setFocusedCell","clientId","handleChange","event","inputValue","target","slice","test","handleFocus","send","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","inputMode","fileName","_jsxFileName","lineNumber","columnNumber","_c","localStorage","getItem","generateUUID","setItem","replace","c","r","Math","random","v","toString","SudokuGame","_s","navigate","puzzleId","urlPuzzleId","parseInt","puzzleTitle","setPuzzleTitle","gridData","setGridData","Array","fill","players","setPlayers","setPlayerPositions","focusedCell","clientInfo","setClientInfo","name","chatInput","setChatInput","chatMessages","setChatMessages","incorrectCells","setIncorrectCells","puzzleSolved","setPuzzleSolved","chatLogRef","current","scrollTop","scrollHeight","wsUrl","console","log","connect","handleMessage","data","updatedGrid","from","length","_","rowIndex","colIndex","board","title","client","messages","positions","alert","addListener","removeListener","sendChatMessage","trim","message","user","text","handleKeyDown","key","handleKeyPress","window","addEventListener","removeEventListener","targetCell","document","querySelector","focus","valueLength","setTimeout","setSelectionRange","handleCheckSolution","handleCellChange","newGrid","cell","handleClearBoard","clearedGrid","children","display","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","placeholder","_c2","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport '../index.css';\r\nimport webSocketManager from './WebSocketManager';\r\nimport SudokuBoard from './SudokuBoard';\r\n\r\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, setFocusedCell, clientId }) {  const handleChange = (event) => {\r\n    const inputValue = event.target.value.slice(-1);\r\n    if (/^[1-9]?$/.test(inputValue)) {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // Send position to server and update focusedCell when cell is focused\r\n  const handleFocus = () => {\r\n    setFocusedCell({ row, col }); // Update the focusedCell state\r\n    webSocketManager.send({\r\n      type: 'sendPlayerPosition',\r\n      position: { row, col },\r\n      clientId: clientId,\r\n      \r\n    });\r\n  };\r\n\r\n  // Determine the CSS class based on editable state and incorrect state\r\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\r\n  if (isIncorrect) {\r\n    cellClass += ' incorrect-cell';\r\n  }\r\n\r\n  // Add player position highlights\r\n  const playerHighlights = playerPositions\r\n    .filter(player => player.position.row === row && player.position.col === col)\r\n    .map(player => {\r\n      return {\r\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n      };\r\n    })[0] || {};\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={isEditable ? handleChange : undefined}\r\n      onFocus={handleFocus}\r\n      readOnly={!isEditable}\r\n      maxLength=\"2\"\r\n      className={cellClass}\r\n      style={playerHighlights}\r\n      data-row={row}\r\n      data-col={col}\r\n      inputMode=\"numeric\" \r\n    />\r\n  );\r\n}\r\n\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem('clientId');\r\nif (!clientId) {\r\n  clientId = generateUUID();\r\n  localStorage.setItem('clientId', clientId);\r\n}\r\n\r\nfunction generateUUID() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n\r\nfunction SudokuGame() {\r\n  const navigate = useNavigate();\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\r\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\r\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({ value: '', isEditable: true })));\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [focusedCell, setFocusedCell] = useState({ row: 5, col: 5 });\r\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' });\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\r\n  const chatLogRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    const wsUrl = 'ws://localhost:8080/ws';\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    webSocketManager.connect(wsUrl);\r\n\r\n    const handleMessage = (data) => {\r\n      if (data.type === 'updatePuzzle') {\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n      } else if (data.type === 'updatePlayers') {\r\n        setPlayers(data.players);\r\n      } else if (data.type === 'updateIdentity') {\r\n        setClientInfo(data.client);\r\n      } else if (data.type === 'updateChat') {\r\n        setChatMessages(data.messages);\r\n      } else if (data.type === 'updatePuzzleSolved') {\r\n        setPuzzleSolved(true);\r\n      } else if (data.type === 'updateIncorrectCells') {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === 'updatePlayerPositions') {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === 'puzzleNotFound') {\r\n        alert('Puzzle not found. Returning to puzzle selection.');\r\n        navigate('/');\r\n      }\r\n    };\r\n  \r\n    webSocketManager.addListener(handleMessage);\r\n  \r\n    // Send initial messages\r\n    webSocketManager.send({ type: 'fetchIdentity', clientId });\r\n    webSocketManager.send({ type: 'fetchPuzzle', clientId, puzzleId });\r\n    webSocketManager.send({ type: 'fetchChat', puzzleId });\r\n  \r\n    return () => {\r\n      webSocketManager.removeListener(handleMessage);\r\n      webSocketManager.send({ \r\n        type: 'sendLeaveRoom', \r\n        clientId: clientId,\r\n        puzzleId: puzzleId\r\n      });\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const sendChatMessage = () => {\r\n    if (chatInput.trim() !== '') {\r\n      const message = {\r\n        user: clientInfo.name,\r\n        color: clientInfo.color,\r\n        text: chatInput,\r\n        puzzleId: puzzleId,\r\n      };\r\n\r\n      webSocketManager.send({ type: 'sendChat', message });\r\n      setChatInput('');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    const { row, col } = focusedCell;\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (col > 0) setFocusedCell({ row: row , col: col - 1});\r\n          break;\r\n        case 'ArrowDown':\r\n          if (col < 8) setFocusedCell({ row: row , col: col + 1});\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (row > 0) setFocusedCell({ row: row - 1, col: col });\r\n          break;\r\n        case 'ArrowRight':\r\n          if (row < 8) setFocusedCell({ row: row + 1, col: col });\r\n          break;\r\n          default:\r\n            break;\r\n        }\r\n    };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => handleKeyDown(event);\r\n  \r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const { row, col } = focusedCell;\r\n    const targetCell = document.querySelector(\r\n      `input[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n    );\r\n    if (targetCell) {\r\n      targetCell.focus();\r\n      // Ensure the cursor is always at the end of the input value\r\n      const valueLength = targetCell.value.length;\r\n      setTimeout(() => {\r\n        targetCell.setSelectionRange(valueLength, valueLength);\r\n      }, 0); // Use a timeout to ensure this runs after the focus event\r\n    }\r\n  }, [focusedCell]);\r\n  \r\n  const handleCheckSolution = () => {\r\n    webSocketManager.send({\r\n      type: 'sendCheckSolution',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? { ...cell, value }\r\n          : cell\r\n      )\r\n    );\r\n  \r\n    setGridData(newGrid);\r\n    setPuzzleSolved(false);\r\n\r\n    webSocketManager.send({\r\n      type: 'sendIncorrectCellsUpdate',\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n    });\r\n  \r\n    webSocketManager.send({\r\n      type: 'sendCellChange',\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n      value: value || 0,\r\n    });\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map(row =>\r\n      row.map(cell => ({\r\n        ...cell,\r\n        value: cell.isEditable ? '' : cell.value\r\n      }))\r\n    );\r\n    \r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    setPuzzleSolved(false);\r\n    \r\n    webSocketManager.send({\r\n      type: 'sendClearBoard',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      \r\n      <div className=\"solved-popup\" style={{ display: puzzleSolved ? 'flex' : 'none' }}>\r\n        <div className=\"solved-popup-content\">\r\n          <span className=\"close-solved\" onClick={() => setPuzzleSolved(false)}>&times;</span>\r\n          <h2 className=\"solved-title\">Puzzle Solved!</h2>\r\n          <p className=\"solved-text\">Congratulations! You've successfully completed the puzzle.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n\r\n      <div className=\"app-container\">\r\n        <div className=\"left-section\">\r\n          <SudokuBoard \r\n            gridData={gridData}\r\n            handleCellChange={handleCellChange}\r\n            incorrectCells={incorrectCells}\r\n            playerPositions={playerPositions}\r\n            setFocusedCell={setFocusedCell}\r\n            handleClearBoard={handleClearBoard}\r\n            handleCheckSolution={handleCheckSolution}\r\n            clientId={clientId}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"right-section\">\r\n          <div className=\"chatBox\">\r\n            <div className=\"chatLog\" ref={chatLogRef}>\r\n              {chatMessages.map((msg, index) => (\r\n                <div key={index}>\r\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\r\n                  <span className=\"message\">{msg.message}</span>\r\n                  <span className=\"time\">\r\n                    {new Date(msg.time).toLocaleTimeString([], {\r\n                      hour: '2-digit',\r\n                      minute: '2-digit',\r\n                      hour12: true,\r\n                    })}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n  \r\n            <div className=\"chatInput\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatInput}\r\n                onChange={(e) => setChatInput(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    sendChatMessage();\r\n                  }\r\n                }}\r\n                placeholder=\"Type to chat\"\r\n              />\r\n            </div>\r\n          </div>\r\n  \r\n          <div className=\"players-section\">\r\n            <div className=\"clientInfo\">\r\n              <span>You are:</span>\r\n              <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\r\n            </div>\r\n  \r\n            <h3 className=\"playerHeader\">Connected Players:</h3>\r\n  \r\n            <div className=\"playerList\">\r\n              <ul>\r\n                {players.map((player, index) => (\r\n                  <li key={index} style={{ color: player.color }}>\r\n                    {player.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}