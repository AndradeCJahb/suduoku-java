{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"header\",\n    children: \"Suduoku\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = Header;\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Determine the CSS class based on both editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset,\n  incorrectCells\n}) {\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        // Calculate the global row and column for this cell\n        const globalRow = rowOffset + colIndex;\n        const globalCol = colOffset + rowIndex;\n\n        // Check if this cell is in the incorrect cells list\n        const isIncorrect = incorrectCells.some(cell => cell.row === globalRow && cell.col === globalCol);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.value,\n          isEditable: cell.isEditable,\n          isIncorrect: isIncorrect,\n          onChange: value => onCellChange(globalRow, globalCol, value)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c3 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange,\n  incorrectCells\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3,\n        incorrectCells: incorrectCells\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n// Check if a client ID exists in localStorage\n_c4 = FinalGrid;\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction App() {\n  _s();\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n  const [puzzleTitle, setPuzzleTitle] = useState(''); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n\n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    ws.current = new WebSocket('https://3197-24-20-96-196.ngrok-free.app '); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      // Send the client ID to the server\n      ws.current.send(JSON.stringify({\n        type: 'identify',\n        clientId\n      }));\n\n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({\n        type: 'loadChat'\n      }));\n    };\n    ws.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        if (data.error) {\n          alert(data.error);\n        } else {\n          // This should completely replace the current incorrectCells state\n          setIncorrectCells(data.incorrectCells);\n        }\n      }\n    };\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1 // Use the actual puzzle ID from state\n      };\n\n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({\n        type: 'chat',\n        message\n      }));\n\n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n  const handleCheckSolution = () => {\n    // Request solution check from server\n    ws.current.send(JSON.stringify({\n      type: 'checkSolution'\n    }));\n  };\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n\n    // Update local state\n    setGridData(newGrid);\n\n    // Don't modify incorrectCells locally, let the server broadcast the changes\n    // setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n\n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({\n      length: 9\n    }, (_, rowIndex) => Array.from({\n      length: 9\n    }, (_, colIndex) => ({\n      value: newGrid[colIndex][rowIndex].value,\n      isEditable: newGrid[colIndex][rowIndex].isEditable\n    })));\n\n    // Send with properly transposed coordinates for changedCell\n    ws.current.send(JSON.stringify({\n      type: 'update',\n      board: transposedGrid,\n      changedCell: {\n        row: col,\n        // Note the transposition here\n        col: row\n      }\n    }));\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({\n      length: 9\n    }, (_, rowIndex) => Array.from({\n      length: 9\n    }, (_, colIndex) => ({\n      value: clearedGrid[colIndex][rowIndex].value,\n      isEditable: clearedGrid[colIndex][rowIndex].isEditable\n    })));\n\n    // Send the cleared grid to the server\n    ws.current.send(JSON.stringify({\n      type: 'clearBoard',\n      board: transposedGrid\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-section\",\n        children: /*#__PURE__*/_jsxDEV(FinalGrid, {\n          gridData: gridData,\n          onCellChange: handleCellChange,\n          incorrectCells: incorrectCells\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientInfo\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"You are:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: clientInfo.color\n            },\n            children: [\" \", clientInfo.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"playerHeader\",\n          children: \"Connected Players:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerList\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                color: player.color\n              },\n              children: player.name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"boardControls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clearBoardBtn\",\n            onClick: handleClearBoard,\n            children: \"Clear Board\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"checkSolutionBtn\",\n            onClick: handleCheckSolution,\n            children: \"Check Solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatLog\",\n            ref: chatLogRef,\n            children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: msg.color || '#000'\n                },\n                children: [msg.user, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message\",\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: new Date(msg.time).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: true\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatInput\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: chatInput,\n              onChange: e => setChatInput(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendChatMessage(); // Trigger the sendChatMessage function on Enter\n                }\n              },\n              placeholder: \"Type to chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WDP8cw86Ghs19OAZganQksBdv6s=\");\n_c5 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 355,\n  columnNumber: 3\n}, this));\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"ThreeGrid\");\n$RefreshReg$(_c4, \"FinalGrid\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactDOM","jsxDEV","_jsxDEV","Header","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Cell","value","isEditable","onChange","isIncorrect","handleChange","event","inputValue","target","slice","test","cellClass","type","undefined","readOnly","maxLength","_c2","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","map","row","rowIndex","cell","colIndex","globalRow","globalCol","some","col","_c3","FinalGrid","gridRow","gridCol","_c4","clientId","localStorage","getItem","crypto","randomUUID","setItem","App","_s","setGridData","fill","puzzleTitle","setPuzzleTitle","puzzleId","setPuzzleId","clientInfo","setClientInfo","name","color","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","chatLogRef","ws","current","scrollTop","scrollHeight","WebSocket","onopen","console","log","send","JSON","stringify","onmessage","data","parse","updatedGrid","board","title","client","messages","error","alert","onclose","close","sendChatMessage","trim","message","user","text","handleCheckSolution","handleCellChange","newGrid","r","transposedGrid","changedCell","handleClearBoard","clearedGrid","style","player","index","onClick","ref","msg","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","_c5","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Header() {\n  return <h1 className=\"header\">Suduoku</h1>;\n}\n\nfunction Cell({ value, isEditable, onChange, isIncorrect }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Determine the CSS class based on both editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={isEditable ? handleChange : undefined}\n      readOnly={!isEditable}\n      maxLength=\"2\"\n      className={cellClass}\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells }) {\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\n  );\n\n  return (\n    <div className=\"threeGrid\">\n      {transposedGridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => {\n            // Calculate the global row and column for this cell\n            const globalRow = rowOffset + colIndex;\n            const globalCol = colOffset + rowIndex;\n            \n            // Check if this cell is in the incorrect cells list\n            const isIncorrect = incorrectCells.some(\n              cell => cell.row === globalRow && cell.col === globalCol\n            );\n            \n            return (\n              <Cell\n                key={colIndex}\n                value={cell.value}\n                isEditable={cell.isEditable}\n                isIncorrect={isIncorrect}\n                onChange={(value) =>\n                  onCellChange(globalRow, globalCol, value)\n                }\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FinalGrid({ gridData, onCellChange, incorrectCells }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n              incorrectCells={incorrectCells}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  const [puzzleTitle, setPuzzleTitle] = useState(''); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n  \n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    ws.current = new WebSocket('https://3197-24-20-96-196.ngrok-free.app '); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      // Send the client ID to the server\n      ws.current.send(JSON.stringify({ type: 'identify', clientId }));\n  \n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({ type: 'loadChat' }));\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n          }))\n        );\n    \n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        if (data.error) {\n          alert(data.error);\n        } else {\n          // This should completely replace the current incorrectCells state\n          setIncorrectCells(data.incorrectCells);\n        }\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1, // Use the actual puzzle ID from state\n      };\n      \n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\n      \n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n\n  const handleCheckSolution = () => {\n    // Request solution check from server\n    ws.current.send(JSON.stringify({ \n      type: 'checkSolution'\n    }));\n  };\n\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value }\n          : cell\n      )\n    );\n  \n    // Update local state\n    setGridData(newGrid);\n  \n    // Don't modify incorrectCells locally, let the server broadcast the changes\n    // setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n  \n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n  \n    // Send with properly transposed coordinates for changedCell\n    ws.current.send(JSON.stringify({ \n      type: 'update', \n      board: transposedGrid,\n      changedCell: { \n        row: col,  // Note the transposition here\n        col: row\n      }\n    }));\n  };\n\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row =>\n      row.map(cell => ({\n        ...cell,\n        value: cell.isEditable ? '' : cell.value\n      }))\n    );\n    \n    // Update local state\n    setGridData(clearedGrid);\n    \n    setIncorrectCells([]);\n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: clearedGrid[colIndex][rowIndex].value,\n        isEditable: clearedGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n    \n    // Send the cleared grid to the server\n    ws.current.send(JSON.stringify({ \n      type: 'clearBoard', \n      board: transposedGrid \n    }));\n  };\n\n\n  return (\n    <div>\n      <Header />\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\n      \n      <div className=\"app-container\">\n        <div className=\"board-section\">\n          <FinalGrid \n            gridData={gridData} \n            onCellChange={handleCellChange}\n            incorrectCells={incorrectCells}\n          />\n        </div>\n        \n        <div className=\"sidebar-section\">\n          <div className=\"clientInfo\">\n            <span>You are:</span>\n            <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\n          </div>\n  \n          <h3 className=\"playerHeader\">Connected Players:</h3>\n  \n          <div className=\"playerList\">\n            <ul>\n              {players.map((player, index) => (\n                <li key={index} style={{ color: player.color }}>\n                  {player.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n  \n          <div className=\"boardControls\">\n            <button \n              className=\"clearBoardBtn\" \n              onClick={handleClearBoard}\n            >\n              Clear Board\n            </button>\n            <button \n              className=\"checkSolutionBtn\" \n              onClick={handleCheckSolution}\n            >\n              Check Solution\n            </button>\n          </div>\n  \n          <div className=\"chatBox\">\n            <div className=\"chatLog\" ref={chatLogRef}>\n              {chatMessages.map((msg, index) => (\n                <div key={index}>\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\n                  <span className=\"message\">{msg.message}</span>\n                  <span className=\"time\">\n                    {new Date(msg.time).toLocaleTimeString([], {\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      hour12: true,\n                    })}\n                  </span>\n                </div>\n              ))}\n            </div>\n  \n            <div className=\"chatInput\">\n              <input\n                type=\"text\"\n                value={chatInput}\n                onChange={(e) => setChatInput(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    sendChatMessage(); // Trigger the sendChatMessage function on Enter\n                  }\n                }}\n                placeholder=\"Type to chat\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}