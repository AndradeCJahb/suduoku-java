{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\src\\\\index.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PermHeader() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"PermHeader\",\n    children: \"Suduoku\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = PermHeader;\nfunction Cell({\n  value\n}) {\n  _s();\n  const [cellValue, setCellValue] = useState(value || '');\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      setCellValue(inputValue); // Directly set the new value\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: cellValue,\n    onChange: handleChange,\n    className: \"cell\",\n    maxLength: \"1\" // Limit input to a single character\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(Cell, \"YC79lbXLZMIJ/jsbQvTy/Mse1Ao=\");\n_c2 = Cell;\nfunction ThreeGrid({\n  gridData\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: cell\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_c3 = ThreeGrid;\nfunction FinalGrid({\n  gridData\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: gridData.map((threeGrid, gridIndex) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n      gridData: threeGrid\n    }, gridIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_c4 = FinalGrid;\nfunction App() {\n  _s2();\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const content = e.target.result;\n        const parsedGrid = parseSdxFile(content);\n        setGridData(parsedGrid);\n      };\n      reader.readAsText(file);\n    }\n  };\n  const parseSdxFile = content => {\n    const rows = content.trim().split('\\n');\n    return rows.map(row => row.split(' ').map(cell => {\n      if (cell.startsWith('u')) {\n        return cell.slice(1); // User-entered value\n      } else if (/^\\d$/.test(cell)) {\n        return cell; // Given value\n      } else {\n        return ''; // Unsolved cell\n      }\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PermHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".sdx\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FinalGrid, {\n      gridData: gridData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"lS4Q9OcfRMPLLupI1MTDNH2HXG0=\");\n_c5 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 98,\n  columnNumber: 3\n}, this));\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"PermHeader\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"ThreeGrid\");\n$RefreshReg$(_c4, \"FinalGrid\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","jsxDEV","_jsxDEV","PermHeader","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Cell","value","_s","cellValue","setCellValue","handleChange","event","inputValue","target","slice","test","type","onChange","maxLength","_c2","ThreeGrid","gridData","map","row","rowIndex","cell","colIndex","_c3","FinalGrid","threeGrid","gridIndex","_c4","App","_s2","setGridData","Array","fill","handleFileUpload","file","files","reader","FileReader","onload","e","content","result","parsedGrid","parseSdxFile","readAsText","rows","trim","split","startsWith","accept","_c5","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction PermHeader() {\n  return <h1 className=\"PermHeader\">Suduoku</h1>;\n}\n\nfunction Cell({ value }) {\n  const [cellValue, setCellValue] = useState(value || '');\n\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      setCellValue(inputValue); // Directly set the new value\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={cellValue}\n      onChange={handleChange}\n      className=\"cell\"\n      maxLength=\"1\" // Limit input to a single character\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData }) {\n  return (\n    <div className=\"threeGrid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell key={colIndex} value={cell} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FinalGrid({ gridData }) {\n  return (\n    <div className=\"finalGrid\">\n      {gridData.map((threeGrid, gridIndex) => (\n        <ThreeGrid key={gridIndex} gridData={threeGrid} />\n      ))}\n    </div>\n  );\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target.result;\n        const parsedGrid = parseSdxFile(content);\n        setGridData(parsedGrid);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const parseSdxFile = (content) => {\n    const rows = content.trim().split('\\n');\n    return rows.map((row) =>\n      row.split(' ').map((cell) => {\n        if (cell.startsWith('u')) {\n          return cell.slice(1); // User-entered value\n        } else if (/^\\d$/.test(cell)) {\n          return cell; // Given value\n        } else {\n          return ''; // Unsolved cell\n        }\n      })\n    );\n  };\n\n  return (\n    <div>\n      <PermHeader />\n      <input type=\"file\" accept=\".sdx\" onChange={handleFileUpload} />\n      <FinalGrid gridData={gridData} />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}