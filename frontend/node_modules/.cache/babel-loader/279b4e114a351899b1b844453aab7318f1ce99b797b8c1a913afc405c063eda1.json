{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport '../index.css';\nimport webSocketManager from './WebSocketManager';\nimport SudokuBoard from './SudokuBoard';\n\n// Check if a client ID exists in localStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = generateUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nfunction SudokuGame() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    puzzleId: urlPuzzleId\n  } = useParams();\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({\n    value: '',\n    isEditable: true\n  })));\n  const [players, setPlayers] = useState([]);\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const [focusedCell, setFocusedCell] = useState({\n    row: 5,\n    col: 5\n  });\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  });\n  const [chatInput, setChatInput] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [incorrectCells, setIncorrectCells] = useState([]);\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    const wsUrl = 'ws://localhost:8080/ws';\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\n    webSocketManager.connect(wsUrl);\n    const handleMessage = data => {\n      if (data.type === 'updatePuzzle') {\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n      } else if (data.type === 'updatePlayers') {\n        setPlayers(data.players);\n      } else if (data.type === 'updateIdentity') {\n        setClientInfo(data.client);\n      } else if (data.type === 'updateChat') {\n        setChatMessages(data.messages);\n      } else if (data.type === 'updatePuzzleSolved') {\n        setPuzzleSolved(true);\n      } else if (data.type === 'updateIncorrectCells') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'updatePlayerPositions') {\n        setPlayerPositions(data.positions);\n      } else if (data.type === 'puzzleNotFound') {\n        alert('Puzzle not found. Returning to puzzle selection.');\n        navigate('/');\n      }\n    };\n    webSocketManager.addListener(handleMessage);\n\n    // Send initial messages\n    webSocketManager.send({\n      type: 'fetchIdentity',\n      clientId\n    });\n    webSocketManager.send({\n      type: 'fetchPuzzle',\n      clientId,\n      puzzleId\n    });\n    webSocketManager.send({\n      type: 'fetchChat',\n      puzzleId\n    });\n    return () => {\n      webSocketManager.removeListener(handleMessage);\n      webSocketManager.send({\n        type: 'sendLeaveRoom',\n        clientId: clientId,\n        puzzleId: puzzleId\n      });\n    };\n  }, [puzzleId, navigate]);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId\n      };\n      webSocketManager.send({\n        type: 'sendChat',\n        message\n      });\n      setChatInput('');\n    }\n  };\n  const handleKeyDown = event => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    switch (event.key) {\n      case 'ArrowUp':\n        if (col > 0) setFocusedCell({\n          row: row,\n          col: col - 1\n        });\n        break;\n      case 'ArrowDown':\n        if (col < 8) setFocusedCell({\n          row: row,\n          col: col + 1\n        });\n        break;\n      case 'ArrowLeft':\n        if (row > 0) setFocusedCell({\n          row: row - 1,\n          col: col\n        });\n        break;\n      case 'ArrowRight':\n        if (row < 8) setFocusedCell({\n          row: row + 1,\n          col: col\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    const handleKeyPress = event => handleKeyDown(event);\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  });\n  useEffect(() => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    const targetCell = document.querySelector(`input[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    if (targetCell) {\n      targetCell.focus();\n      // Ensure the cursor is always at the end of the input value\n      const valueLength = targetCell.value.length;\n      setTimeout(() => {\n        targetCell.setSelectionRange(valueLength, valueLength);\n      }, 0); // Use a timeout to ensure this runs after the focus event\n    }\n  }, [focusedCell]);\n  const handleCheckSolution = () => {\n    webSocketManager.send({\n      type: 'sendCheckSolution',\n      puzzleId: puzzleId\n    });\n  };\n  const handleCellChange = (row, col, value) => {\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n    setGridData(newGrid);\n    setPuzzleSolved(false);\n    webSocketManager.send({\n      type: 'sendIncorrectCellsUpdate',\n      puzzleId: puzzleId,\n      row: col,\n      col: row\n    });\n    webSocketManager.send({\n      type: 'sendCellChange',\n      puzzleId: puzzleId,\n      row: col,\n      col: row,\n      value: value || 0\n    });\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    setPuzzleSolved(false);\n    webSocketManager.send({\n      type: 'sendClearBoard',\n      puzzleId: puzzleId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solved-popup\",\n      style: {\n        display: puzzleSolved ? 'flex' : 'none'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"solved-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close-solved\",\n          onClick: () => setPuzzleSolved(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"solved-title\",\n          children: \"Puzzle Solved!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"solved-text\",\n          children: \"Congratulations! You've successfully completed the puzzle.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: /*#__PURE__*/_jsxDEV(SudokuBoard, {\n          gridData: gridData,\n          handleCellChange: handleCellChange,\n          incorrectCells: incorrectCells,\n          playerPositions: playerPositions,\n          setFocusedCell: setFocusedCell,\n          handleClearBoard: handleClearBoard,\n          handleCheckSolution: handleCheckSolution,\n          clientId: clientId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatLog\",\n            ref: chatLogRef,\n            children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: msg.color || '#000'\n                },\n                children: [msg.user, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message\",\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: new Date(msg.time).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: true\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatInput\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: chatInput,\n              onChange: e => setChatInput(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              },\n              placeholder: \"Type to chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clientInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"You are:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: clientInfo.color\n              },\n              children: [\" \", clientInfo.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"playerHeader\",\n            children: \"Connected Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerList\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: {\n                  color: player.color\n                },\n                children: player.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuGame, \"025Vp6At9dIBuBEOB+5112qvK1w=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = SudokuGame;\nexport default SudokuGame;\nvar _c;\n$RefreshReg$(_c, \"SudokuGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","webSocketManager","SudokuBoard","jsxDEV","_jsxDEV","clientId","localStorage","getItem","generateUUID","setItem","replace","c","r","Math","random","v","toString","SudokuGame","_s","navigate","puzzleId","urlPuzzleId","parseInt","puzzleTitle","setPuzzleTitle","gridData","setGridData","Array","fill","value","isEditable","players","setPlayers","playerPositions","setPlayerPositions","focusedCell","setFocusedCell","row","col","clientInfo","setClientInfo","name","color","chatInput","setChatInput","chatMessages","setChatMessages","incorrectCells","setIncorrectCells","puzzleSolved","setPuzzleSolved","chatLogRef","current","scrollTop","scrollHeight","wsUrl","console","log","connect","handleMessage","data","type","updatedGrid","from","length","_","rowIndex","colIndex","board","title","client","messages","positions","alert","addListener","send","removeListener","sendChatMessage","trim","message","user","text","handleKeyDown","event","key","handleKeyPress","window","addEventListener","removeEventListener","targetCell","document","querySelector","focus","valueLength","setTimeout","setSelectionRange","handleCheckSolution","handleCellChange","newGrid","map","cell","handleClearBoard","clearedGrid","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","onChange","e","target","onKeyDown","placeholder","player","_c","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport '../index.css';\r\nimport webSocketManager from './WebSocketManager';\r\nimport SudokuBoard from './SudokuBoard';\r\n\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem('clientId');\r\nif (!clientId) {\r\n  clientId = generateUUID();\r\n  localStorage.setItem('clientId', clientId);\r\n}\r\n\r\nfunction generateUUID() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n\r\nfunction SudokuGame() {\r\n  const navigate = useNavigate();\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\r\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\r\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({ value: '', isEditable: true })));\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [focusedCell, setFocusedCell] = useState({ row: 5, col: 5 });\r\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' });\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\r\n  const chatLogRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    const wsUrl = 'ws://localhost:8080/ws';\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    webSocketManager.connect(wsUrl);\r\n\r\n    const handleMessage = (data) => {\r\n      if (data.type === 'updatePuzzle') {\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n      } else if (data.type === 'updatePlayers') {\r\n        setPlayers(data.players);\r\n      } else if (data.type === 'updateIdentity') {\r\n        setClientInfo(data.client);\r\n      } else if (data.type === 'updateChat') {\r\n        setChatMessages(data.messages);\r\n      } else if (data.type === 'updatePuzzleSolved') {\r\n        setPuzzleSolved(true);\r\n      } else if (data.type === 'updateIncorrectCells') {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === 'updatePlayerPositions') {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === 'puzzleNotFound') {\r\n        alert('Puzzle not found. Returning to puzzle selection.');\r\n        navigate('/');\r\n      }\r\n    };\r\n  \r\n    webSocketManager.addListener(handleMessage);\r\n  \r\n    // Send initial messages\r\n    webSocketManager.send({ type: 'fetchIdentity', clientId });\r\n    webSocketManager.send({ type: 'fetchPuzzle', clientId, puzzleId });\r\n    webSocketManager.send({ type: 'fetchChat', puzzleId });\r\n  \r\n    return () => {\r\n      webSocketManager.removeListener(handleMessage);\r\n      webSocketManager.send({ \r\n        type: 'sendLeaveRoom', \r\n        clientId: clientId,\r\n        puzzleId: puzzleId\r\n      });\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const sendChatMessage = () => {\r\n    if (chatInput.trim() !== '') {\r\n      const message = {\r\n        user: clientInfo.name,\r\n        color: clientInfo.color,\r\n        text: chatInput,\r\n        puzzleId: puzzleId,\r\n      };\r\n\r\n      webSocketManager.send({ type: 'sendChat', message });\r\n      setChatInput('');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    const { row, col } = focusedCell;\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (col > 0) setFocusedCell({ row: row , col: col - 1});\r\n          break;\r\n        case 'ArrowDown':\r\n          if (col < 8) setFocusedCell({ row: row , col: col + 1});\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (row > 0) setFocusedCell({ row: row - 1, col: col });\r\n          break;\r\n        case 'ArrowRight':\r\n          if (row < 8) setFocusedCell({ row: row + 1, col: col });\r\n          break;\r\n          default:\r\n            break;\r\n        }\r\n    };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => handleKeyDown(event);\r\n  \r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const { row, col } = focusedCell;\r\n    const targetCell = document.querySelector(\r\n      `input[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n    );\r\n    if (targetCell) {\r\n      targetCell.focus();\r\n      // Ensure the cursor is always at the end of the input value\r\n      const valueLength = targetCell.value.length;\r\n      setTimeout(() => {\r\n        targetCell.setSelectionRange(valueLength, valueLength);\r\n      }, 0); // Use a timeout to ensure this runs after the focus event\r\n    }\r\n  }, [focusedCell]);\r\n  \r\n  const handleCheckSolution = () => {\r\n    webSocketManager.send({\r\n      type: 'sendCheckSolution',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? { ...cell, value }\r\n          : cell\r\n      )\r\n    );\r\n  \r\n    setGridData(newGrid);\r\n    setPuzzleSolved(false);\r\n\r\n    webSocketManager.send({\r\n      type: 'sendIncorrectCellsUpdate',\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n    });\r\n  \r\n    webSocketManager.send({\r\n      type: 'sendCellChange',\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n      value: value || 0,\r\n    });\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map(row =>\r\n      row.map(cell => ({\r\n        ...cell,\r\n        value: cell.isEditable ? '' : cell.value\r\n      }))\r\n    );\r\n    \r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    setPuzzleSolved(false);\r\n    \r\n    webSocketManager.send({\r\n      type: 'sendClearBoard',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      \r\n      <div className=\"solved-popup\" style={{ display: puzzleSolved ? 'flex' : 'none' }}>\r\n        <div className=\"solved-popup-content\">\r\n          <span className=\"close-solved\" onClick={() => setPuzzleSolved(false)}>&times;</span>\r\n          <h2 className=\"solved-title\">Puzzle Solved!</h2>\r\n          <p className=\"solved-text\">Congratulations! You've successfully completed the puzzle.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n\r\n      <div className=\"app-container\">\r\n        <div className=\"left-section\">\r\n          <SudokuBoard \r\n            gridData={gridData}\r\n            handleCellChange={handleCellChange}\r\n            incorrectCells={incorrectCells}\r\n            playerPositions={playerPositions}\r\n            setFocusedCell={setFocusedCell}\r\n            handleClearBoard={handleClearBoard}\r\n            handleCheckSolution={handleCheckSolution}\r\n            clientId={clientId}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"right-section\">\r\n          <div className=\"chatBox\">\r\n            <div className=\"chatLog\" ref={chatLogRef}>\r\n              {chatMessages.map((msg, index) => (\r\n                <div key={index}>\r\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\r\n                  <span className=\"message\">{msg.message}</span>\r\n                  <span className=\"time\">\r\n                    {new Date(msg.time).toLocaleTimeString([], {\r\n                      hour: '2-digit',\r\n                      minute: '2-digit',\r\n                      hour12: true,\r\n                    })}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n  \r\n            <div className=\"chatInput\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatInput}\r\n                onChange={(e) => setChatInput(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    sendChatMessage();\r\n                  }\r\n                }}\r\n                placeholder=\"Type to chat\"\r\n              />\r\n            </div>\r\n          </div>\r\n  \r\n          <div className=\"players-section\">\r\n            <div className=\"clientInfo\">\r\n              <span>You are:</span>\r\n              <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\r\n            </div>\r\n  \r\n            <h3 className=\"playerHeader\">Connected Players:</h3>\r\n  \r\n            <div className=\"playerList\">\r\n              <ul>\r\n                {players.map((player, index) => (\r\n                  <li key={index} style={{ color: player.color }}>\r\n                    {player.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,cAAc;AACrB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,WAAW,MAAM,eAAe;;AAGvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,IAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AAC/C,IAAI,CAACF,QAAQ,EAAE;EACbA,QAAQ,GAAGG,YAAY,CAAC,CAAC;EACzBF,YAAY,CAACG,OAAO,CAAC,UAAU,EAAEJ,QAAQ,CAAC;AAC5C;AAEA,SAASG,YAAYA,CAAA,EAAG;EACtB,OAAO,sCAAsC,CAACE,OAAO,CAAC,OAAO,EAAE,UAASC,CAAC,EAAE;IACzE,IAAIC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;MAAEC,CAAC,GAAGJ,CAAC,KAAK,GAAG,GAAGC,CAAC,GAAKA,CAAC,GAAG,GAAG,GAAI,GAAI;IACrE,OAAOG,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;EACvB,CAAC,CAAC;AACJ;AAGA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEqB,QAAQ,EAAEC;EAAY,CAAC,GAAGvB,SAAS,CAAC,CAAC;EAC7C,MAAM,CAACsB,QAAQ,CAAC,GAAGzB,QAAQ,CAAC2B,QAAQ,CAACD,WAAW,CAAC,IAAI,IAAI,CAAC;EAC1D,MAAM,CAACE,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,mBAAmB,CAAC;EACnE,MAAM,CAAC8B,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAACgC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;EACvG,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAAC;IAAE0C,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EAClE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG7C,QAAQ,CAAC;IAAE8C,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EACrE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoD,cAAc,EAAEC,iBAAiB,CAAC,GAAGrD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACsD,YAAY,EAAEC,eAAe,CAAC,GAAGvD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMwD,UAAU,GAAGtD,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd;IACA,IAAIuD,UAAU,CAACC,OAAO,EAAE;MACtBD,UAAU,CAACC,OAAO,CAACC,SAAS,GAAGF,UAAU,CAACC,OAAO,CAACE,YAAY;IAChE;EACF,CAAC,EAAE,CAACT,YAAY,CAAC,CAAC;EAElBjD,SAAS,CAAC,MAAM;IACd,MAAM2D,KAAK,GAAG,wBAAwB;IACtCC,OAAO,CAACC,GAAG,CAAC,8BAA8BF,KAAK,EAAE,CAAC;IAClDtD,gBAAgB,CAACyD,OAAO,CAACH,KAAK,CAAC;IAE/B,MAAMI,aAAa,GAAIC,IAAI,IAAK;MAC9B,IAAIA,IAAI,CAACC,IAAI,KAAK,cAAc,EAAE;QAChC,MAAMC,WAAW,GAAGnC,KAAK,CAACoC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,QAAQ,KACxDvC,KAAK,CAACoC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,EAAE,CAACC,CAAC,EAAEE,QAAQ,MAAM;UAC1CtC,KAAK,EAAE+B,IAAI,CAACQ,KAAK,CAACD,QAAQ,CAAC,CAACD,QAAQ,CAAC,CAACrC,KAAK;UAAE;UAC7CC,UAAU,EAAE8B,IAAI,CAACQ,KAAK,CAACD,QAAQ,CAAC,CAACD,QAAQ,CAAC,CAACpC,UAAU,CAAE;QACzD,CAAC,CAAC,CACJ,CAAC;QACDJ,WAAW,CAACoC,WAAW,CAAC;QACxBtC,cAAc,CAACoC,IAAI,CAACS,KAAK,CAAC;MAC5B,CAAC,MAAM,IAAIT,IAAI,CAACC,IAAI,KAAK,eAAe,EAAE;QACxC7B,UAAU,CAAC4B,IAAI,CAAC7B,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAI6B,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;QACzCrB,aAAa,CAACoB,IAAI,CAACU,MAAM,CAAC;MAC5B,CAAC,MAAM,IAAIV,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;QACrCf,eAAe,CAACc,IAAI,CAACW,QAAQ,CAAC;MAChC,CAAC,MAAM,IAAIX,IAAI,CAACC,IAAI,KAAK,oBAAoB,EAAE;QAC7CX,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM,IAAIU,IAAI,CAACC,IAAI,KAAK,sBAAsB,EAAE;QAC/Cb,iBAAiB,CAACY,IAAI,CAACb,cAAc,CAAC;MACxC,CAAC,MAAM,IAAIa,IAAI,CAACC,IAAI,KAAK,uBAAuB,EAAE;QAChD3B,kBAAkB,CAAC0B,IAAI,CAACY,SAAS,CAAC;MACpC,CAAC,MAAM,IAAIZ,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;QACzCY,KAAK,CAAC,kDAAkD,CAAC;QACzDtD,QAAQ,CAAC,GAAG,CAAC;MACf;IACF,CAAC;IAEDlB,gBAAgB,CAACyE,WAAW,CAACf,aAAa,CAAC;;IAE3C;IACA1D,gBAAgB,CAAC0E,IAAI,CAAC;MAAEd,IAAI,EAAE,eAAe;MAAExD;IAAS,CAAC,CAAC;IAC1DJ,gBAAgB,CAAC0E,IAAI,CAAC;MAAEd,IAAI,EAAE,aAAa;MAAExD,QAAQ;MAAEe;IAAS,CAAC,CAAC;IAClEnB,gBAAgB,CAAC0E,IAAI,CAAC;MAAEd,IAAI,EAAE,WAAW;MAAEzC;IAAS,CAAC,CAAC;IAEtD,OAAO,MAAM;MACXnB,gBAAgB,CAAC2E,cAAc,CAACjB,aAAa,CAAC;MAC9C1D,gBAAgB,CAAC0E,IAAI,CAAC;QACpBd,IAAI,EAAE,eAAe;QACrBxD,QAAQ,EAAEA,QAAQ;QAClBe,QAAQ,EAAEA;MACZ,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,CAACA,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAExB,MAAM0D,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIlC,SAAS,CAACmC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC3B,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAEzC,UAAU,CAACE,IAAI;QACrBC,KAAK,EAAEH,UAAU,CAACG,KAAK;QACvBuC,IAAI,EAAEtC,SAAS;QACfvB,QAAQ,EAAEA;MACZ,CAAC;MAEDnB,gBAAgB,CAAC0E,IAAI,CAAC;QAAEd,IAAI,EAAE,UAAU;QAAEkB;MAAQ,CAAC,CAAC;MACpDnC,YAAY,CAAC,EAAE,CAAC;IAClB;EACF,CAAC;EAED,MAAMsC,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAM;MAAE9C,GAAG;MAAEC;IAAI,CAAC,GAAGH,WAAW;IAC9B,QAAQgD,KAAK,CAACC,GAAG;MACf,KAAK,SAAS;QACZ,IAAI9C,GAAG,GAAG,CAAC,EAAEF,cAAc,CAAC;UAAEC,GAAG,EAAEA,GAAG;UAAGC,GAAG,EAAEA,GAAG,GAAG;QAAC,CAAC,CAAC;QACvD;MACF,KAAK,WAAW;QACd,IAAIA,GAAG,GAAG,CAAC,EAAEF,cAAc,CAAC;UAAEC,GAAG,EAAEA,GAAG;UAAGC,GAAG,EAAEA,GAAG,GAAG;QAAC,CAAC,CAAC;QACvD;MACF,KAAK,WAAW;QACd,IAAID,GAAG,GAAG,CAAC,EAAED,cAAc,CAAC;UAAEC,GAAG,EAAEA,GAAG,GAAG,CAAC;UAAEC,GAAG,EAAEA;QAAI,CAAC,CAAC;QACvD;MACF,KAAK,YAAY;QACf,IAAID,GAAG,GAAG,CAAC,EAAED,cAAc,CAAC;UAAEC,GAAG,EAAEA,GAAG,GAAG,CAAC;UAAEC,GAAG,EAAEA;QAAI,CAAC,CAAC;QACvD;MACA;QACE;IACJ;EACJ,CAAC;EAEH1C,SAAS,CAAC,MAAM;IACd,MAAMyF,cAAc,GAAIF,KAAK,IAAKD,aAAa,CAACC,KAAK,CAAC;IAEtDG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEF,cAAc,CAAC;IAClD,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEH,cAAc,CAAC;IACvD,CAAC;EACH,CAAC,CAAC;EAEFzF,SAAS,CAAC,MAAM;IACd,MAAM;MAAEyC,GAAG;MAAEC;IAAI,CAAC,GAAGH,WAAW;IAChC,MAAMsD,UAAU,GAAGC,QAAQ,CAACC,aAAa,CACvC,mBAAmBtD,GAAG,gBAAgBC,GAAG,IAC3C,CAAC;IACD,IAAImD,UAAU,EAAE;MACdA,UAAU,CAACG,KAAK,CAAC,CAAC;MAClB;MACA,MAAMC,WAAW,GAAGJ,UAAU,CAAC5D,KAAK,CAACmC,MAAM;MAC3C8B,UAAU,CAAC,MAAM;QACfL,UAAU,CAACM,iBAAiB,CAACF,WAAW,EAAEA,WAAW,CAAC;MACxD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACT;EACF,CAAC,EAAE,CAAC1D,WAAW,CAAC,CAAC;EAEjB,MAAM6D,mBAAmB,GAAGA,CAAA,KAAM;IAChC/F,gBAAgB,CAAC0E,IAAI,CAAC;MACpBd,IAAI,EAAE,mBAAmB;MACzBzC,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,MAAM6E,gBAAgB,GAAGA,CAAC5D,GAAG,EAAEC,GAAG,EAAET,KAAK,KAAK;IAC5C,MAAMqE,OAAO,GAAGzE,QAAQ,CAAC0E,GAAG,CAAC,CAACvF,CAAC,EAAEsD,QAAQ,KACvCtD,CAAC,CAACuF,GAAG,CAAC,CAACC,IAAI,EAAEjC,QAAQ,KACnBD,QAAQ,KAAK7B,GAAG,IAAI8B,QAAQ,KAAK7B,GAAG,GAChC;MAAE,GAAG8D,IAAI;MAAEvE;IAAM,CAAC,GAClBuE,IACN,CACF,CAAC;IAED1E,WAAW,CAACwE,OAAO,CAAC;IACpBhD,eAAe,CAAC,KAAK,CAAC;IAEtBjD,gBAAgB,CAAC0E,IAAI,CAAC;MACpBd,IAAI,EAAE,0BAA0B;MAChCzC,QAAQ,EAAEA,QAAQ;MAClBiB,GAAG,EAAEC,GAAG;MACRA,GAAG,EAAED;IACP,CAAC,CAAC;IAEFpC,gBAAgB,CAAC0E,IAAI,CAAC;MACpBd,IAAI,EAAE,gBAAgB;MACtBzC,QAAQ,EAAEA,QAAQ;MAClBiB,GAAG,EAAEC,GAAG;MACRA,GAAG,EAAED,GAAG;MACRR,KAAK,EAAEA,KAAK,IAAI;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMwE,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMC,WAAW,GAAG7E,QAAQ,CAAC0E,GAAG,CAAC9D,GAAG,IAClCA,GAAG,CAAC8D,GAAG,CAACC,IAAI,KAAK;MACf,GAAGA,IAAI;MACPvE,KAAK,EAAEuE,IAAI,CAACtE,UAAU,GAAG,EAAE,GAAGsE,IAAI,CAACvE;IACrC,CAAC,CAAC,CACJ,CAAC;;IAED;IACAH,WAAW,CAAC4E,WAAW,CAAC;IACxBtD,iBAAiB,CAAC,EAAE,CAAC;IACrBE,eAAe,CAAC,KAAK,CAAC;IAEtBjD,gBAAgB,CAAC0E,IAAI,CAAC;MACpBd,IAAI,EAAE,gBAAgB;MACtBzC,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,oBACEhB,OAAA;IAAAmG,QAAA,gBACEnG,OAAA,CAACJ,MAAM;MAAAwG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVvG,OAAA;MAAKwG,SAAS,EAAC,cAAc;MAACC,KAAK,EAAE;QAAEC,OAAO,EAAE7D,YAAY,GAAG,MAAM,GAAG;MAAO,CAAE;MAAAsD,QAAA,eAC/EnG,OAAA;QAAKwG,SAAS,EAAC,sBAAsB;QAAAL,QAAA,gBACnCnG,OAAA;UAAMwG,SAAS,EAAC,cAAc;UAACG,OAAO,EAAEA,CAAA,KAAM7D,eAAe,CAAC,KAAK,CAAE;UAAAqD,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpFvG,OAAA;UAAIwG,SAAS,EAAC,cAAc;UAAAL,QAAA,EAAC;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChDvG,OAAA;UAAGwG,SAAS,EAAC,aAAa;UAAAL,QAAA,EAAC;QAA0D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENvG,OAAA;MAAKwG,SAAS,EAAC,aAAa;MAAAL,QAAA,EAAEhF;IAAW;MAAAiF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAEhDvG,OAAA;MAAKwG,SAAS,EAAC,eAAe;MAAAL,QAAA,gBAC5BnG,OAAA;QAAKwG,SAAS,EAAC,cAAc;QAAAL,QAAA,eAC3BnG,OAAA,CAACF,WAAW;UACVuB,QAAQ,EAAEA,QAAS;UACnBwE,gBAAgB,EAAEA,gBAAiB;UACnClD,cAAc,EAAEA,cAAe;UAC/Bd,eAAe,EAAEA,eAAgB;UACjCG,cAAc,EAAEA,cAAe;UAC/BiE,gBAAgB,EAAEA,gBAAiB;UACnCL,mBAAmB,EAAEA,mBAAoB;UACzC3F,QAAQ,EAAEA;QAAS;UAAAmG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENvG,OAAA;QAAKwG,SAAS,EAAC,eAAe;QAAAL,QAAA,gBAC5BnG,OAAA;UAAKwG,SAAS,EAAC,SAAS;UAAAL,QAAA,gBACtBnG,OAAA;YAAKwG,SAAS,EAAC,SAAS;YAACI,GAAG,EAAE7D,UAAW;YAAAoD,QAAA,EACtC1D,YAAY,CAACsD,GAAG,CAAC,CAACc,GAAG,EAAEC,KAAK,kBAC3B9G,OAAA;cAAAmG,QAAA,gBACEnG,OAAA;gBAAQyG,KAAK,EAAE;kBAAEnE,KAAK,EAAEuE,GAAG,CAACvE,KAAK,IAAI;gBAAO,CAAE;gBAAA6D,QAAA,GAAEU,GAAG,CAACjC,IAAI,EAAC,GAAC;cAAA;gBAAAwB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACnEvG,OAAA;gBAAMwG,SAAS,EAAC,SAAS;gBAAAL,QAAA,EAAEU,GAAG,CAAClC;cAAO;gBAAAyB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC9CvG,OAAA;gBAAMwG,SAAS,EAAC,MAAM;gBAAAL,QAAA,EACnB,IAAIY,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC,CAACC,kBAAkB,CAAC,EAAE,EAAE;kBACzCC,IAAI,EAAE,SAAS;kBACfC,MAAM,EAAE,SAAS;kBACjBC,MAAM,EAAE;gBACV,CAAC;cAAC;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA,GATCO,KAAK;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAUV,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eAENvG,OAAA;YAAKwG,SAAS,EAAC,WAAW;YAAAL,QAAA,eACxBnG,OAAA;cACEyD,IAAI,EAAC,MAAM;cACXhC,KAAK,EAAEc,SAAU;cACjB8E,QAAQ,EAAGC,CAAC,IAAK9E,YAAY,CAAC8E,CAAC,CAACC,MAAM,CAAC9F,KAAK,CAAE;cAC9C+F,SAAS,EAAGF,CAAC,IAAK;gBAChB,IAAIA,CAAC,CAACtC,GAAG,KAAK,OAAO,EAAE;kBACrBP,eAAe,CAAC,CAAC;gBACnB;cACF,CAAE;cACFgD,WAAW,EAAC;YAAc;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENvG,OAAA;UAAKwG,SAAS,EAAC,iBAAiB;UAAAL,QAAA,gBAC9BnG,OAAA;YAAKwG,SAAS,EAAC,YAAY;YAAAL,QAAA,gBACzBnG,OAAA;cAAAmG,QAAA,EAAM;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACrBvG,OAAA;cAAMyG,KAAK,EAAE;gBAAEnE,KAAK,EAAEH,UAAU,CAACG;cAAM,CAAE;cAAA6D,QAAA,GAAC,GAAC,EAAChE,UAAU,CAACE,IAAI;YAAA;cAAA+D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChE,CAAC,eAENvG,OAAA;YAAIwG,SAAS,EAAC,cAAc;YAAAL,QAAA,EAAC;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAEpDvG,OAAA;YAAKwG,SAAS,EAAC,YAAY;YAAAL,QAAA,eACzBnG,OAAA;cAAAmG,QAAA,EACGxE,OAAO,CAACoE,GAAG,CAAC,CAAC2B,MAAM,EAAEZ,KAAK,kBACzB9G,OAAA;gBAAgByG,KAAK,EAAE;kBAAEnE,KAAK,EAAEoF,MAAM,CAACpF;gBAAM,CAAE;gBAAA6D,QAAA,EAC5CuB,MAAM,CAACrF;cAAI,GADLyE,KAAK;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACzF,EAAA,CA7QQD,UAAU;EAAA,QACAlB,WAAW,EACMD,SAAS;AAAA;AAAAiI,EAAA,GAFpC9G,UAAU;AA+QnB,eAAeA,UAAU;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}