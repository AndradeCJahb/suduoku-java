{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuBoard.js\";\nimport React from 'react';\nimport webSocketManager from './WebSocketManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect,\n  row,\n  col,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server and update focusedCell when cell is focused\n  const handleFocus = e => {\n    setFocusedCell({\n      row,\n      col\n    }); // Update the focusedCell state\n    webSocketManager.send({\n      type: 'sendPlayerPosition',\n      position: {\n        row,\n        col\n      },\n      clientId: clientId\n    });\n    if (window.innerWidth <= 400) {\n      // or use your mobile detection\n      e.target.blur(); // Immediately blur to prevent scroll\n    }\n  };\n\n  // Determine the CSS class based on editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions.filter(player => player.position.row === row && player.position.col === col).map(player => {\n    return {\n      boxShadow: `inset 0 0 0 3px ${player.color}`,\n      zIndex: 1,\n      position: 'relative'\n    };\n  })[0] || {};\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    onFocus: e => handleFocus,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass,\n    style: playerHighlights,\n    \"data-row\": row,\n    \"data-col\": col,\n    inputMode: \"none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_c = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset,\n  incorrectCells,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        const globalRow = rowOffset + colIndex;\n        const globalCol = colOffset + rowIndex;\n        const isIncorrect = incorrectCells.some(cell => cell.col === globalRow && cell.row === globalCol);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.value,\n          isEditable: cell.isEditable,\n          isIncorrect: isIncorrect,\n          row: globalRow,\n          col: globalCol,\n          onChange: value => onCellChange(globalRow, globalCol, value),\n          playerPositions: playerPositions,\n          setFocusedCell: setFocusedCell,\n          clientId: clientId\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange,\n  incorrectCells,\n  playerPositions,\n  setFocusedCell,\n  clientId\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3,\n        incorrectCells: incorrectCells,\n        playerPositions: playerPositions,\n        setFocusedCell: setFocusedCell,\n        clientId: clientId\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_c3 = FinalGrid;\nfunction SudokuBoard({\n  gridData,\n  handleCellChange,\n  incorrectCells,\n  playerPositions,\n  setFocusedCell,\n  clientId,\n  puzzleTitle\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FinalGrid, {\n      gridData: gridData,\n      onCellChange: handleCellChange,\n      incorrectCells: incorrectCells,\n      playerPositions: playerPositions,\n      setFocusedCell: setFocusedCell,\n      clientId: clientId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_c4 = SudokuBoard;\nexport default SudokuBoard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"ThreeGrid\");\n$RefreshReg$(_c3, \"FinalGrid\");\n$RefreshReg$(_c4, \"SudokuBoard\");","map":{"version":3,"names":["React","webSocketManager","jsxDEV","_jsxDEV","Cell","value","isEditable","onChange","isIncorrect","row","col","playerPositions","setFocusedCell","clientId","handleChange","event","inputValue","target","slice","test","handleFocus","e","send","type","position","window","innerWidth","blur","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","inputMode","fileName","_jsxFileName","lineNumber","columnNumber","_c","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","children","rowIndex","cell","colIndex","globalRow","globalCol","some","_c2","FinalGrid","gridRow","gridCol","_c3","SudokuBoard","handleCellChange","puzzleTitle","_c4","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuBoard.js"],"sourcesContent":["import React from 'react';\r\nimport webSocketManager from './WebSocketManager';\r\n\r\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, setFocusedCell, clientId }) {\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value.slice(-1);\r\n    if (/^[1-9]?$/.test(inputValue)) {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // Send position to server and update focusedCell when cell is focused\r\n  const handleFocus = (e) => {\r\n    setFocusedCell({ row, col }); // Update the focusedCell state\r\n    webSocketManager.send({\r\n      type: 'sendPlayerPosition',\r\n      position: { row, col },\r\n      clientId: clientId,\r\n    });\r\n    if (window.innerWidth <= 400) { // or use your mobile detection\r\n      e.target.blur(); // Immediately blur to prevent scroll\r\n    }\r\n  };\r\n\r\n  // Determine the CSS class based on editable state and incorrect state\r\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\r\n  if (isIncorrect) {\r\n    cellClass += ' incorrect-cell';\r\n  }\r\n\r\n  // Add player position highlights\r\n  const playerHighlights = playerPositions\r\n    .filter(player => player.position.row === row && player.position.col === col)\r\n    .map(player => {\r\n      return {\r\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n      };\r\n    })[0] || {};\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={isEditable ? handleChange : undefined}\r\n      onFocus={e => handleFocus}\r\n      readOnly={!isEditable}\r\n      maxLength=\"2\"\r\n      className={cellClass}\r\n      style={playerHighlights}\r\n      data-row={row}\r\n      data-col={col}\r\n      inputMode=\"none\" \r\n    />\r\n  );\r\n}\r\n\r\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, setFocusedCell, clientId }) {\r\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\r\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\r\n  );\r\n\r\n  return (\r\n    <div className=\"threeGrid\">\r\n      {transposedGridData.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"grid-row\">\r\n          {row.map((cell, colIndex) => {\r\n            const globalRow = rowOffset + colIndex;\r\n            const globalCol = colOffset + rowIndex;\r\n\r\n            const isIncorrect = incorrectCells.some(\r\n              cell => cell.col === globalRow && cell.row === globalCol\r\n            );\r\n\r\n            return (\r\n              <Cell\r\n                key={colIndex}\r\n                value={cell.value}\r\n                isEditable={cell.isEditable}\r\n                isIncorrect={isIncorrect}\r\n                row={globalRow}\r\n                col={globalCol}\r\n                onChange={(value) => onCellChange(globalRow, globalCol, value)}\r\n                playerPositions={playerPositions}\r\n                setFocusedCell={setFocusedCell}\r\n                clientId={clientId}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, setFocusedCell, clientId }) {\r\n  return (\r\n    <div className=\"finalGrid\">\r\n      {Array.from({ length: 3 }, (_, gridRow) => (\r\n        <div key={gridRow} className=\"grid-row\">\r\n          {Array.from({ length: 3 }, (_, gridCol) => (\r\n            <ThreeGrid\r\n              key={gridCol}\r\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\r\n                row.slice(gridCol * 3, gridCol * 3 + 3)\r\n              )}\r\n              onCellChange={onCellChange}\r\n              rowOffset={gridRow * 3}\r\n              colOffset={gridCol * 3}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              setFocusedCell={setFocusedCell}\r\n              clientId={clientId}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SudokuBoard({ \r\n  gridData, \r\n  handleCellChange, \r\n  incorrectCells, \r\n  playerPositions, \r\n  setFocusedCell,\r\n  clientId,\r\n  puzzleTitle\r\n}) {\r\n  return (\r\n    <div className=\"sudoku-container\">\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n        <FinalGrid\r\n          gridData={gridData}\r\n          onCellChange={handleCellChange}\r\n          incorrectCells={incorrectCells}\r\n          playerPositions={playerPositions}\r\n          setFocusedCell={setFocusedCell}\r\n          clientId={clientId}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}