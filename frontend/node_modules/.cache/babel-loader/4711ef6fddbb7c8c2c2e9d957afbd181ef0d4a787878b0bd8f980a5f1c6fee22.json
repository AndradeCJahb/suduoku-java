{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import ReactDOM from'react-dom/client';import'./index.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Header(){return/*#__PURE__*/_jsx(\"h1\",{className:\"header\",children:\"Suduoku\"});}function Cell(_ref){let{value,isEditable,onChange}=_ref;const handleChange=event=>{const inputValue=event.target.value.slice(-1);// Get the last character entered\nif(/^[1-9]?$/.test(inputValue)){onChange(inputValue);// Notify parent of the change\n}};return/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:value,onChange:isEditable?handleChange:undefined// Disable editing if not editable\n,readOnly:!isEditable,maxLength:\"2\"// Limit input to a single character\n,className:isEditable?'cell':'non-editable-cell'});}function ThreeGrid(_ref2){let{gridData,onCellChange,rowOffset,colOffset}=_ref2;// Create a transposed version of the gridData for the inner 3x3 grid\nconst transposedGridData=Array.from({length:3},(_,i)=>Array.from({length:3},(_,j)=>gridData[j][i]));return/*#__PURE__*/_jsx(\"div\",{className:\"threeGrid\",children:transposedGridData.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(Cell,{value:cell.value,isEditable:cell.isEditable,onChange:value=>// The indices need to be swapped here for the correct mapping\nonCellChange(rowOffset+colIndex,colOffset+rowIndex,value)},colIndex))},rowIndex))});}function FinalGrid(_ref3){let{gridData,onCellChange}=_ref3;return/*#__PURE__*/_jsx(\"div\",{className:\"finalGrid\",children:Array.from({length:3},(_,gridRow)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:Array.from({length:3},(_,gridCol)=>/*#__PURE__*/_jsx(ThreeGrid,{gridData:gridData.slice(gridRow*3,gridRow*3+3).map(row=>row.slice(gridCol*3,gridCol*3+3)),onCellChange:onCellChange,rowOffset:gridRow*3,colOffset:gridCol*3},gridCol))},gridRow))});}// Check if a client ID exists in localStorage\nlet clientId=localStorage.getItem('clientId');if(!clientId){clientId=crypto.randomUUID();localStorage.setItem('clientId',clientId);}function App(){const[gridData,setGridData]=useState(Array(9).fill(Array(9).fill(''))// Initialize empty 9x9 grid\n);const[puzzleTitle,setPuzzleTitle]=useState('');// State for the puzzle title\nconst[puzzleId,setPuzzleId]=useState(null);// Add state for the puzzle ID\nconst[clientInfo,setClientInfo]=useState({name:'',color:''});// State for the client's name and color\nconst[players,setPlayers]=useState([]);// State for the list of connected players\nconst[chatInput,setChatInput]=useState('');// State for the chat input box\nconst[chatMessages,setChatMessages]=useState([]);// State for the list of chat messages\nconst chatLogRef=useRef(null);const ws=useRef(null);// Use useRef to persist the WebSocket instance\nuseEffect(()=>{// Scroll to the bottom of the chat log whenever messages are updated\nif(chatLogRef.current){chatLogRef.current.scrollTop=chatLogRef.current.scrollHeight;}},[chatMessages]);useEffect(()=>{ws.current=new WebSocket(' https://dabf-2601-1c2-4503-61b0-9d5b-8d64-ba07-e34a.ngrok-free.app');// Connect to the backend WebSocket server\nws.current.onopen=()=>{console.log('Connected to WebSocket server');// Send the client ID to the server\nws.current.send(JSON.stringify({type:'identify',clientId}));// Request chat history for the current puzzle\nws.current.send(JSON.stringify({type:'loadChat'}));};ws.current.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='update'){// Update the grid with the new state from the server\nconst updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,// Swap row and column indices\nisEditable:data.board[colIndex][rowIndex].isEditable// Swap row and column indices\n})));setGridData(updatedGrid);// Set the grid data in row-major order\nsetPuzzleTitle(data.title);// Update the puzzle title\nif(data.puzzleId){setPuzzleId(data.puzzleId);}if(data.client){setClientInfo(data.client);// Set the client's name and color\n}}else if(data.type==='players'){setPlayers(data.players);// Update the list of connected players \n}else if(data.type==='chatHistory'){setChatMessages(data.messages);// Load chat history\n}};ws.current.onclose=()=>{console.log('Disconnected from WebSocket server');};return()=>ws.current.close();// Clean up WebSocket connection on unmount\n},[]);const sendChatMessage=()=>{if(chatInput.trim()!==''){const message={user:clientInfo.name,color:clientInfo.color,text:chatInput,puzzleId:puzzleId||1// Use the actual puzzle ID from state\n};// Send the chat message to the server\nws.current.send(JSON.stringify({type:'chat',message}));// Clear the input box after sending the message\nsetChatInput('');}};const handleCellChange=(row,col,value)=>{// Update the local grid first\nconst newGrid=gridData.map((r,rowIndex)=>r.map((cell,colIndex)=>rowIndex===row&&colIndex===col?{...cell,value}// Update only the value property\n:cell));// Update local state\nsetGridData(newGrid);// Transpose the grid before sending to the server to match the expected format\nconst transposedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:newGrid[colIndex][rowIndex].value,isEditable:newGrid[colIndex][rowIndex].isEditable})));// Send the transposed grid to the server\nws.current.send(JSON.stringify({type:'update',board:transposedGrid}));};const handleClearBoard=()=>{// Create a new grid with only locked cells\nconst clearedGrid=gridData.map(row=>row.map(cell=>({...cell,value:cell.isEditable?'':cell.value})));// Update local state\nsetGridData(clearedGrid);// Transpose the grid before sending to the server\nconst transposedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:clearedGrid[colIndex][rowIndex].value,isEditable:clearedGrid[colIndex][rowIndex].isEditable})));// Send the cleared grid to the server\nws.current.send(JSON.stringify({type:'clearBoard',board:transposedGrid}));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"sudokuTitle\",children:puzzleTitle}),/*#__PURE__*/_jsx(FinalGrid,{gridData:gridData,onCellChange:handleCellChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"clientInfo\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"You are:\"}),/*#__PURE__*/_jsxs(\"span\",{style:{color:clientInfo.color},children:[\" \",clientInfo.name]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"playerHeader\",children:\"Connected Players:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"playerList\",children:/*#__PURE__*/_jsx(\"ul\",{children:players.map((player,index)=>/*#__PURE__*/_jsx(\"li\",{style:{color:player.color},children:player.name},index))})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatLog\",ref:chatLogRef,children:chatMessages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{style:{color:msg.color||'#000'},children:[msg.user,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"message\",children:msg.message}),/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:new Date(msg.time).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit',hour12:true})})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"chatInput\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:chatInput,onChange:e=>setChatInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'){sendChatMessage();// Trigger the sendChatMessage function on Enter\n}},placeholder:\"Type to chat\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"boardControls\",children:/*#__PURE__*/_jsx(\"button\",{className:\"clearBoardBtn\",onClick:handleClearBoard,children:\"Clear Board\"})})]});}const root=ReactDOM.createRoot(document.getElementById('root'));root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactDOM","jsx","_jsx","jsxs","_jsxs","Header","className","children","Cell","_ref","value","isEditable","onChange","handleChange","event","inputValue","target","slice","test","type","undefined","readOnly","maxLength","ThreeGrid","_ref2","gridData","onCellChange","rowOffset","colOffset","transposedGridData","Array","from","length","_","i","j","map","row","rowIndex","cell","colIndex","FinalGrid","_ref3","gridRow","gridCol","clientId","localStorage","getItem","crypto","randomUUID","setItem","App","setGridData","fill","puzzleTitle","setPuzzleTitle","puzzleId","setPuzzleId","clientInfo","setClientInfo","name","color","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","chatLogRef","ws","current","scrollTop","scrollHeight","WebSocket","onopen","console","log","send","JSON","stringify","onmessage","data","parse","updatedGrid","board","title","client","messages","onclose","close","sendChatMessage","trim","message","user","text","handleCellChange","col","newGrid","r","transposedGrid","handleClearBoard","clearedGrid","style","player","index","ref","msg","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","onClick","root","createRoot","document","getElementById","render","StrictMode"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Header() {\n  return <h1 className=\"header\">Suduoku</h1>;\n}\n\nfunction Cell({ value, isEditable, onChange }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue); // Notify parent of the change\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={isEditable ? handleChange : undefined} // Disable editing if not editable\n      readOnly={!isEditable}\n      maxLength=\"2\" // Limit input to a single character\n      className={isEditable ? 'cell' : 'non-editable-cell'}\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset }) {\n  // Create a transposed version of the gridData for the inner 3x3 grid\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\n  );\n\n  return (\n    <div className=\"threeGrid\">\n      {transposedGridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              value={cell.value}\n              isEditable={cell.isEditable}\n              onChange={(value) =>\n                // The indices need to be swapped here for the correct mapping\n                onCellChange(rowOffset + colIndex, colOffset + rowIndex, value)\n              }\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\nfunction FinalGrid({ gridData, onCellChange }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  const [puzzleTitle, setPuzzleTitle] = useState(''); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  \n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    ws.current = new WebSocket(' https://dabf-2601-1c2-4503-61b0-9d5b-8d64-ba07-e34a.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      // Send the client ID to the server\n      ws.current.send(JSON.stringify({ type: 'identify', clientId }));\n  \n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({ type: 'loadChat' }));\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n          }))\n        );\n    \n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1, // Use the actual puzzle ID from state\n      };\n      \n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\n      \n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid first\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value } // Update only the value property\n          : cell\n      )\n    );\n  \n    // Update local state\n    setGridData(newGrid);\n  \n    // Transpose the grid before sending to the server to match the expected format\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n  \n    // Send the transposed grid to the server\n    ws.current.send(JSON.stringify({ type: 'update', board: transposedGrid }));\n  };\n\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row =>\n      row.map(cell => ({\n        ...cell,\n        value: cell.isEditable ? '' : cell.value\n      }))\n    );\n    \n    // Update local state\n    setGridData(clearedGrid);\n    \n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: clearedGrid[colIndex][rowIndex].value,\n        isEditable: clearedGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n    \n    // Send the cleared grid to the server\n    ws.current.send(JSON.stringify({ \n      type: 'clearBoard', \n      board: transposedGrid \n    }));\n  };\n  \n\n  return (\n    <div>\n      <div>\n        <Header />\n        <div className=\"sudokuTitle\">{puzzleTitle}</div>\n        <FinalGrid gridData={gridData} onCellChange={handleCellChange} />\n      </div>\n\n      <div className=\"clientInfo\">\n        <span>You are:</span>\n        <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\n      </div>\n\n      <h3 className=\"playerHeader\">Connected Players:</h3>\n\n      <div className=\"playerList\">\n        <ul>\n          {players.map((player, index) => (\n            <li key={index} style={{ color: player.color }}>\n              {player.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"chatBox\">\n      <div className=\"chatLog\" ref={chatLogRef}>\n  {chatMessages.map((msg, index) => (\n    <div key={index}>\n      <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\n      <span className=\"message\">{msg.message}</span>\n      <span className=\"time\">\n        {new Date(msg.time).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true,\n        })}\n      </span>\n    </div>\n  ))}\n</div>\n\n        <div className=\"chatInput\">\n          <input\n            type=\"text\"\n            value={chatInput}\n            onChange={(e) => setChatInput(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                sendChatMessage(); // Trigger the sendChatMessage function on Enter\n              }\n            }}\n            placeholder=\"Type to chat\"\n          />\n        </div>\n</div>\n\n<div className=\"boardControls\">\n  <button \n    className=\"clearBoardBtn\" \n    onClick={handleClearBoard}\n  >\n    Clear Board\n  </button>\n</div>\n\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}