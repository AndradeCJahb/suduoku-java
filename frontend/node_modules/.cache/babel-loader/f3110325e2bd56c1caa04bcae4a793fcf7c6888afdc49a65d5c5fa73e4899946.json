{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useParams,useNavigate}from'react-router-dom';import Header from'./Header';import'../index.css';import webSocketManager from'./WebSocketManager';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Cell(_ref){let{value,isEditable,onChange,isIncorrect,row,col,playerPositions,setFocusedCell,clientId}=_ref;const handleChange=event=>{const inputValue=event.target.value.slice(-1);if(/^[1-9]?$/.test(inputValue)){onChange(inputValue);}};// Send position to server and update focusedCell when cell is focused\nconst handleFocus=()=>{setFocusedCell({row,col});// Update the focusedCell state\nwebSocketManager.send({type:'sendPlayerPosition',position:{row,col},clientId:clientId});};// Determine the CSS class based on editable state and incorrect state\nlet cellClass=isEditable?'cell':'non-editable-cell';if(isIncorrect){cellClass+=' incorrect-cell';}// Add player position highlights\nconst playerHighlights=playerPositions.filter(player=>player.position.row===row&&player.position.col===col).map(player=>{return{boxShadow:`inset 0 0 0 3px ${player.color}`,zIndex:1,position:'relative'};})[0]||{};return/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:value,onChange:isEditable?handleChange:undefined,onFocus:handleFocus,readOnly:!isEditable,maxLength:\"2\",className:cellClass,style:playerHighlights,\"data-row\":row,\"data-col\":col,inputMode:\"numeric\"});}function ThreeGrid(_ref2){let{gridData,onCellChange,rowOffset,colOffset,incorrectCells,playerPositions,setFocusedCell}=_ref2;const transposedGridData=Array.from({length:3},(_,i)=>Array.from({length:3},(_,j)=>gridData[j][i]));return/*#__PURE__*/_jsx(\"div\",{className:\"threeGrid\",children:transposedGridData.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:row.map((cell,colIndex)=>{const globalRow=rowOffset+colIndex;const globalCol=colOffset+rowIndex;const isIncorrect=incorrectCells.some(cell=>cell.col===globalRow&&cell.row===globalCol);return/*#__PURE__*/_jsx(Cell,{value:cell.value,isEditable:cell.isEditable,isIncorrect:isIncorrect,row:globalRow,col:globalCol,onChange:value=>onCellChange(globalRow,globalCol,value),playerPositions:playerPositions,setFocusedCell:setFocusedCell,clientId:clientId},colIndex);})},rowIndex))});}function FinalGrid(_ref3){let{gridData,onCellChange,incorrectCells,playerPositions,setFocusedCell}=_ref3;return/*#__PURE__*/_jsx(\"div\",{className:\"finalGrid\",children:Array.from({length:3},(_,gridRow)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:Array.from({length:3},(_,gridCol)=>/*#__PURE__*/_jsx(ThreeGrid,{gridData:gridData.slice(gridRow*3,gridRow*3+3).map(row=>row.slice(gridCol*3,gridCol*3+3)),onCellChange:onCellChange,rowOffset:gridRow*3,colOffset:gridCol*3,incorrectCells:incorrectCells,playerPositions:playerPositions,setFocusedCell:setFocusedCell},gridCol))},gridRow))});}// Check if a client ID exists in localStorage\nlet clientId=localStorage.getItem('clientId');if(!clientId){clientId=generateUUID();localStorage.setItem('clientId',clientId);}function generateUUID(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c==='x'?r:r&0x3|0x8;return v.toString(16);});}function SudokuGame(){const navigate=useNavigate();const{puzzleId:urlPuzzleId}=useParams();const[puzzleId]=useState(parseInt(urlPuzzleId)||null);const[puzzleTitle,setPuzzleTitle]=useState('Loading puzzle...');const[gridData,setGridData]=useState(Array(9).fill(Array(9).fill({value:'',isEditable:true})));const[players,setPlayers]=useState([]);const[playerPositions,setPlayerPositions]=useState([]);const[focusedCell,setFocusedCell]=useState({row:5,col:5});const[clientInfo,setClientInfo]=useState({name:'',color:''});const[chatInput,setChatInput]=useState('');const[chatMessages,setChatMessages]=useState([]);const[incorrectCells,setIncorrectCells]=useState([]);const[puzzleSolved,setPuzzleSolved]=useState(false);const chatLogRef=useRef(null);useEffect(()=>{// Scroll to the bottom of the chat log whenever messages are updated\nif(chatLogRef.current){chatLogRef.current.scrollTop=chatLogRef.current.scrollHeight;}},[chatMessages]);useEffect(()=>{const wsUrl='ws://localhost:8080/ws';console.log(`Connecting to WebSocket at ${wsUrl}`);webSocketManager.connect(wsUrl);const handleMessage=data=>{if(data.type==='updatePuzzle'){const updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,// Swap row and column indices\nisEditable:data.board[colIndex][rowIndex].isEditable// Swap row and column indices\n})));setGridData(updatedGrid);setPuzzleTitle(data.title);}else if(data.type==='updatePlayers'){setPlayers(data.players);}else if(data.type==='updateIdentity'){setClientInfo(data.client);}else if(data.type==='updateChat'){setChatMessages(data.messages);}else if(data.type==='updatePuzzleSolved'){setPuzzleSolved(true);}else if(data.type==='updateIncorrectCells'){setIncorrectCells(data.incorrectCells);}else if(data.type==='updatePlayerPositions'){setPlayerPositions(data.positions);}else if(data.type==='puzzleNotFound'){alert('Puzzle not found. Returning to puzzle selection.');navigate('/');}};webSocketManager.addListener(handleMessage);// Send initial messages\nwebSocketManager.send({type:'fetchIdentity',clientId});webSocketManager.send({type:'fetchPuzzle',clientId,puzzleId});webSocketManager.send({type:'fetchChat',puzzleId});return()=>{webSocketManager.removeListener(handleMessage);webSocketManager.send({type:'sendLeaveRoom',clientId:clientId,puzzleId:puzzleId});};},[puzzleId,navigate]);const sendChatMessage=()=>{if(chatInput.trim()!==''){const message={user:clientInfo.name,color:clientInfo.color,text:chatInput,puzzleId:puzzleId};webSocketManager.send({type:'sendChat',message});setChatInput('');}};const handleKeyDown=event=>{const{row,col}=focusedCell;switch(event.key){case'ArrowUp':if(col>0)setFocusedCell({row:row,col:col-1});break;case'ArrowDown':if(col<8)setFocusedCell({row:row,col:col+1});break;case'ArrowLeft':if(row>0)setFocusedCell({row:row-1,col:col});break;case'ArrowRight':if(row<8)setFocusedCell({row:row+1,col:col});break;default:break;}};useEffect(()=>{const handleKeyPress=event=>handleKeyDown(event);window.addEventListener('keydown',handleKeyPress);return()=>{window.removeEventListener('keydown',handleKeyPress);};});useEffect(()=>{const{row,col}=focusedCell;const targetCell=document.querySelector(`input[data-row=\"${row}\"][data-col=\"${col}\"]`);if(targetCell){targetCell.focus();// Ensure the cursor is always at the end of the input value\nconst valueLength=targetCell.value.length;setTimeout(()=>{targetCell.setSelectionRange(valueLength,valueLength);},0);// Use a timeout to ensure this runs after the focus event\n}},[focusedCell]);const handleCheckSolution=()=>{webSocketManager.send({type:'sendCheckSolution',puzzleId:puzzleId});};const handleCellChange=(row,col,value)=>{const newGrid=gridData.map((r,rowIndex)=>r.map((cell,colIndex)=>rowIndex===row&&colIndex===col?{...cell,value}:cell));setGridData(newGrid);setPuzzleSolved(false);setIncorrectCells(prev=>prev.filter(cell=>!(cell.row===col&&cell.col===row)));webSocketManager.send({type:'sendCellChange',puzzleId:puzzleId,row:col,col:row,value:value||0});};const handleClearBoard=()=>{// Create a new grid with only locked cells\nconst clearedGrid=gridData.map(row=>row.map(cell=>({...cell,value:cell.isEditable?'':cell.value})));// Update local state\nsetGridData(clearedGrid);setIncorrectCells([]);setPuzzleSolved(false);webSocketManager.send({type:'sendClearBoard',puzzleId:puzzleId});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"sudokuTitle\",children:puzzleTitle}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:`board-section ${puzzleSolved?'solved':''}`,children:/*#__PURE__*/_jsx(FinalGrid,{gridData:gridData,onCellChange:handleCellChange,incorrectCells:incorrectCells,playerPositions:playerPositions,setFocusedCell:setFocusedCell})}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-controls-section\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"clearBoardBtn\",onClick:handleClearBoard,children:\"Clear Board\"}),/*#__PURE__*/_jsx(\"button\",{className:\"checkSolutionBtn\",onClick:handleCheckSolution,children:\"Check Solution\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"right-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatLog\",ref:chatLogRef,children:chatMessages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{style:{color:msg.color||'#000'},children:[msg.user,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"message\",children:msg.message}),/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:new Date(msg.time).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit',hour12:true})})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"chatInput\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:chatInput,onChange:e=>setChatInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'){sendChatMessage();}},placeholder:\"Type to chat\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"players-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"clientInfo\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"You are:\"}),/*#__PURE__*/_jsxs(\"span\",{style:{color:clientInfo.color},children:[\" \",clientInfo.name]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"playerHeader\",children:\"Connected Players:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"playerList\",children:/*#__PURE__*/_jsx(\"ul\",{children:players.map((player,index)=>/*#__PURE__*/_jsx(\"li\",{style:{color:player.color},children:player.name},index))})})]})]})]})]});}export default SudokuGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","webSocketManager","jsx","_jsx","jsxs","_jsxs","Cell","_ref","value","isEditable","onChange","isIncorrect","row","col","playerPositions","setFocusedCell","clientId","handleChange","event","inputValue","target","slice","test","handleFocus","send","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","inputMode","ThreeGrid","_ref2","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","children","rowIndex","cell","colIndex","globalRow","globalCol","some","FinalGrid","_ref3","gridRow","gridCol","localStorage","getItem","generateUUID","setItem","replace","c","r","Math","random","v","toString","SudokuGame","navigate","puzzleId","urlPuzzleId","parseInt","puzzleTitle","setPuzzleTitle","setGridData","fill","players","setPlayers","setPlayerPositions","focusedCell","clientInfo","setClientInfo","name","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","puzzleSolved","setPuzzleSolved","chatLogRef","current","scrollTop","scrollHeight","wsUrl","console","log","connect","handleMessage","data","updatedGrid","board","title","client","messages","positions","alert","addListener","removeListener","sendChatMessage","trim","message","user","text","handleKeyDown","key","handleKeyPress","window","addEventListener","removeEventListener","targetCell","document","querySelector","focus","valueLength","setTimeout","setSelectionRange","handleCheckSolution","handleCellChange","newGrid","prev","handleClearBoard","clearedGrid","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","placeholder"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport '../index.css';\r\nimport webSocketManager from './WebSocketManager';\r\n\r\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, setFocusedCell, clientId }) {  const handleChange = (event) => {\r\n    const inputValue = event.target.value.slice(-1);\r\n    if (/^[1-9]?$/.test(inputValue)) {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // Send position to server and update focusedCell when cell is focused\r\n  const handleFocus = () => {\r\n    setFocusedCell({ row, col }); // Update the focusedCell state\r\n    webSocketManager.send({\r\n      type: 'sendPlayerPosition',\r\n      position: { row, col },\r\n      clientId: clientId\r\n    });\r\n  };\r\n\r\n  // Determine the CSS class based on editable state and incorrect state\r\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\r\n  if (isIncorrect) {\r\n    cellClass += ' incorrect-cell';\r\n  }\r\n\r\n  // Add player position highlights\r\n  const playerHighlights = playerPositions\r\n    .filter(player => player.position.row === row && player.position.col === col)\r\n    .map(player => {\r\n      return {\r\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n      };\r\n    })[0] || {};\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={isEditable ? handleChange : undefined}\r\n      onFocus={handleFocus}\r\n      readOnly={!isEditable}\r\n      maxLength=\"2\"\r\n      className={cellClass}\r\n      style={playerHighlights}\r\n      data-row={row}\r\n      data-col={col}\r\n      inputMode=\"numeric\" \r\n    />\r\n  );\r\n}\r\n\r\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, setFocusedCell }) {\r\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\r\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\r\n  );\r\n\r\n  return (\r\n    <div className=\"threeGrid\">\r\n      {transposedGridData.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"grid-row\">\r\n          {row.map((cell, colIndex) => {\r\n            const globalRow = rowOffset + colIndex;\r\n            const globalCol = colOffset + rowIndex;\r\n\r\n            const isIncorrect = incorrectCells.some(\r\n              cell => cell.col === globalRow && cell.row === globalCol\r\n            );\r\n\r\n            return (\r\n              <Cell\r\n                key={colIndex}\r\n                value={cell.value}\r\n                isEditable={cell.isEditable}\r\n                isIncorrect={isIncorrect}\r\n                row={globalRow}\r\n                col={globalCol}\r\n                onChange={(value) => onCellChange(globalRow, globalCol, value)}\r\n                playerPositions={playerPositions}\r\n                setFocusedCell={setFocusedCell}\r\n                clientId={clientId}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, setFocusedCell }) {\r\n  return (\r\n    <div className=\"finalGrid\">\r\n      {Array.from({ length: 3 }, (_, gridRow) => (\r\n        <div key={gridRow} className=\"grid-row\">\r\n          {Array.from({ length: 3 }, (_, gridCol) => (\r\n            <ThreeGrid\r\n              key={gridCol}\r\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\r\n                row.slice(gridCol * 3, gridCol * 3 + 3)\r\n              )}\r\n              onCellChange={onCellChange}\r\n              rowOffset={gridRow * 3}\r\n              colOffset={gridCol * 3}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              setFocusedCell={setFocusedCell}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem('clientId');\r\nif (!clientId) {\r\n  clientId = generateUUID();\r\n  localStorage.setItem('clientId', clientId);\r\n}\r\n\r\nfunction generateUUID() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n\r\nfunction SudokuGame() {\r\n  const navigate = useNavigate();\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\r\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\r\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({ value: '', isEditable: true })));\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [focusedCell, setFocusedCell] = useState({ row: 5, col: 5 });\r\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' });\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\r\n  const chatLogRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    const wsUrl = 'ws://localhost:8080/ws';\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    webSocketManager.connect(wsUrl);\r\n\r\n    const handleMessage = (data) => {\r\n      if (data.type === 'updatePuzzle') {\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n      } else if (data.type === 'updatePlayers') {\r\n        setPlayers(data.players);\r\n      } else if (data.type === 'updateIdentity') {\r\n        setClientInfo(data.client);\r\n      } else if (data.type === 'updateChat') {\r\n        setChatMessages(data.messages);\r\n      } else if (data.type === 'updatePuzzleSolved') {\r\n        setPuzzleSolved(true);\r\n      } else if (data.type === 'updateIncorrectCells') {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === 'updatePlayerPositions') {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === 'puzzleNotFound') {\r\n        alert('Puzzle not found. Returning to puzzle selection.');\r\n        navigate('/');\r\n      }\r\n    };\r\n  \r\n    webSocketManager.addListener(handleMessage);\r\n  \r\n    // Send initial messages\r\n    webSocketManager.send({ type: 'fetchIdentity', clientId });\r\n    webSocketManager.send({ type: 'fetchPuzzle', clientId, puzzleId });\r\n    webSocketManager.send({ type: 'fetchChat', puzzleId });\r\n  \r\n    return () => {\r\n      webSocketManager.removeListener(handleMessage);\r\n      webSocketManager.send({ \r\n        type: 'sendLeaveRoom', \r\n        clientId: clientId,\r\n        puzzleId: puzzleId\r\n      });\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const sendChatMessage = () => {\r\n    if (chatInput.trim() !== '') {\r\n      const message = {\r\n        user: clientInfo.name,\r\n        color: clientInfo.color,\r\n        text: chatInput,\r\n        puzzleId: puzzleId,\r\n      };\r\n\r\n      webSocketManager.send({ type: 'sendChat', message });\r\n      setChatInput('');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    const { row, col } = focusedCell;\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (col > 0) setFocusedCell({ row: row , col: col - 1});\r\n          break;\r\n        case 'ArrowDown':\r\n          if (col < 8) setFocusedCell({ row: row , col: col + 1});\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (row > 0) setFocusedCell({ row: row - 1, col: col });\r\n          break;\r\n        case 'ArrowRight':\r\n          if (row < 8) setFocusedCell({ row: row + 1, col: col });\r\n          break;\r\n          default:\r\n            break;\r\n        }\r\n    };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => handleKeyDown(event);\r\n  \r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const { row, col } = focusedCell;\r\n    const targetCell = document.querySelector(\r\n      `input[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n    );\r\n    if (targetCell) {\r\n      targetCell.focus();\r\n      // Ensure the cursor is always at the end of the input value\r\n      const valueLength = targetCell.value.length;\r\n      setTimeout(() => {\r\n        targetCell.setSelectionRange(valueLength, valueLength);\r\n      }, 0); // Use a timeout to ensure this runs after the focus event\r\n    }\r\n  }, [focusedCell]);\r\n  \r\n  const handleCheckSolution = () => {\r\n    webSocketManager.send({\r\n      type: 'sendCheckSolution',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? { ...cell, value }\r\n          : cell\r\n      )\r\n    );\r\n  \r\n    setGridData(newGrid);\r\n    setPuzzleSolved(false);\r\n\r\n    setIncorrectCells((prev) =>\r\n      prev.filter((cell) => !(cell.row === col && cell.col === row))\r\n    );\r\n  \r\n    webSocketManager.send({\r\n      type: 'sendCellChange',\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n      value: value || 0,\r\n    });\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map(row =>\r\n      row.map(cell => ({\r\n        ...cell,\r\n        value: cell.isEditable ? '' : cell.value\r\n      }))\r\n    );\r\n    \r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    setPuzzleSolved(false);\r\n    \r\n    webSocketManager.send({\r\n      type: 'sendClearBoard',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n  \r\n      <div className=\"app-container\">\r\n        <div className=\"left-section\">\r\n          <div className={`board-section ${puzzleSolved ? 'solved' : ''}`}>\r\n            <FinalGrid\r\n              gridData={gridData}\r\n              onCellChange={handleCellChange}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              setFocusedCell={setFocusedCell}\r\n            />\r\n          </div>\r\n  \r\n          <div className=\"board-controls-section\">\r\n            <button\r\n              className=\"clearBoardBtn\"\r\n              onClick={handleClearBoard}\r\n            >\r\n              Clear Board\r\n            </button>\r\n            <button\r\n              className=\"checkSolutionBtn\"\r\n              onClick={handleCheckSolution}\r\n            >\r\n              Check Solution\r\n            </button>\r\n          </div>\r\n        </div>\r\n  \r\n        {/* Right Section: Chat and Players */}\r\n        <div className=\"right-section\">\r\n          <div className=\"chatBox\">\r\n            <div className=\"chatLog\" ref={chatLogRef}>\r\n              {chatMessages.map((msg, index) => (\r\n                <div key={index}>\r\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\r\n                  <span className=\"message\">{msg.message}</span>\r\n                  <span className=\"time\">\r\n                    {new Date(msg.time).toLocaleTimeString([], {\r\n                      hour: '2-digit',\r\n                      minute: '2-digit',\r\n                      hour12: true,\r\n                    })}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n  \r\n            <div className=\"chatInput\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatInput}\r\n                onChange={(e) => setChatInput(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    sendChatMessage();\r\n                  }\r\n                }}\r\n                placeholder=\"Type to chat\"\r\n              />\r\n            </div>\r\n          </div>\r\n  \r\n          <div className=\"players-section\">\r\n            <div className=\"clientInfo\">\r\n              <span>You are:</span>\r\n              <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\r\n            </div>\r\n  \r\n            <h3 className=\"playerHeader\">Connected Players:</h3>\r\n  \r\n            <div className=\"playerList\">\r\n              <ul>\r\n                {players.map((player, index) => (\r\n                  <li key={index} style={{ color: player.color }}>\r\n                    {player.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,SAAS,CAAEC,WAAW,KAAQ,kBAAkB,CACzD,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,MAAO,cAAc,CACrB,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElD,QAAS,CAAAC,IAAIA,CAAAC,IAAA,CAAoG,IAAnG,CAAEC,KAAK,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,GAAG,CAAEC,GAAG,CAAEC,eAAe,CAAEC,cAAc,CAAEC,QAAS,CAAC,CAAAT,IAAA,CAAK,KAAM,CAAAU,YAAY,CAAIC,KAAK,EAAK,CAChJ,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAACZ,KAAK,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC,CAC/C,GAAI,UAAU,CAACC,IAAI,CAACH,UAAU,CAAC,CAAE,CAC/BT,QAAQ,CAACS,UAAU,CAAC,CACtB,CACF,CAAC,CAED;AACA,KAAM,CAAAI,WAAW,CAAGA,CAAA,GAAM,CACxBR,cAAc,CAAC,CAAEH,GAAG,CAAEC,GAAI,CAAC,CAAC,CAAE;AAC9BZ,gBAAgB,CAACuB,IAAI,CAAC,CACpBC,IAAI,CAAE,oBAAoB,CAC1BC,QAAQ,CAAE,CAAEd,GAAG,CAAEC,GAAI,CAAC,CACtBG,QAAQ,CAAEA,QACZ,CAAC,CAAC,CACJ,CAAC,CAED;AACA,GAAI,CAAAW,SAAS,CAAGlB,UAAU,CAAG,MAAM,CAAG,mBAAmB,CACzD,GAAIE,WAAW,CAAE,CACfgB,SAAS,EAAI,iBAAiB,CAChC,CAEA;AACA,KAAM,CAAAC,gBAAgB,CAAGd,eAAe,CACrCe,MAAM,CAACC,MAAM,EAAIA,MAAM,CAACJ,QAAQ,CAACd,GAAG,GAAKA,GAAG,EAAIkB,MAAM,CAACJ,QAAQ,CAACb,GAAG,GAAKA,GAAG,CAAC,CAC5EkB,GAAG,CAACD,MAAM,EAAI,CACb,MAAO,CACLE,SAAS,CAAE,mBAAmBF,MAAM,CAACG,KAAK,EAAE,CAC5CC,MAAM,CAAE,CAAC,CACTR,QAAQ,CAAE,UACZ,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,CAAC,EAAI,CAAC,CAAC,CAEb,mBACEvB,IAAA,UACEsB,IAAI,CAAC,MAAM,CACXjB,KAAK,CAAEA,KAAM,CACbE,QAAQ,CAAED,UAAU,CAAGQ,YAAY,CAAGkB,SAAU,CAChDC,OAAO,CAAEb,WAAY,CACrBc,QAAQ,CAAE,CAAC5B,UAAW,CACtB6B,SAAS,CAAC,GAAG,CACbC,SAAS,CAAEZ,SAAU,CACrBa,KAAK,CAAEZ,gBAAiB,CACxB,WAAUhB,GAAI,CACd,WAAUC,GAAI,CACd4B,SAAS,CAAC,SAAS,CACpB,CAAC,CAEN,CAEA,QAAS,CAAAC,SAASA,CAAAC,KAAA,CAAoG,IAAnG,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,SAAS,CAAEC,SAAS,CAAEC,cAAc,CAAElC,eAAe,CAAEC,cAAe,CAAC,CAAA4B,KAAA,CAClH,KAAM,CAAAM,kBAAkB,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEC,CAAC,GACxDJ,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEE,CAAC,GAAKX,QAAQ,CAACW,CAAC,CAAC,CAACD,CAAC,CAAC,CACpD,CAAC,CAED,mBACEnD,IAAA,QAAKoC,SAAS,CAAC,WAAW,CAAAiB,QAAA,CACvBP,kBAAkB,CAAClB,GAAG,CAAC,CAACnB,GAAG,CAAE6C,QAAQ,gBACpCtD,IAAA,QAAoBoC,SAAS,CAAC,UAAU,CAAAiB,QAAA,CACrC5C,GAAG,CAACmB,GAAG,CAAC,CAAC2B,IAAI,CAAEC,QAAQ,GAAK,CAC3B,KAAM,CAAAC,SAAS,CAAGd,SAAS,CAAGa,QAAQ,CACtC,KAAM,CAAAE,SAAS,CAAGd,SAAS,CAAGU,QAAQ,CAEtC,KAAM,CAAA9C,WAAW,CAAGqC,cAAc,CAACc,IAAI,CACrCJ,IAAI,EAAIA,IAAI,CAAC7C,GAAG,GAAK+C,SAAS,EAAIF,IAAI,CAAC9C,GAAG,GAAKiD,SACjD,CAAC,CAED,mBACE1D,IAAA,CAACG,IAAI,EAEHE,KAAK,CAAEkD,IAAI,CAAClD,KAAM,CAClBC,UAAU,CAAEiD,IAAI,CAACjD,UAAW,CAC5BE,WAAW,CAAEA,WAAY,CACzBC,GAAG,CAAEgD,SAAU,CACf/C,GAAG,CAAEgD,SAAU,CACfnD,QAAQ,CAAGF,KAAK,EAAKqC,YAAY,CAACe,SAAS,CAAEC,SAAS,CAAErD,KAAK,CAAE,CAC/DM,eAAe,CAAEA,eAAgB,CACjCC,cAAc,CAAEA,cAAe,CAC/BC,QAAQ,CAAEA,QAAS,EATd2C,QAUN,CAAC,CAEN,CAAC,CAAC,EAvBMF,QAwBL,CACN,CAAC,CACC,CAAC,CAEV,CAEA,QAAS,CAAAM,SAASA,CAAAC,KAAA,CAA8E,IAA7E,CAAEpB,QAAQ,CAAEC,YAAY,CAAEG,cAAc,CAAElC,eAAe,CAAEC,cAAe,CAAC,CAAAiD,KAAA,CAC5F,mBACE7D,IAAA,QAAKoC,SAAS,CAAC,WAAW,CAAAiB,QAAA,CACvBN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEY,OAAO,gBACpC9D,IAAA,QAAmBoC,SAAS,CAAC,UAAU,CAAAiB,QAAA,CACpCN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEa,OAAO,gBACpC/D,IAAA,CAACuC,SAAS,EAERE,QAAQ,CAAEA,QAAQ,CAACvB,KAAK,CAAC4C,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAG,CAAC,CAAG,CAAC,CAAC,CAAClC,GAAG,CAAEnB,GAAG,EAC7DA,GAAG,CAACS,KAAK,CAAC6C,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAG,CAAC,CAAG,CAAC,CACxC,CAAE,CACFrB,YAAY,CAAEA,YAAa,CAC3BC,SAAS,CAAEmB,OAAO,CAAG,CAAE,CACvBlB,SAAS,CAAEmB,OAAO,CAAG,CAAE,CACvBlB,cAAc,CAAEA,cAAe,CAC/BlC,eAAe,CAAEA,eAAgB,CACjCC,cAAc,CAAEA,cAAe,EAT1BmD,OAUN,CACF,CAAC,EAdMD,OAeL,CACN,CAAC,CACC,CAAC,CAEV,CAEA;AACA,GAAI,CAAAjD,QAAQ,CAAGmD,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC/C,GAAI,CAACpD,QAAQ,CAAE,CACbA,QAAQ,CAAGqD,YAAY,CAAC,CAAC,CACzBF,YAAY,CAACG,OAAO,CAAC,UAAU,CAAEtD,QAAQ,CAAC,CAC5C,CAEA,QAAS,CAAAqD,YAAYA,CAAA,CAAG,CACtB,MAAO,sCAAsC,CAACE,OAAO,CAAC,OAAO,CAAE,SAASC,CAAC,CAAE,CACzE,GAAI,CAAAC,CAAC,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAAG,CAAC,CAAEC,CAAC,CAAGJ,CAAC,GAAK,GAAG,CAAGC,CAAC,CAAKA,CAAC,CAAG,GAAG,CAAI,GAAI,CACrE,MAAO,CAAAG,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CACvB,CAAC,CAAC,CACJ,CAGA,QAAS,CAAAC,UAAUA,CAAA,CAAG,CACpB,KAAM,CAAAC,QAAQ,CAAGhF,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEiF,QAAQ,CAAEC,WAAY,CAAC,CAAGnF,SAAS,CAAC,CAAC,CAC7C,KAAM,CAACkF,QAAQ,CAAC,CAAGrF,QAAQ,CAACuF,QAAQ,CAACD,WAAW,CAAC,EAAI,IAAI,CAAC,CAC1D,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGzF,QAAQ,CAAC,mBAAmB,CAAC,CACnE,KAAM,CAACiD,QAAQ,CAAEyC,WAAW,CAAC,CAAG1F,QAAQ,CAACuD,KAAK,CAAC,CAAC,CAAC,CAACoC,IAAI,CAACpC,KAAK,CAAC,CAAC,CAAC,CAACoC,IAAI,CAAC,CAAE9E,KAAK,CAAE,EAAE,CAAEC,UAAU,CAAE,IAAK,CAAC,CAAC,CAAC,CAAC,CACvG,KAAM,CAAC8E,OAAO,CAAEC,UAAU,CAAC,CAAG7F,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACmB,eAAe,CAAE2E,kBAAkB,CAAC,CAAG9F,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAAC+F,WAAW,CAAE3E,cAAc,CAAC,CAAGpB,QAAQ,CAAC,CAAEiB,GAAG,CAAE,CAAC,CAAEC,GAAG,CAAE,CAAE,CAAC,CAAC,CAClE,KAAM,CAAC8E,UAAU,CAAEC,aAAa,CAAC,CAAGjG,QAAQ,CAAC,CAAEkG,IAAI,CAAE,EAAE,CAAE5D,KAAK,CAAE,EAAG,CAAC,CAAC,CACrE,KAAM,CAAC6D,SAAS,CAAEC,YAAY,CAAC,CAAGpG,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACqG,YAAY,CAAEC,eAAe,CAAC,CAAGtG,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACqD,cAAc,CAAEkD,iBAAiB,CAAC,CAAGvG,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACwG,YAAY,CAAEC,eAAe,CAAC,CAAGzG,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAAA0G,UAAU,CAAGxG,MAAM,CAAC,IAAI,CAAC,CAE/BD,SAAS,CAAC,IAAM,CACd;AACA,GAAIyG,UAAU,CAACC,OAAO,CAAE,CACtBD,UAAU,CAACC,OAAO,CAACC,SAAS,CAAGF,UAAU,CAACC,OAAO,CAACE,YAAY,CAChE,CACF,CAAC,CAAE,CAACR,YAAY,CAAC,CAAC,CAElBpG,SAAS,CAAC,IAAM,CACd,KAAM,CAAA6G,KAAK,CAAG,wBAAwB,CACtCC,OAAO,CAACC,GAAG,CAAC,8BAA8BF,KAAK,EAAE,CAAC,CAClDxG,gBAAgB,CAAC2G,OAAO,CAACH,KAAK,CAAC,CAE/B,KAAM,CAAAI,aAAa,CAAIC,IAAI,EAAK,CAC9B,GAAIA,IAAI,CAACrF,IAAI,GAAK,cAAc,CAAE,CAChC,KAAM,CAAAsF,WAAW,CAAG7D,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEI,QAAQ,GACxDP,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEM,QAAQ,IAAM,CAC1CnD,KAAK,CAAEsG,IAAI,CAACE,KAAK,CAACrD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACjD,KAAK,CAAE;AAC7CC,UAAU,CAAEqG,IAAI,CAACE,KAAK,CAACrD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAAChD,UAAY;AACzD,CAAC,CAAC,CACJ,CAAC,CACD4E,WAAW,CAAC0B,WAAW,CAAC,CACxB3B,cAAc,CAAC0B,IAAI,CAACG,KAAK,CAAC,CAC5B,CAAC,IAAM,IAAIH,IAAI,CAACrF,IAAI,GAAK,eAAe,CAAE,CACxC+D,UAAU,CAACsB,IAAI,CAACvB,OAAO,CAAC,CAC1B,CAAC,IAAM,IAAIuB,IAAI,CAACrF,IAAI,GAAK,gBAAgB,CAAE,CACzCmE,aAAa,CAACkB,IAAI,CAACI,MAAM,CAAC,CAC5B,CAAC,IAAM,IAAIJ,IAAI,CAACrF,IAAI,GAAK,YAAY,CAAE,CACrCwE,eAAe,CAACa,IAAI,CAACK,QAAQ,CAAC,CAChC,CAAC,IAAM,IAAIL,IAAI,CAACrF,IAAI,GAAK,oBAAoB,CAAE,CAC7C2E,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,IAAIU,IAAI,CAACrF,IAAI,GAAK,sBAAsB,CAAE,CAC/CyE,iBAAiB,CAACY,IAAI,CAAC9D,cAAc,CAAC,CACxC,CAAC,IAAM,IAAI8D,IAAI,CAACrF,IAAI,GAAK,uBAAuB,CAAE,CAChDgE,kBAAkB,CAACqB,IAAI,CAACM,SAAS,CAAC,CACpC,CAAC,IAAM,IAAIN,IAAI,CAACrF,IAAI,GAAK,gBAAgB,CAAE,CACzC4F,KAAK,CAAC,kDAAkD,CAAC,CACzDtC,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CAAC,CAED9E,gBAAgB,CAACqH,WAAW,CAACT,aAAa,CAAC,CAE3C;AACA5G,gBAAgB,CAACuB,IAAI,CAAC,CAAEC,IAAI,CAAE,eAAe,CAAET,QAAS,CAAC,CAAC,CAC1Df,gBAAgB,CAACuB,IAAI,CAAC,CAAEC,IAAI,CAAE,aAAa,CAAET,QAAQ,CAAEgE,QAAS,CAAC,CAAC,CAClE/E,gBAAgB,CAACuB,IAAI,CAAC,CAAEC,IAAI,CAAE,WAAW,CAAEuD,QAAS,CAAC,CAAC,CAEtD,MAAO,IAAM,CACX/E,gBAAgB,CAACsH,cAAc,CAACV,aAAa,CAAC,CAC9C5G,gBAAgB,CAACuB,IAAI,CAAC,CACpBC,IAAI,CAAE,eAAe,CACrBT,QAAQ,CAAEA,QAAQ,CAClBgE,QAAQ,CAAEA,QACZ,CAAC,CAAC,CACJ,CAAC,CACH,CAAC,CAAE,CAACA,QAAQ,CAAED,QAAQ,CAAC,CAAC,CAExB,KAAM,CAAAyC,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI1B,SAAS,CAAC2B,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAC3B,KAAM,CAAAC,OAAO,CAAG,CACdC,IAAI,CAAEhC,UAAU,CAACE,IAAI,CACrB5D,KAAK,CAAE0D,UAAU,CAAC1D,KAAK,CACvB2F,IAAI,CAAE9B,SAAS,CACfd,QAAQ,CAAEA,QACZ,CAAC,CAED/E,gBAAgB,CAACuB,IAAI,CAAC,CAAEC,IAAI,CAAE,UAAU,CAAEiG,OAAQ,CAAC,CAAC,CACpD3B,YAAY,CAAC,EAAE,CAAC,CAClB,CACF,CAAC,CAED,KAAM,CAAA8B,aAAa,CAAI3G,KAAK,EAAK,CAC/B,KAAM,CAAEN,GAAG,CAAEC,GAAI,CAAC,CAAG6E,WAAW,CAC9B,OAAQxE,KAAK,CAAC4G,GAAG,EACf,IAAK,SAAS,CACZ,GAAIjH,GAAG,CAAG,CAAC,CAAEE,cAAc,CAAC,CAAEH,GAAG,CAAEA,GAAG,CAAGC,GAAG,CAAEA,GAAG,CAAG,CAAC,CAAC,CAAC,CACvD,MACF,IAAK,WAAW,CACd,GAAIA,GAAG,CAAG,CAAC,CAAEE,cAAc,CAAC,CAAEH,GAAG,CAAEA,GAAG,CAAGC,GAAG,CAAEA,GAAG,CAAG,CAAC,CAAC,CAAC,CACvD,MACF,IAAK,WAAW,CACd,GAAID,GAAG,CAAG,CAAC,CAAEG,cAAc,CAAC,CAAEH,GAAG,CAAEA,GAAG,CAAG,CAAC,CAAEC,GAAG,CAAEA,GAAI,CAAC,CAAC,CACvD,MACF,IAAK,YAAY,CACf,GAAID,GAAG,CAAG,CAAC,CAAEG,cAAc,CAAC,CAAEH,GAAG,CAAEA,GAAG,CAAG,CAAC,CAAEC,GAAG,CAAEA,GAAI,CAAC,CAAC,CACvD,MACA,QACE,MACJ,CACJ,CAAC,CAEHjB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmI,cAAc,CAAI7G,KAAK,EAAK2G,aAAa,CAAC3G,KAAK,CAAC,CAEtD8G,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAEF,cAAc,CAAC,CAClD,MAAO,IAAM,CACXC,MAAM,CAACE,mBAAmB,CAAC,SAAS,CAAEH,cAAc,CAAC,CACvD,CAAC,CACH,CAAC,CAAC,CAEFnI,SAAS,CAAC,IAAM,CACd,KAAM,CAAEgB,GAAG,CAAEC,GAAI,CAAC,CAAG6E,WAAW,CAChC,KAAM,CAAAyC,UAAU,CAAGC,QAAQ,CAACC,aAAa,CACvC,mBAAmBzH,GAAG,gBAAgBC,GAAG,IAC3C,CAAC,CACD,GAAIsH,UAAU,CAAE,CACdA,UAAU,CAACG,KAAK,CAAC,CAAC,CAClB;AACA,KAAM,CAAAC,WAAW,CAAGJ,UAAU,CAAC3H,KAAK,CAAC4C,MAAM,CAC3CoF,UAAU,CAAC,IAAM,CACfL,UAAU,CAACM,iBAAiB,CAACF,WAAW,CAAEA,WAAW,CAAC,CACxD,CAAC,CAAE,CAAC,CAAC,CAAE;AACT,CACF,CAAC,CAAE,CAAC7C,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAAgD,mBAAmB,CAAGA,CAAA,GAAM,CAChCzI,gBAAgB,CAACuB,IAAI,CAAC,CACpBC,IAAI,CAAE,mBAAmB,CACzBuD,QAAQ,CAAEA,QACZ,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAA2D,gBAAgB,CAAGA,CAAC/H,GAAG,CAAEC,GAAG,CAAEL,KAAK,GAAK,CAC5C,KAAM,CAAAoI,OAAO,CAAGhG,QAAQ,CAACb,GAAG,CAAC,CAAC0C,CAAC,CAAEhB,QAAQ,GACvCgB,CAAC,CAAC1C,GAAG,CAAC,CAAC2B,IAAI,CAAEC,QAAQ,GACnBF,QAAQ,GAAK7C,GAAG,EAAI+C,QAAQ,GAAK9C,GAAG,CAChC,CAAE,GAAG6C,IAAI,CAAElD,KAAM,CAAC,CAClBkD,IACN,CACF,CAAC,CAED2B,WAAW,CAACuD,OAAO,CAAC,CACpBxC,eAAe,CAAC,KAAK,CAAC,CAEtBF,iBAAiB,CAAE2C,IAAI,EACrBA,IAAI,CAAChH,MAAM,CAAE6B,IAAI,EAAK,EAAEA,IAAI,CAAC9C,GAAG,GAAKC,GAAG,EAAI6C,IAAI,CAAC7C,GAAG,GAAKD,GAAG,CAAC,CAC/D,CAAC,CAEDX,gBAAgB,CAACuB,IAAI,CAAC,CACpBC,IAAI,CAAE,gBAAgB,CACtBuD,QAAQ,CAAEA,QAAQ,CAClBpE,GAAG,CAAEC,GAAG,CACRA,GAAG,CAAED,GAAG,CACRJ,KAAK,CAAEA,KAAK,EAAI,CAClB,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAsI,gBAAgB,CAAGA,CAAA,GAAM,CAC7B;AACA,KAAM,CAAAC,WAAW,CAAGnG,QAAQ,CAACb,GAAG,CAACnB,GAAG,EAClCA,GAAG,CAACmB,GAAG,CAAC2B,IAAI,GAAK,CACf,GAAGA,IAAI,CACPlD,KAAK,CAAEkD,IAAI,CAACjD,UAAU,CAAG,EAAE,CAAGiD,IAAI,CAAClD,KACrC,CAAC,CAAC,CACJ,CAAC,CAED;AACA6E,WAAW,CAAC0D,WAAW,CAAC,CACxB7C,iBAAiB,CAAC,EAAE,CAAC,CACrBE,eAAe,CAAC,KAAK,CAAC,CAEtBnG,gBAAgB,CAACuB,IAAI,CAAC,CACpBC,IAAI,CAAE,gBAAgB,CACtBuD,QAAQ,CAAEA,QACZ,CAAC,CAAC,CACJ,CAAC,CAED,mBACE3E,KAAA,QAAAmD,QAAA,eACErD,IAAA,CAACH,MAAM,GAAE,CAAC,cACVG,IAAA,QAAKoC,SAAS,CAAC,aAAa,CAAAiB,QAAA,CAAE2B,WAAW,CAAM,CAAC,cAEhD9E,KAAA,QAAKkC,SAAS,CAAC,eAAe,CAAAiB,QAAA,eAC5BnD,KAAA,QAAKkC,SAAS,CAAC,cAAc,CAAAiB,QAAA,eAC3BrD,IAAA,QAAKoC,SAAS,CAAE,iBAAiB4D,YAAY,CAAG,QAAQ,CAAG,EAAE,EAAG,CAAA3C,QAAA,cAC9DrD,IAAA,CAAC4D,SAAS,EACRnB,QAAQ,CAAEA,QAAS,CACnBC,YAAY,CAAE8F,gBAAiB,CAC/B3F,cAAc,CAAEA,cAAe,CAC/BlC,eAAe,CAAEA,eAAgB,CACjCC,cAAc,CAAEA,cAAe,CAChC,CAAC,CACC,CAAC,cAENV,KAAA,QAAKkC,SAAS,CAAC,wBAAwB,CAAAiB,QAAA,eACrCrD,IAAA,WACEoC,SAAS,CAAC,eAAe,CACzByG,OAAO,CAAEF,gBAAiB,CAAAtF,QAAA,CAC3B,aAED,CAAQ,CAAC,cACTrD,IAAA,WACEoC,SAAS,CAAC,kBAAkB,CAC5ByG,OAAO,CAAEN,mBAAoB,CAAAlF,QAAA,CAC9B,gBAED,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,cAGNnD,KAAA,QAAKkC,SAAS,CAAC,eAAe,CAAAiB,QAAA,eAC5BnD,KAAA,QAAKkC,SAAS,CAAC,SAAS,CAAAiB,QAAA,eACtBrD,IAAA,QAAKoC,SAAS,CAAC,SAAS,CAAC0G,GAAG,CAAE5C,UAAW,CAAA7C,QAAA,CACtCwC,YAAY,CAACjE,GAAG,CAAC,CAACmH,GAAG,CAAEC,KAAK,gBAC3B9I,KAAA,QAAAmD,QAAA,eACEnD,KAAA,WAAQmC,KAAK,CAAE,CAAEP,KAAK,CAAEiH,GAAG,CAACjH,KAAK,EAAI,MAAO,CAAE,CAAAuB,QAAA,EAAE0F,GAAG,CAACvB,IAAI,CAAC,GAAC,EAAQ,CAAC,cACnExH,IAAA,SAAMoC,SAAS,CAAC,SAAS,CAAAiB,QAAA,CAAE0F,GAAG,CAACxB,OAAO,CAAO,CAAC,cAC9CvH,IAAA,SAAMoC,SAAS,CAAC,MAAM,CAAAiB,QAAA,CACnB,GAAI,CAAA4F,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC,CAACC,kBAAkB,CAAC,EAAE,CAAE,CACzCC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,IACV,CAAC,CAAC,CACE,CAAC,GATCN,KAUL,CACN,CAAC,CACC,CAAC,cAENhJ,IAAA,QAAKoC,SAAS,CAAC,WAAW,CAAAiB,QAAA,cACxBrD,IAAA,UACEsB,IAAI,CAAC,MAAM,CACXjB,KAAK,CAAEsF,SAAU,CACjBpF,QAAQ,CAAGgJ,CAAC,EAAK3D,YAAY,CAAC2D,CAAC,CAACtI,MAAM,CAACZ,KAAK,CAAE,CAC9CmJ,SAAS,CAAGD,CAAC,EAAK,CAChB,GAAIA,CAAC,CAAC5B,GAAG,GAAK,OAAO,CAAE,CACrBN,eAAe,CAAC,CAAC,CACnB,CACF,CAAE,CACFoC,WAAW,CAAC,cAAc,CAC3B,CAAC,CACC,CAAC,EACH,CAAC,cAENvJ,KAAA,QAAKkC,SAAS,CAAC,iBAAiB,CAAAiB,QAAA,eAC9BnD,KAAA,QAAKkC,SAAS,CAAC,YAAY,CAAAiB,QAAA,eACzBrD,IAAA,SAAAqD,QAAA,CAAM,UAAQ,CAAM,CAAC,cACrBnD,KAAA,SAAMmC,KAAK,CAAE,CAAEP,KAAK,CAAE0D,UAAU,CAAC1D,KAAM,CAAE,CAAAuB,QAAA,EAAC,GAAC,CAACmC,UAAU,CAACE,IAAI,EAAO,CAAC,EAChE,CAAC,cAEN1F,IAAA,OAAIoC,SAAS,CAAC,cAAc,CAAAiB,QAAA,CAAC,oBAAkB,CAAI,CAAC,cAEpDrD,IAAA,QAAKoC,SAAS,CAAC,YAAY,CAAAiB,QAAA,cACzBrD,IAAA,OAAAqD,QAAA,CACG+B,OAAO,CAACxD,GAAG,CAAC,CAACD,MAAM,CAAEqH,KAAK,gBACzBhJ,IAAA,OAAgBqC,KAAK,CAAE,CAAEP,KAAK,CAAEH,MAAM,CAACG,KAAM,CAAE,CAAAuB,QAAA,CAC5C1B,MAAM,CAAC+D,IAAI,EADLsD,KAEL,CACL,CAAC,CACA,CAAC,CACF,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAArE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}