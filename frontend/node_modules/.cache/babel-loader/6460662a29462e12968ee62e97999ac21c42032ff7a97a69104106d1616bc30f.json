{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport '../index.css';\nimport webSocketManager from './WebSocketManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect,\n  row,\n  col,\n  playerPositions,\n  wsRef,\n  setFocusedCell\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server and update focusedCell when cell is focused\n  const handleFocus = () => {\n    setFocusedCell({\n      row,\n      col\n    }); // Update the focusedCell state\n    webSocketManager.send({\n      type: 'sendPlayerPosition',\n      position: {\n        row,\n        col\n      },\n      clientId: clientId\n    });\n  };\n\n  // Determine the CSS class based on editable state and incorrect state\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions.filter(player => player.position.row === row && player.position.col === col).map(player => {\n    return {\n      boxShadow: `inset 0 0 0 3px ${player.color}`,\n      zIndex: 1,\n      position: 'relative'\n    };\n  })[0] || {};\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined,\n    onFocus: handleFocus,\n    readOnly: !isEditable,\n    maxLength: \"2\",\n    className: cellClass,\n    style: playerHighlights,\n    \"data-row\": row,\n    \"data-col\": col\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_c = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset,\n  incorrectCells,\n  playerPositions,\n  wsRef,\n  setFocusedCell\n}) {\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        const globalRow = rowOffset + colIndex;\n        const globalCol = colOffset + rowIndex;\n        const isIncorrect = incorrectCells.some(cell => cell.col === globalRow && cell.row === globalCol);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.value,\n          isEditable: cell.isEditable,\n          isIncorrect: isIncorrect,\n          row: globalRow,\n          col: globalCol,\n          onChange: value => onCellChange(globalRow, globalCol, value),\n          playerPositions: playerPositions,\n          wsRef: wsRef,\n          setFocusedCell: setFocusedCell // Pass setFocusedCell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange,\n  incorrectCells,\n  playerPositions,\n  wsRef,\n  setFocusedCell\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3,\n        incorrectCells: incorrectCells,\n        playerPositions: playerPositions,\n        wsRef: wsRef,\n        setFocusedCell: setFocusedCell // Pass setFocusedCell\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n// Check if a client ID exists in localStorage\n_c3 = FinalGrid;\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction SudokuGame() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    puzzleId: urlPuzzleId\n  } = useParams();\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({\n    value: '',\n    isEditable: true\n  })));\n  const [players, setPlayers] = useState([]);\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const [focusedCell, setFocusedCell] = useState({\n    row: 5,\n    col: 5\n  });\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  });\n  const [chatInput, setChatInput] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [incorrectCells, setIncorrectCells] = useState([]);\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\n  const [connectionError, setConnectionError] = useState(false);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    const wsUrl = 'ws://localhost:8080/ws';\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\n    webSocketManager.connect(wsUrl);\n    const handleMessage = data => {\n      if (data.type === 'updatePuzzle') {\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n      } else if (data.type === 'updatePlayers') {\n        setPlayers(data.players);\n      } else if (data.type === 'updateIdentity') {\n        setClientInfo(data.client);\n      } else if (data.type === 'updateChat') {\n        setChatMessages(data.messages);\n      } else if (data.type === 'updatePuzzleSolved') {\n        setPuzzleSolved(true);\n      } else if (data.type === 'updateIncorrectCells') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'updatePlayerPositions') {\n        setPlayerPositions(data.positions);\n      } else if (data.type === 'puzzleNotFound') {\n        alert('Puzzle not found. Returning to puzzle selection.');\n        navigate('/');\n      }\n    };\n    webSocketManager.addListener(handleMessage);\n\n    // Send initial messages\n    webSocketManager.send({\n      type: 'fetchIdentity',\n      clientId\n    });\n    webSocketManager.send({\n      type: 'fetchPuzzle',\n      clientId,\n      puzzleId\n    });\n    webSocketManager.send({\n      type: 'fetchChat',\n      puzzleId\n    });\n    return () => {\n      webSocketManager.removeListener(handleMessage);\n    };\n  }, [puzzleId, navigate]);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId\n      };\n      webSocketManager.send({\n        type: 'sendChat',\n        message\n      });\n      setChatInput('');\n    }\n  };\n  const handleKeyDown = event => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    switch (event.key) {\n      case 'ArrowUp':\n        if (col > 0) setFocusedCell({\n          row: row,\n          col: col - 1\n        });\n        break;\n      case 'ArrowDown':\n        if (col < 8) setFocusedCell({\n          row: row,\n          col: col + 1\n        });\n        break;\n      case 'ArrowLeft':\n        if (row > 0) setFocusedCell({\n          row: row - 1,\n          col: col\n        });\n        break;\n      case 'ArrowRight':\n        if (row < 8) setFocusedCell({\n          row: row + 1,\n          col: col\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    const handleKeyPress = event => handleKeyDown(event);\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  });\n  useEffect(() => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    const targetCell = document.querySelector(`input[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    if (targetCell) {\n      targetCell.focus();\n      // Ensure the cursor is always at the end of the input value\n      const valueLength = targetCell.value.length;\n      setTimeout(() => {\n        targetCell.setSelectionRange(valueLength, valueLength);\n      }, 0); // Use a timeout to ensure this runs after the focus event\n    }\n  }, [focusedCell]);\n  const handleCheckSolution = () => {\n    webSocketManager.send({\n      type: 'sendCheckSolution',\n      puzzleId: puzzleId\n    });\n  };\n  const handleCellChange = (row, col, value) => {\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n    setGridData(newGrid);\n    setPuzzleSolved(false);\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n    webSocketManager.send({\n      type: 'sendCellChange',\n      puzzleId: puzzleId,\n      row: col,\n      col: row,\n      value: value || 0\n    });\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    webSocketManager.send({\n      type: 'sendClearBoard',\n      puzzleId: puzzleId\n    });\n  };\n  const handleReturnToMenu = () => {\n    navigate('/');\n  };\n  if (connectionError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connection Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Unable to connect to the game server. Please try again later.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"menu-button\",\n          onClick: handleReturnToMenu,\n          children: \"Return to Puzzle Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudokuTitle\",\n      children: puzzleTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `board-section ${puzzleSolved ? 'solved' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(FinalGrid, {\n            gridData: gridData,\n            onCellChange: handleCellChange,\n            incorrectCells: incorrectCells,\n            playerPositions: playerPositions,\n            wsRef: webSocketManager // Use webSocketManager\n            ,\n            setFocusedCell: setFocusedCell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-controls-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clearBoardBtn\",\n            onClick: handleClearBoard,\n            children: \"Clear Board\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"checkSolutionBtn\",\n            onClick: handleCheckSolution,\n            children: \"Check Solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatLog\",\n            ref: chatLogRef,\n            children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                style: {\n                  color: msg.color || '#000'\n                },\n                children: [msg.user, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message\",\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time\",\n                children: new Date(msg.time).toLocaleTimeString([], {\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  hour12: true\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatInput\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: chatInput,\n              onChange: e => setChatInput(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              },\n              placeholder: \"Type to chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clientInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"You are:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: clientInfo.color\n              },\n              children: [\" \", clientInfo.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"playerHeader\",\n            children: \"Connected Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerList\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                style: {\n                  color: player.color\n                },\n                children: player.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuGame, \"FI4g569oNwM+TzKBQo+P1APk7YA=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c4 = SudokuGame;\nexport default SudokuGame;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"ThreeGrid\");\n$RefreshReg$(_c3, \"FinalGrid\");\n$RefreshReg$(_c4, \"SudokuGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","webSocketManager","jsxDEV","_jsxDEV","Cell","value","isEditable","onChange","isIncorrect","row","col","playerPositions","wsRef","setFocusedCell","handleChange","event","inputValue","target","slice","test","handleFocus","send","type","position","clientId","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","children","rowIndex","cell","colIndex","globalRow","globalCol","some","_c2","FinalGrid","gridRow","gridCol","_c3","localStorage","getItem","crypto","randomUUID","setItem","SudokuGame","_s","navigate","puzzleId","urlPuzzleId","parseInt","puzzleTitle","setPuzzleTitle","setGridData","fill","players","setPlayers","setPlayerPositions","focusedCell","clientInfo","setClientInfo","name","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","puzzleSolved","setPuzzleSolved","connectionError","setConnectionError","chatLogRef","current","scrollTop","scrollHeight","wsUrl","console","log","connect","handleMessage","data","updatedGrid","board","title","client","messages","positions","alert","addListener","removeListener","sendChatMessage","trim","message","user","text","handleKeyDown","key","handleKeyPress","window","addEventListener","removeEventListener","targetCell","document","querySelector","focus","valueLength","setTimeout","setSelectionRange","handleCheckSolution","handleCellChange","newGrid","r","prev","handleClearBoard","clearedGrid","handleReturnToMenu","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","placeholder","_c4","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport '../index.css';\r\nimport webSocketManager from './WebSocketManager';\r\n\r\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, wsRef, setFocusedCell }) {\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value.slice(-1);\r\n    if (/^[1-9]?$/.test(inputValue)) {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // Send position to server and update focusedCell when cell is focused\r\n  const handleFocus = () => {\r\n    setFocusedCell({ row, col }); // Update the focusedCell state\r\n    webSocketManager.send({\r\n      type: 'sendPlayerPosition',\r\n      position: { row, col },\r\n      clientId: clientId,\r\n    });\r\n  };\r\n\r\n  // Determine the CSS class based on editable state and incorrect state\r\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\r\n  if (isIncorrect) {\r\n    cellClass += ' incorrect-cell';\r\n  }\r\n\r\n  // Add player position highlights\r\n  const playerHighlights = playerPositions\r\n    .filter(player => player.position.row === row && player.position.col === col)\r\n    .map(player => {\r\n      return {\r\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n      };\r\n    })[0] || {};\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={isEditable ? handleChange : undefined}\r\n      onFocus={handleFocus}\r\n      readOnly={!isEditable}\r\n      maxLength=\"2\"\r\n      className={cellClass}\r\n      style={playerHighlights}\r\n      data-row={row}\r\n      data-col={col}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, wsRef, setFocusedCell }) {\r\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\r\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\r\n  );\r\n\r\n  return (\r\n    <div className=\"threeGrid\">\r\n      {transposedGridData.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"grid-row\">\r\n          {row.map((cell, colIndex) => {\r\n            const globalRow = rowOffset + colIndex;\r\n            const globalCol = colOffset + rowIndex;\r\n\r\n            const isIncorrect = incorrectCells.some(\r\n              cell => cell.col === globalRow && cell.row === globalCol\r\n            );\r\n\r\n            return (\r\n              <Cell\r\n                key={colIndex}\r\n                value={cell.value}\r\n                isEditable={cell.isEditable}\r\n                isIncorrect={isIncorrect}\r\n                row={globalRow}\r\n                col={globalCol}\r\n                onChange={(value) => onCellChange(globalRow, globalCol, value)}\r\n                playerPositions={playerPositions}\r\n                wsRef={wsRef}\r\n                setFocusedCell={setFocusedCell} // Pass setFocusedCell\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, wsRef, setFocusedCell }) {\r\n  return (\r\n    <div className=\"finalGrid\">\r\n      {Array.from({ length: 3 }, (_, gridRow) => (\r\n        <div key={gridRow} className=\"grid-row\">\r\n          {Array.from({ length: 3 }, (_, gridCol) => (\r\n            <ThreeGrid\r\n              key={gridCol}\r\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\r\n                row.slice(gridCol * 3, gridCol * 3 + 3)\r\n              )}\r\n              onCellChange={onCellChange}\r\n              rowOffset={gridRow * 3}\r\n              colOffset={gridCol * 3}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              wsRef={wsRef}\r\n              setFocusedCell={setFocusedCell} // Pass setFocusedCell\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem('clientId');\r\nif (!clientId) {\r\n  clientId = crypto.randomUUID();\r\n  localStorage.setItem('clientId', clientId);\r\n}\r\n\r\nfunction SudokuGame() {\r\n  const navigate = useNavigate();\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\r\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\r\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({ value: '', isEditable: true })));\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [focusedCell, setFocusedCell] = useState({ row: 5, col: 5 });\r\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' });\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\r\n  const [connectionError, setConnectionError] = useState(false);\r\n  const chatLogRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    const wsUrl = 'ws://localhost:8080/ws';\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    webSocketManager.connect(wsUrl);\r\n  \r\n    const handleMessage = (data) => {\r\n      if (data.type === 'updatePuzzle') {\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n      } else if (data.type === 'updatePlayers') {\r\n        setPlayers(data.players);\r\n      } else if (data.type === 'updateIdentity') {\r\n        setClientInfo(data.client);\r\n      } else if (data.type === 'updateChat') {\r\n        setChatMessages(data.messages);\r\n      } else if (data.type === 'updatePuzzleSolved') {\r\n        setPuzzleSolved(true);\r\n      } else if (data.type === 'updateIncorrectCells') {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === 'updatePlayerPositions') {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === 'puzzleNotFound') {\r\n        alert('Puzzle not found. Returning to puzzle selection.');\r\n        navigate('/');\r\n      }\r\n    };\r\n  \r\n    webSocketManager.addListener(handleMessage);\r\n  \r\n    // Send initial messages\r\n    webSocketManager.send({ type: 'fetchIdentity', clientId });\r\n    webSocketManager.send({ type: 'fetchPuzzle', clientId, puzzleId });\r\n    webSocketManager.send({ type: 'fetchChat', puzzleId });\r\n  \r\n    return () => {\r\n      webSocketManager.removeListener(handleMessage);\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const sendChatMessage = () => {\r\n    if (chatInput.trim() !== '') {\r\n      const message = {\r\n        user: clientInfo.name,\r\n        color: clientInfo.color,\r\n        text: chatInput,\r\n        puzzleId: puzzleId,\r\n      };\r\n\r\n      webSocketManager.send({ type: 'sendChat', message });\r\n      setChatInput('');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    const { row, col } = focusedCell;\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (col > 0) setFocusedCell({ row: row , col: col - 1});\r\n          break;\r\n        case 'ArrowDown':\r\n          if (col < 8) setFocusedCell({ row: row , col: col + 1});\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (row > 0) setFocusedCell({ row: row - 1, col: col });\r\n          break;\r\n        case 'ArrowRight':\r\n          if (row < 8) setFocusedCell({ row: row + 1, col: col });\r\n          break;\r\n          default:\r\n            break;\r\n        }\r\n    };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => handleKeyDown(event);\r\n  \r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const { row, col } = focusedCell;\r\n    const targetCell = document.querySelector(\r\n      `input[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n    );\r\n    if (targetCell) {\r\n      targetCell.focus();\r\n      // Ensure the cursor is always at the end of the input value\r\n      const valueLength = targetCell.value.length;\r\n      setTimeout(() => {\r\n        targetCell.setSelectionRange(valueLength, valueLength);\r\n      }, 0); // Use a timeout to ensure this runs after the focus event\r\n    }\r\n  }, [focusedCell]);\r\n  \r\n  const handleCheckSolution = () => {\r\n    webSocketManager.send({\r\n      type: 'sendCheckSolution',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? { ...cell, value }\r\n          : cell\r\n      )\r\n    );\r\n  \r\n    setGridData(newGrid);\r\n    setPuzzleSolved(false);\r\n\r\n    setIncorrectCells((prev) =>\r\n      prev.filter((cell) => !(cell.row === row && cell.col === col))\r\n    );\r\n  \r\n    webSocketManager.send({\r\n      type: 'sendCellChange',\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n      value: value || 0,\r\n    });\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map(row =>\r\n      row.map(cell => ({\r\n        ...cell,\r\n        value: cell.isEditable ? '' : cell.value\r\n      }))\r\n    );\r\n    \r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    \r\n    webSocketManager.send({\r\n      type: 'sendClearBoard',\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleReturnToMenu = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (connectionError) {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"error-container\">\r\n          <h2>Connection Error</h2>\r\n          <p>Unable to connect to the game server. Please try again later.</p>\r\n          <button className=\"menu-button\" onClick={handleReturnToMenu}>\r\n            Return to Puzzle Selection\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n      \r\n      <div className=\"app-container\">\r\n        <div className=\"left-section\">\r\n        <div className={`board-section ${puzzleSolved ? 'solved' : ''}`}>\r\n        <FinalGrid\r\n          gridData={gridData}\r\n          onCellChange={handleCellChange}\r\n          incorrectCells={incorrectCells}\r\n          playerPositions={playerPositions}\r\n          wsRef={webSocketManager} // Use webSocketManager\r\n          setFocusedCell={setFocusedCell}\r\n        />\r\n        </div>\r\n          \r\n          <div className=\"board-controls-section\">\r\n            <button \r\n              className=\"clearBoardBtn\" \r\n              onClick={handleClearBoard}\r\n            >\r\n              Clear Board\r\n            </button>\r\n            <button \r\n              className=\"checkSolutionBtn\" \r\n              onClick={handleCheckSolution}\r\n            >\r\n              Check Solution\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"right-section\">\r\n          <div className=\"chatBox\">\r\n            <div className=\"chatLog\" ref={chatLogRef}>\r\n              {chatMessages.map((msg, index) => (\r\n                <div key={index}>\r\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\r\n                  <span className=\"message\">{msg.message}</span>\r\n                  <span className=\"time\">\r\n                    {new Date(msg.time).toLocaleTimeString([], {\r\n                      hour: '2-digit',\r\n                      minute: '2-digit',\r\n                      hour12: true,\r\n                    })}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"chatInput\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatInput}\r\n                onChange={(e) => setChatInput(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    sendChatMessage();\r\n                  }\r\n                }}\r\n                placeholder=\"Type to chat\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"players-section\">\r\n            <div className=\"clientInfo\">\r\n              <span>You are:</span>\r\n              <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\r\n            </div>\r\n\r\n            <h3 className=\"playerHeader\">Connected Players:</h3>\r\n\r\n            <div className=\"playerList\">\r\n              <ul>\r\n                {players.map((player, index) => (\r\n                  <li key={index} style={{ color: player.color }}>\r\n                    {player.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,cAAc;AACrB,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,IAAIA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,GAAG;EAAEC,GAAG;EAAEC,eAAe;EAAEC,KAAK;EAAEC;AAAe,CAAC,EAAE;EAC5G,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACZ,KAAK,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAI,UAAU,CAACC,IAAI,CAACH,UAAU,CAAC,EAAE;MAC/BT,QAAQ,CAACS,UAAU,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBP,cAAc,CAAC;MAAEJ,GAAG;MAAEC;IAAI,CAAC,CAAC,CAAC,CAAC;IAC9BT,gBAAgB,CAACoB,IAAI,CAAC;MACpBC,IAAI,EAAE,oBAAoB;MAC1BC,QAAQ,EAAE;QAAEd,GAAG;QAAEC;MAAI,CAAC;MACtBc,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,IAAIC,SAAS,GAAGnB,UAAU,GAAG,MAAM,GAAG,mBAAmB;EACzD,IAAIE,WAAW,EAAE;IACfiB,SAAS,IAAI,iBAAiB;EAChC;;EAEA;EACA,MAAMC,gBAAgB,GAAGf,eAAe,CACrCgB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACL,QAAQ,CAACd,GAAG,KAAKA,GAAG,IAAImB,MAAM,CAACL,QAAQ,CAACb,GAAG,KAAKA,GAAG,CAAC,CAC5EmB,GAAG,CAACD,MAAM,IAAI;IACb,OAAO;MACLE,SAAS,EAAE,mBAAmBF,MAAM,CAACG,KAAK,EAAE;MAC5CC,MAAM,EAAE,CAAC;MACTT,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAEb,oBACEpB,OAAA;IACEmB,IAAI,EAAC,MAAM;IACXjB,KAAK,EAAEA,KAAM;IACbE,QAAQ,EAAED,UAAU,GAAGQ,YAAY,GAAGmB,SAAU;IAChDC,OAAO,EAAEd,WAAY;IACrBe,QAAQ,EAAE,CAAC7B,UAAW;IACtB8B,SAAS,EAAC,GAAG;IACbC,SAAS,EAAEZ,SAAU;IACrBa,KAAK,EAAEZ,gBAAiB;IACxB,YAAUjB,GAAI;IACd,YAAUC;EAAI;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEN;AAACC,EAAA,GAjDQvC,IAAI;AAmDb,SAASwC,SAASA,CAAC;EAAEC,QAAQ;EAAEC,YAAY;EAAEC,SAAS;EAAEC,SAAS;EAAEC,cAAc;EAAEtC,eAAe;EAAEC,KAAK;EAAEC;AAAe,CAAC,EAAE;EAC3H,MAAMqC,kBAAkB,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KACxDJ,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,CAACC,CAAC,EAAEE,CAAC,KAAKX,QAAQ,CAACW,CAAC,CAAC,CAACD,CAAC,CAAC,CACpD,CAAC;EAED,oBACEpD,OAAA;IAAKkC,SAAS,EAAC,WAAW;IAAAoB,QAAA,EACvBP,kBAAkB,CAACrB,GAAG,CAAC,CAACpB,GAAG,EAAEiD,QAAQ,kBACpCvD,OAAA;MAAoBkC,SAAS,EAAC,UAAU;MAAAoB,QAAA,EACrChD,GAAG,CAACoB,GAAG,CAAC,CAAC8B,IAAI,EAAEC,QAAQ,KAAK;QAC3B,MAAMC,SAAS,GAAGd,SAAS,GAAGa,QAAQ;QACtC,MAAME,SAAS,GAAGd,SAAS,GAAGU,QAAQ;QAEtC,MAAMlD,WAAW,GAAGyC,cAAc,CAACc,IAAI,CACrCJ,IAAI,IAAIA,IAAI,CAACjD,GAAG,KAAKmD,SAAS,IAAIF,IAAI,CAAClD,GAAG,KAAKqD,SACjD,CAAC;QAED,oBACE3D,OAAA,CAACC,IAAI;UAEHC,KAAK,EAAEsD,IAAI,CAACtD,KAAM;UAClBC,UAAU,EAAEqD,IAAI,CAACrD,UAAW;UAC5BE,WAAW,EAAEA,WAAY;UACzBC,GAAG,EAAEoD,SAAU;UACfnD,GAAG,EAAEoD,SAAU;UACfvD,QAAQ,EAAGF,KAAK,IAAKyC,YAAY,CAACe,SAAS,EAAEC,SAAS,EAAEzD,KAAK,CAAE;UAC/DM,eAAe,EAAEA,eAAgB;UACjCC,KAAK,EAAEA,KAAM;UACbC,cAAc,EAAEA,cAAe,CAAC;QAAA,GAT3B+C,QAAQ;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUd,CAAC;MAEN,CAAC;IAAC,GAvBMgB,QAAQ;MAAAnB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAwBb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACsB,GAAA,GApCQpB,SAAS;AAsClB,SAASqB,SAASA,CAAC;EAAEpB,QAAQ;EAAEC,YAAY;EAAEG,cAAc;EAAEtC,eAAe;EAAEC,KAAK;EAAEC;AAAe,CAAC,EAAE;EACrG,oBACEV,OAAA;IAAKkC,SAAS,EAAC,WAAW;IAAAoB,QAAA,EACvBN,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,CAACC,CAAC,EAAEY,OAAO,kBACpC/D,OAAA;MAAmBkC,SAAS,EAAC,UAAU;MAAAoB,QAAA,EACpCN,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC,EAAE,CAACC,CAAC,EAAEa,OAAO,kBACpChE,OAAA,CAACyC,SAAS;QAERC,QAAQ,EAAEA,QAAQ,CAAC3B,KAAK,CAACgD,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAACrC,GAAG,CAAEpB,GAAG,IAC7DA,GAAG,CAACS,KAAK,CAACiD,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,CAAC,GAAG,CAAC,CACxC,CAAE;QACFrB,YAAY,EAAEA,YAAa;QAC3BC,SAAS,EAAEmB,OAAO,GAAG,CAAE;QACvBlB,SAAS,EAAEmB,OAAO,GAAG,CAAE;QACvBlB,cAAc,EAAEA,cAAe;QAC/BtC,eAAe,EAAEA,eAAgB;QACjCC,KAAK,EAAEA,KAAM;QACbC,cAAc,EAAEA,cAAe,CAAC;MAAA,GAV3BsD,OAAO;QAAA5B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWb,CACF;IAAC,GAfMwB,OAAO;MAAA3B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;;AAEA;AAAA0B,GAAA,GA1BSH,SAAS;AA2BlB,IAAIzC,QAAQ,GAAG6C,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AAC/C,IAAI,CAAC9C,QAAQ,EAAE;EACbA,QAAQ,GAAG+C,MAAM,CAACC,UAAU,CAAC,CAAC;EAC9BH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEjD,QAAQ,CAAC;AAC5C;AAEA,SAASkD,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAG7E,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAE8E,QAAQ,EAAEC;EAAY,CAAC,GAAGhF,SAAS,CAAC,CAAC;EAC7C,MAAM,CAAC+E,QAAQ,CAAC,GAAGlF,QAAQ,CAACoF,QAAQ,CAACD,WAAW,CAAC,IAAI,IAAI,CAAC;EAC1D,MAAM,CAACE,WAAW,EAAEC,cAAc,CAAC,GAAGtF,QAAQ,CAAC,mBAAmB,CAAC;EACnE,MAAM,CAACkD,QAAQ,EAAEqC,WAAW,CAAC,GAAGvF,QAAQ,CAACwD,KAAK,CAAC,CAAC,CAAC,CAACgC,IAAI,CAAChC,KAAK,CAAC,CAAC,CAAC,CAACgC,IAAI,CAAC;IAAE9E,KAAK,EAAE,EAAE;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;EACvG,MAAM,CAAC8E,OAAO,EAAEC,UAAU,CAAC,GAAG1F,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgB,eAAe,EAAE2E,kBAAkB,CAAC,GAAG3F,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC4F,WAAW,EAAE1E,cAAc,CAAC,GAAGlB,QAAQ,CAAC;IAAEc,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EAClE,MAAM,CAAC8E,UAAU,EAAEC,aAAa,CAAC,GAAG9F,QAAQ,CAAC;IAAE+F,IAAI,EAAE,EAAE;IAAE3D,KAAK,EAAE;EAAG,CAAC,CAAC;EACrE,MAAM,CAAC4D,SAAS,EAAEC,YAAY,CAAC,GAAGjG,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkG,YAAY,EAAEC,eAAe,CAAC,GAAGnG,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsD,cAAc,EAAE8C,iBAAiB,CAAC,GAAGpG,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACqG,YAAY,EAAEC,eAAe,CAAC,GAAGtG,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACuG,eAAe,EAAEC,kBAAkB,CAAC,GAAGxG,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMyG,UAAU,GAAGvG,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd;IACA,IAAIwG,UAAU,CAACC,OAAO,EAAE;MACtBD,UAAU,CAACC,OAAO,CAACC,SAAS,GAAGF,UAAU,CAACC,OAAO,CAACE,YAAY;IAChE;EACF,CAAC,EAAE,CAACV,YAAY,CAAC,CAAC;EAElBjG,SAAS,CAAC,MAAM;IACd,MAAM4G,KAAK,GAAG,wBAAwB;IACtCC,OAAO,CAACC,GAAG,CAAC,8BAA8BF,KAAK,EAAE,CAAC;IAClDvG,gBAAgB,CAAC0G,OAAO,CAACH,KAAK,CAAC;IAE/B,MAAMI,aAAa,GAAIC,IAAI,IAAK;MAC9B,IAAIA,IAAI,CAACvF,IAAI,KAAK,cAAc,EAAE;QAChC,MAAMwF,WAAW,GAAG3D,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,EAAE,CAACC,CAAC,EAAEI,QAAQ,KACxDP,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,EAAE,CAACC,CAAC,EAAEM,QAAQ,MAAM;UAC1CvD,KAAK,EAAEwG,IAAI,CAACE,KAAK,CAACnD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACrD,KAAK;UAAE;UAC7CC,UAAU,EAAEuG,IAAI,CAACE,KAAK,CAACnD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACpD,UAAU,CAAE;QACzD,CAAC,CAAC,CACJ,CAAC;QACD4E,WAAW,CAAC4B,WAAW,CAAC;QACxB7B,cAAc,CAAC4B,IAAI,CAACG,KAAK,CAAC;MAC5B,CAAC,MAAM,IAAIH,IAAI,CAACvF,IAAI,KAAK,eAAe,EAAE;QACxC+D,UAAU,CAACwB,IAAI,CAACzB,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAIyB,IAAI,CAACvF,IAAI,KAAK,gBAAgB,EAAE;QACzCmE,aAAa,CAACoB,IAAI,CAACI,MAAM,CAAC;MAC5B,CAAC,MAAM,IAAIJ,IAAI,CAACvF,IAAI,KAAK,YAAY,EAAE;QACrCwE,eAAe,CAACe,IAAI,CAACK,QAAQ,CAAC;MAChC,CAAC,MAAM,IAAIL,IAAI,CAACvF,IAAI,KAAK,oBAAoB,EAAE;QAC7C2E,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM,IAAIY,IAAI,CAACvF,IAAI,KAAK,sBAAsB,EAAE;QAC/CyE,iBAAiB,CAACc,IAAI,CAAC5D,cAAc,CAAC;MACxC,CAAC,MAAM,IAAI4D,IAAI,CAACvF,IAAI,KAAK,uBAAuB,EAAE;QAChDgE,kBAAkB,CAACuB,IAAI,CAACM,SAAS,CAAC;MACpC,CAAC,MAAM,IAAIN,IAAI,CAACvF,IAAI,KAAK,gBAAgB,EAAE;QACzC8F,KAAK,CAAC,kDAAkD,CAAC;QACzDxC,QAAQ,CAAC,GAAG,CAAC;MACf;IACF,CAAC;IAED3E,gBAAgB,CAACoH,WAAW,CAACT,aAAa,CAAC;;IAE3C;IACA3G,gBAAgB,CAACoB,IAAI,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEE;IAAS,CAAC,CAAC;IAC1DvB,gBAAgB,CAACoB,IAAI,CAAC;MAAEC,IAAI,EAAE,aAAa;MAAEE,QAAQ;MAAEqD;IAAS,CAAC,CAAC;IAClE5E,gBAAgB,CAACoB,IAAI,CAAC;MAAEC,IAAI,EAAE,WAAW;MAAEuD;IAAS,CAAC,CAAC;IAEtD,OAAO,MAAM;MACX5E,gBAAgB,CAACqH,cAAc,CAACV,aAAa,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAAC/B,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAExB,MAAM2C,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI5B,SAAS,CAAC6B,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC3B,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAElC,UAAU,CAACE,IAAI;QACrB3D,KAAK,EAAEyD,UAAU,CAACzD,KAAK;QACvB4F,IAAI,EAAEhC,SAAS;QACfd,QAAQ,EAAEA;MACZ,CAAC;MAED5E,gBAAgB,CAACoB,IAAI,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEmG;MAAQ,CAAC,CAAC;MACpD7B,YAAY,CAAC,EAAE,CAAC;IAClB;EACF,CAAC;EAED,MAAMgC,aAAa,GAAI7G,KAAK,IAAK;IAC/B,MAAM;MAAEN,GAAG;MAAEC;IAAI,CAAC,GAAG6E,WAAW;IAC9B,QAAQxE,KAAK,CAAC8G,GAAG;MACf,KAAK,SAAS;QACZ,IAAInH,GAAG,GAAG,CAAC,EAAEG,cAAc,CAAC;UAAEJ,GAAG,EAAEA,GAAG;UAAGC,GAAG,EAAEA,GAAG,GAAG;QAAC,CAAC,CAAC;QACvD;MACF,KAAK,WAAW;QACd,IAAIA,GAAG,GAAG,CAAC,EAAEG,cAAc,CAAC;UAAEJ,GAAG,EAAEA,GAAG;UAAGC,GAAG,EAAEA,GAAG,GAAG;QAAC,CAAC,CAAC;QACvD;MACF,KAAK,WAAW;QACd,IAAID,GAAG,GAAG,CAAC,EAAEI,cAAc,CAAC;UAAEJ,GAAG,EAAEA,GAAG,GAAG,CAAC;UAAEC,GAAG,EAAEA;QAAI,CAAC,CAAC;QACvD;MACF,KAAK,YAAY;QACf,IAAID,GAAG,GAAG,CAAC,EAAEI,cAAc,CAAC;UAAEJ,GAAG,EAAEA,GAAG,GAAG,CAAC;UAAEC,GAAG,EAAEA;QAAI,CAAC,CAAC;QACvD;MACA;QACE;IACJ;EACJ,CAAC;EAEHd,SAAS,CAAC,MAAM;IACd,MAAMkI,cAAc,GAAI/G,KAAK,IAAK6G,aAAa,CAAC7G,KAAK,CAAC;IAEtDgH,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEF,cAAc,CAAC;IAClD,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEH,cAAc,CAAC;IACvD,CAAC;EACH,CAAC,CAAC;EAEFlI,SAAS,CAAC,MAAM;IACd,MAAM;MAAEa,GAAG;MAAEC;IAAI,CAAC,GAAG6E,WAAW;IAChC,MAAM2C,UAAU,GAAGC,QAAQ,CAACC,aAAa,CACvC,mBAAmB3H,GAAG,gBAAgBC,GAAG,IAC3C,CAAC;IACD,IAAIwH,UAAU,EAAE;MACdA,UAAU,CAACG,KAAK,CAAC,CAAC;MAClB;MACA,MAAMC,WAAW,GAAGJ,UAAU,CAAC7H,KAAK,CAACgD,MAAM;MAC3CkF,UAAU,CAAC,MAAM;QACfL,UAAU,CAACM,iBAAiB,CAACF,WAAW,EAAEA,WAAW,CAAC;MACxD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACT;EACF,CAAC,EAAE,CAAC/C,WAAW,CAAC,CAAC;EAEjB,MAAMkD,mBAAmB,GAAGA,CAAA,KAAM;IAChCxI,gBAAgB,CAACoB,IAAI,CAAC;MACpBC,IAAI,EAAE,mBAAmB;MACzBuD,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,MAAM6D,gBAAgB,GAAGA,CAACjI,GAAG,EAAEC,GAAG,EAAEL,KAAK,KAAK;IAC5C,MAAMsI,OAAO,GAAG9F,QAAQ,CAAChB,GAAG,CAAC,CAAC+G,CAAC,EAAElF,QAAQ,KACvCkF,CAAC,CAAC/G,GAAG,CAAC,CAAC8B,IAAI,EAAEC,QAAQ,KACnBF,QAAQ,KAAKjD,GAAG,IAAImD,QAAQ,KAAKlD,GAAG,GAChC;MAAE,GAAGiD,IAAI;MAAEtD;IAAM,CAAC,GAClBsD,IACN,CACF,CAAC;IAEDuB,WAAW,CAACyD,OAAO,CAAC;IACpB1C,eAAe,CAAC,KAAK,CAAC;IAEtBF,iBAAiB,CAAE8C,IAAI,IACrBA,IAAI,CAAClH,MAAM,CAAEgC,IAAI,IAAK,EAAEA,IAAI,CAAClD,GAAG,KAAKA,GAAG,IAAIkD,IAAI,CAACjD,GAAG,KAAKA,GAAG,CAAC,CAC/D,CAAC;IAEDT,gBAAgB,CAACoB,IAAI,CAAC;MACpBC,IAAI,EAAE,gBAAgB;MACtBuD,QAAQ,EAAEA,QAAQ;MAClBpE,GAAG,EAAEC,GAAG;MACRA,GAAG,EAAED,GAAG;MACRJ,KAAK,EAAEA,KAAK,IAAI;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyI,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMC,WAAW,GAAGlG,QAAQ,CAAChB,GAAG,CAACpB,GAAG,IAClCA,GAAG,CAACoB,GAAG,CAAC8B,IAAI,KAAK;MACf,GAAGA,IAAI;MACPtD,KAAK,EAAEsD,IAAI,CAACrD,UAAU,GAAG,EAAE,GAAGqD,IAAI,CAACtD;IACrC,CAAC,CAAC,CACJ,CAAC;;IAED;IACA6E,WAAW,CAAC6D,WAAW,CAAC;IACxBhD,iBAAiB,CAAC,EAAE,CAAC;IAErB9F,gBAAgB,CAACoB,IAAI,CAAC;MACpBC,IAAI,EAAE,gBAAgB;MACtBuD,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmE,kBAAkB,GAAGA,CAAA,KAAM;IAC/BpE,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,IAAIsB,eAAe,EAAE;IACnB,oBACE/F,OAAA;MAAAsD,QAAA,gBACEtD,OAAA,CAACH,MAAM;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVvC,OAAA;QAAKkC,SAAS,EAAC,iBAAiB;QAAAoB,QAAA,gBAC9BtD,OAAA;UAAAsD,QAAA,EAAI;QAAgB;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBvC,OAAA;UAAAsD,QAAA,EAAG;QAA6D;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACpEvC,OAAA;UAAQkC,SAAS,EAAC,aAAa;UAAC4G,OAAO,EAAED,kBAAmB;UAAAvF,QAAA,EAAC;QAE7D;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACEvC,OAAA;IAAAsD,QAAA,gBACEtD,OAAA,CAACH,MAAM;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVvC,OAAA;MAAKkC,SAAS,EAAC,aAAa;MAAAoB,QAAA,EAAEuB;IAAW;MAAAzC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAEhDvC,OAAA;MAAKkC,SAAS,EAAC,eAAe;MAAAoB,QAAA,gBAC5BtD,OAAA;QAAKkC,SAAS,EAAC,cAAc;QAAAoB,QAAA,gBAC7BtD,OAAA;UAAKkC,SAAS,EAAE,iBAAiB2D,YAAY,GAAG,QAAQ,GAAG,EAAE,EAAG;UAAAvC,QAAA,eAChEtD,OAAA,CAAC8D,SAAS;YACRpB,QAAQ,EAAEA,QAAS;YACnBC,YAAY,EAAE4F,gBAAiB;YAC/BzF,cAAc,EAAEA,cAAe;YAC/BtC,eAAe,EAAEA,eAAgB;YACjCC,KAAK,EAAEX,gBAAiB,CAAC;YAAA;YACzBY,cAAc,EAAEA;UAAe;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,eAEJvC,OAAA;UAAKkC,SAAS,EAAC,wBAAwB;UAAAoB,QAAA,gBACrCtD,OAAA;YACEkC,SAAS,EAAC,eAAe;YACzB4G,OAAO,EAAEH,gBAAiB;YAAArF,QAAA,EAC3B;UAED;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTvC,OAAA;YACEkC,SAAS,EAAC,kBAAkB;YAC5B4G,OAAO,EAAER,mBAAoB;YAAAhF,QAAA,EAC9B;UAED;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENvC,OAAA;QAAKkC,SAAS,EAAC,eAAe;QAAAoB,QAAA,gBAC5BtD,OAAA;UAAKkC,SAAS,EAAC,SAAS;UAAAoB,QAAA,gBACtBtD,OAAA;YAAKkC,SAAS,EAAC,SAAS;YAAC6G,GAAG,EAAE9C,UAAW;YAAA3C,QAAA,EACtCoC,YAAY,CAAChE,GAAG,CAAC,CAACsH,GAAG,EAAEC,KAAK,kBAC3BjJ,OAAA;cAAAsD,QAAA,gBACEtD,OAAA;gBAAQmC,KAAK,EAAE;kBAAEP,KAAK,EAAEoH,GAAG,CAACpH,KAAK,IAAI;gBAAO,CAAE;gBAAA0B,QAAA,GAAE0F,GAAG,CAACzB,IAAI,EAAC,GAAC;cAAA;gBAAAnF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACnEvC,OAAA;gBAAMkC,SAAS,EAAC,SAAS;gBAAAoB,QAAA,EAAE0F,GAAG,CAAC1B;cAAO;gBAAAlF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC9CvC,OAAA;gBAAMkC,SAAS,EAAC,MAAM;gBAAAoB,QAAA,EACnB,IAAI4F,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC,CAACC,kBAAkB,CAAC,EAAE,EAAE;kBACzCC,IAAI,EAAE,SAAS;kBACfC,MAAM,EAAE,SAAS;kBACjBC,MAAM,EAAE;gBACV,CAAC;cAAC;gBAAAnH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA,GATC0G,KAAK;cAAA7G,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAUV,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eAENvC,OAAA;YAAKkC,SAAS,EAAC,WAAW;YAAAoB,QAAA,eACxBtD,OAAA;cACEmB,IAAI,EAAC,MAAM;cACXjB,KAAK,EAAEsF,SAAU;cACjBpF,QAAQ,EAAGoJ,CAAC,IAAK/D,YAAY,CAAC+D,CAAC,CAAC1I,MAAM,CAACZ,KAAK,CAAE;cAC9CuJ,SAAS,EAAGD,CAAC,IAAK;gBAChB,IAAIA,CAAC,CAAC9B,GAAG,KAAK,OAAO,EAAE;kBACrBN,eAAe,CAAC,CAAC;gBACnB;cACF,CAAE;cACFsC,WAAW,EAAC;YAAc;cAAAtH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENvC,OAAA;UAAKkC,SAAS,EAAC,iBAAiB;UAAAoB,QAAA,gBAC9BtD,OAAA;YAAKkC,SAAS,EAAC,YAAY;YAAAoB,QAAA,gBACzBtD,OAAA;cAAAsD,QAAA,EAAM;YAAQ;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACrBvC,OAAA;cAAMmC,KAAK,EAAE;gBAAEP,KAAK,EAAEyD,UAAU,CAACzD;cAAM,CAAE;cAAA0B,QAAA,GAAC,GAAC,EAAC+B,UAAU,CAACE,IAAI;YAAA;cAAAnD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChE,CAAC,eAENvC,OAAA;YAAIkC,SAAS,EAAC,cAAc;YAAAoB,QAAA,EAAC;UAAkB;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAEpDvC,OAAA;YAAKkC,SAAS,EAAC,YAAY;YAAAoB,QAAA,eACzBtD,OAAA;cAAAsD,QAAA,EACG2B,OAAO,CAACvD,GAAG,CAAC,CAACD,MAAM,EAAEwH,KAAK,kBACzBjJ,OAAA;gBAAgBmC,KAAK,EAAE;kBAAEP,KAAK,EAAEH,MAAM,CAACG;gBAAM,CAAE;gBAAA0B,QAAA,EAC5C7B,MAAM,CAAC8D;cAAI,GADL0D,KAAK;gBAAA7G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACiC,EAAA,CA9RQD,UAAU;EAAA,QACA3E,WAAW,EACMD,SAAS;AAAA;AAAAgK,GAAA,GAFpCpF,UAAU;AAgSnB,eAAeA,UAAU;AAAC,IAAA/B,EAAA,EAAAqB,GAAA,EAAAI,GAAA,EAAA0F,GAAA;AAAAC,YAAA,CAAApH,EAAA;AAAAoH,YAAA,CAAA/F,GAAA;AAAA+F,YAAA,CAAA3F,GAAA;AAAA2F,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}