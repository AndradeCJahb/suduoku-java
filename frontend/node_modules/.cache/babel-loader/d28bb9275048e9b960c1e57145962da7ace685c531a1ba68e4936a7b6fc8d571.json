{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useParams,useNavigate}from'react-router-dom';import Header from'./Header';import'../index.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Cell(_ref){let{value,isEditable,onChange,isIncorrect,row,col,playerPositions,wsRef}=_ref;const handleChange=event=>{const inputValue=event.target.value.slice(-1);if(/^[1-9]?$/.test(inputValue)){onChange(inputValue);}};// Send position to server when cell is focused\nconst handleFocus=()=>{if(wsRef&&wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({type:'cellSelection',position:{row,col}}));}};// Determine the CSS class based on editable state and incorrect state\nlet cellClass=isEditable?'cell':'non-editable-cell';if(isIncorrect){cellClass+=' incorrect-cell';}// Add player position highlights\nconst playerHighlights=playerPositions.filter(player=>player.position.row===row&&player.position.col===col).map(player=>{return{boxShadow:`inset 0 0 0 3px ${player.color}`,zIndex:1,position:'relative'};})[0]||{};return/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:value,onChange:isEditable?handleChange:undefined,onFocus:handleFocus,readOnly:!isEditable,maxLength:\"2\",className:cellClass,style:playerHighlights});}function ThreeGrid(_ref2){let{gridData,onCellChange,rowOffset,colOffset,incorrectCells,playerPositions,wsRef}=_ref2;const transposedGridData=Array.from({length:3},(_,i)=>Array.from({length:3},(_,j)=>gridData[j][i]));return/*#__PURE__*/_jsx(\"div\",{className:\"threeGrid\",children:transposedGridData.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:row.map((cell,colIndex)=>{// Calculate the global row and column for this cell\nconst globalRow=rowOffset+colIndex;const globalCol=colOffset+rowIndex;// Check if this cell is in the incorrect cells list\nconst isIncorrect=incorrectCells.some(cell=>cell.row===globalRow&&cell.col===globalCol);return/*#__PURE__*/_jsx(Cell,{value:cell.value,isEditable:cell.isEditable,isIncorrect:isIncorrect,row:globalRow,col:globalCol,onChange:value=>onCellChange(globalRow,globalCol,value),playerPositions:playerPositions,wsRef:wsRef},colIndex);})},rowIndex))});}function FinalGrid(_ref3){let{gridData,onCellChange,incorrectCells,playerPositions,wsRef}=_ref3;return/*#__PURE__*/_jsx(\"div\",{className:\"finalGrid\",children:Array.from({length:3},(_,gridRow)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:Array.from({length:3},(_,gridCol)=>/*#__PURE__*/_jsx(ThreeGrid,{gridData:gridData.slice(gridRow*3,gridRow*3+3).map(row=>row.slice(gridCol*3,gridCol*3+3)),onCellChange:onCellChange,rowOffset:gridRow*3,colOffset:gridCol*3,incorrectCells:incorrectCells,playerPositions:playerPositions,wsRef:wsRef},gridCol))},gridRow))});}// Check if a client ID exists in localStorage\nlet clientId=localStorage.getItem('clientId');if(!clientId){clientId=crypto.randomUUID();localStorage.setItem('clientId',clientId);}function SudokuGame(){const{puzzleId:urlPuzzleId}=useParams();const navigate=useNavigate();const[puzzleId,setPuzzleId]=useState(parseInt(urlPuzzleId,10)||null);const[gridData,setGridData]=useState(Array(9).fill(Array(9).fill({value:'',isEditable:true})));const[puzzleTitle,setPuzzleTitle]=useState('Loading puzzle...');const[clientInfo,setClientInfo]=useState({name:'',color:''});const[players,setPlayers]=useState([]);const[chatInput,setChatInput]=useState('');const[chatMessages,setChatMessages]=useState([]);const[incorrectCells,setIncorrectCells]=useState([]);const[playerPositions,setPlayerPositions]=useState([]);const[connectionError,setConnectionError]=useState(false);const chatLogRef=useRef(null);const ws=useRef(null);useEffect(()=>{// Scroll to the bottom of the chat log whenever messages are updated\nif(chatLogRef.current){chatLogRef.current.scrollTop=chatLogRef.current.scrollHeight;}},[chatMessages]);useEffect(()=>{// Use the correct WebSocket path with wss:// for secure connections\nconst wsUrl='wss://da6d-2601-1c2-4503-61b0-62-7a49-5af4-c336.ngrok-free.app/ws';console.log(`Connecting to WebSocket at ${wsUrl}`);ws.current=new WebSocket(wsUrl);ws.current.onopen=()=>{console.log('Connected to WebSocket server');setConnectionError(false);ws.current.send(JSON.stringify({type:'identify',clientId,puzzleId:puzzleId}));ws.current.send(JSON.stringify({type:'loadChat'}));};ws.current.onerror=error=>{console.error('WebSocket error:',error);setConnectionError(true);};ws.current.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='update'){// Update the grid with the new state from the server\nconst updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,// Swap row and column indices\nisEditable:data.board[colIndex][rowIndex].isEditable// Swap row and column indices\n})));setGridData(updatedGrid);// Set the grid data in row-major order\nsetPuzzleTitle(data.title);// Update the puzzle title\nif(data.puzzleId){setPuzzleId(data.puzzleId);}if(data.client){setClientInfo(data.client);// Set the client's name and color\n}}else if(data.type==='players'){setPlayers(data.players);// Update the list of connected players \n}else if(data.type==='chatHistory'){setChatMessages(data.messages);// Load chat history\n}else if(data.type==='checkResult'){setIncorrectCells(data.incorrectCells);}else if(data.type==='gameState'){// Handle combined game state update including player positions\nconst updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,isEditable:data.board[colIndex][rowIndex].isEditable})));setGridData(updatedGrid);setPuzzleTitle(data.title);if(data.puzzleId){setPuzzleId(data.puzzleId);}setIncorrectCells(data.incorrectCells);// Add this line to update player positions from game state\nif(data.playerPositions){setPlayerPositions(data.playerPositions);}}else if(data.type==='playerPositions'){setPlayerPositions(data.positions);}else if(data.type==='puzzleNotFound'){// Handle case where puzzle was not found\nalert('Puzzle not found. Returning to puzzle selection.');navigate('/');}};ws.current.onclose=()=>{console.log('Disconnected from WebSocket server');};return()=>{if(ws.current){ws.current.close();}};},[puzzleId,navigate]);const sendChatMessage=()=>{if(chatInput.trim()!==''&&ws.current&&ws.current.readyState===WebSocket.OPEN){const message={user:clientInfo.name,color:clientInfo.color,text:chatInput,puzzleId:puzzleId||1};ws.current.send(JSON.stringify({type:'chat',message}));setChatInput('');}};const handleCheckSolution=()=>{if(ws.current&&ws.current.readyState===WebSocket.OPEN){ws.current.send(JSON.stringify({type:'checkSolution'}));}};const handleCellChange=(row,col,value)=>{// Update the local grid\nconst newGrid=gridData.map((r,rowIndex)=>r.map((cell,colIndex)=>rowIndex===row&&colIndex===col?{...cell,value}:cell));// Update local state\nsetGridData(newGrid);// Immediately remove this cell from incorrectCells locally for better user experience\nsetIncorrectCells(prev=>prev.filter(cell=>!(cell.row===row&&cell.col===col)));if(ws.current&&ws.current.readyState===WebSocket.OPEN){// Transpose the grid before sending to the server\nconst transposedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:newGrid[colIndex][rowIndex].value,isEditable:newGrid[colIndex][rowIndex].isEditable})));// Send with properly transposed coordinates for changedCell\nws.current.send(JSON.stringify({type:'update',board:transposedGrid,changedCell:{row:row,col:col}}));}};const handleClearBoard=()=>{// Create a new grid with only locked cells\nconst clearedGrid=gridData.map(row=>row.map(cell=>({...cell,value:cell.isEditable?'':cell.value})));// Update local state\nsetGridData(clearedGrid);setIncorrectCells([]);if(ws.current&&ws.current.readyState===WebSocket.OPEN){// Notify the server to clear the board\nws.current.send(JSON.stringify({type:'clearBoard'}));}};const handleReturnToMenu=()=>{navigate('/');};if(connectionError){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"error-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Connection Error\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Unable to connect to the game server. Please try again later.\"}),/*#__PURE__*/_jsx(\"button\",{className:\"menu-button\",onClick:handleReturnToMenu,children:\"Return to Puzzle Selection\"})]})]});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"sudokuTitle\",children:puzzleTitle}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"board-section\",children:/*#__PURE__*/_jsx(FinalGrid,{gridData:gridData,onCellChange:handleCellChange,incorrectCells:incorrectCells,playerPositions:playerPositions,wsRef:ws})}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-controls-section\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"clearBoardBtn\",onClick:handleClearBoard,children:\"Clear Board\"}),/*#__PURE__*/_jsx(\"button\",{className:\"checkSolutionBtn\",onClick:handleCheckSolution,children:\"Check Solution\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"right-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatLog\",ref:chatLogRef,children:chatMessages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{style:{color:msg.color||'#000'},children:[msg.user,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"message\",children:msg.message}),/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:new Date(msg.time).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit',hour12:true})})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"chatInput\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:chatInput,onChange:e=>setChatInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'){sendChatMessage();}},placeholder:\"Type to chat\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"players-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"clientInfo\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"You are:\"}),/*#__PURE__*/_jsxs(\"span\",{style:{color:clientInfo.color},children:[\" \",clientInfo.name]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"playerHeader\",children:\"Connected Players:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"playerList\",children:/*#__PURE__*/_jsx(\"ul\",{children:players.map((player,index)=>/*#__PURE__*/_jsx(\"li\",{style:{color:player.color},children:player.name},index))})})]})]})]})]});}export default SudokuGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","jsx","_jsx","jsxs","_jsxs","Cell","_ref","value","isEditable","onChange","isIncorrect","row","col","playerPositions","wsRef","handleChange","event","inputValue","target","slice","test","handleFocus","current","readyState","WebSocket","OPEN","send","JSON","stringify","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","className","style","ThreeGrid","_ref2","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","children","rowIndex","cell","colIndex","globalRow","globalCol","some","FinalGrid","_ref3","gridRow","gridCol","clientId","localStorage","getItem","crypto","randomUUID","setItem","SudokuGame","puzzleId","urlPuzzleId","navigate","setPuzzleId","parseInt","setGridData","fill","puzzleTitle","setPuzzleTitle","clientInfo","setClientInfo","name","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","setPlayerPositions","connectionError","setConnectionError","chatLogRef","ws","scrollTop","scrollHeight","wsUrl","console","log","onopen","onerror","error","onmessage","data","parse","updatedGrid","board","title","client","messages","positions","alert","onclose","close","sendChatMessage","trim","message","user","text","handleCheckSolution","handleCellChange","newGrid","r","prev","transposedGrid","changedCell","handleClearBoard","clearedGrid","handleReturnToMenu","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport '../index.css';\r\n\r\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, wsRef }) {\r\n  const handleChange = (event) => {\r\n    const inputValue = event.target.value.slice(-1);\r\n    if (/^[1-9]?$/.test(inputValue)) {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // Send position to server when cell is focused\r\n  const handleFocus = () => {\r\n    if (wsRef && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify({ \r\n        type: 'cellSelection', \r\n        position: { row, col } \r\n      }));\r\n    }\r\n  };\r\n\r\n  // Determine the CSS class based on editable state and incorrect state\r\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\r\n  if (isIncorrect) {\r\n    cellClass += ' incorrect-cell';\r\n  }\r\n\r\n  // Add player position highlights\r\n  const playerHighlights = playerPositions\r\n    .filter(player => player.position.row === row && player.position.col === col)\r\n    .map(player => {\r\n      return {\r\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n      };\r\n    })[0] || {};\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={isEditable ? handleChange : undefined}\r\n      onFocus={handleFocus}\r\n      readOnly={!isEditable}\r\n      maxLength=\"2\"\r\n      className={cellClass}\r\n      style={playerHighlights}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, wsRef }) {\r\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\r\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\r\n  );\r\n\r\n  return (\r\n    <div className=\"threeGrid\">\r\n      {transposedGridData.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"grid-row\">\r\n          {row.map((cell, colIndex) => {\r\n            // Calculate the global row and column for this cell\r\n            const globalRow = rowOffset + colIndex;\r\n            const globalCol = colOffset + rowIndex;\r\n            \r\n            // Check if this cell is in the incorrect cells list\r\n            const isIncorrect = incorrectCells.some(\r\n              cell => cell.row === globalRow && cell.col === globalCol\r\n            );\r\n            \r\n            return (\r\n              <Cell\r\n                key={colIndex}\r\n                value={cell.value}\r\n                isEditable={cell.isEditable}\r\n                isIncorrect={isIncorrect}\r\n                row={globalRow}\r\n                col={globalCol}\r\n                onChange={(value) =>\r\n                  onCellChange(globalRow, globalCol, value)\r\n                }\r\n                playerPositions={playerPositions}\r\n                wsRef={wsRef}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, wsRef }) {\r\n  return (\r\n    <div className=\"finalGrid\">\r\n      {Array.from({ length: 3 }, (_, gridRow) => (\r\n        <div key={gridRow} className=\"grid-row\">\r\n          {Array.from({ length: 3 }, (_, gridCol) => (\r\n            <ThreeGrid\r\n              key={gridCol}\r\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\r\n                row.slice(gridCol * 3, gridCol * 3 + 3)\r\n              )}\r\n              onCellChange={onCellChange}\r\n              rowOffset={gridRow * 3}\r\n              colOffset={gridCol * 3}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              wsRef={wsRef}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem('clientId');\r\nif (!clientId) {\r\n  clientId = crypto.randomUUID();\r\n  localStorage.setItem('clientId', clientId);\r\n}\r\n\r\nfunction SudokuGame() {\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [puzzleId, setPuzzleId] = useState(parseInt(urlPuzzleId, 10) || null);\r\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({ value: '', isEditable: true })));\r\n  const [puzzleTitle, setPuzzleTitle] = useState('Loading puzzle...');\r\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' });\r\n  const [players, setPlayers] = useState([]);\r\n  const [chatInput, setChatInput] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [connectionError, setConnectionError] = useState(false);\r\n\r\n  const chatLogRef = useRef(null);\r\n  const ws = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    // Use the correct WebSocket path with wss:// for secure connections\r\n    const wsUrl = 'wss://da6d-2601-1c2-4503-61b0-62-7a49-5af4-c336.ngrok-free.app/ws';\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    \r\n    ws.current = new WebSocket(wsUrl);\r\n\r\n  ws.current.onopen = () => {\r\n    console.log('Connected to WebSocket server');\r\n    setConnectionError(false);\r\n    ws.current.send(JSON.stringify({ \r\n      type: 'identify', \r\n      clientId,\r\n      puzzleId: puzzleId\r\n    }));\r\n    ws.current.send(JSON.stringify({ type: 'loadChat' }));\r\n  };\r\n\r\n    ws.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n      setConnectionError(true);\r\n    };\r\n\r\n    ws.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      \r\n      if (data.type === 'update') {\r\n        // Update the grid with the new state from the server\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n    \r\n        setGridData(updatedGrid); // Set the grid data in row-major order\r\n        setPuzzleTitle(data.title); // Update the puzzle title\r\n\r\n        if (data.puzzleId) {\r\n          setPuzzleId(data.puzzleId);\r\n        }\r\n\r\n        if (data.client) {\r\n          setClientInfo(data.client); // Set the client's name and color\r\n        }\r\n      } else if (data.type === 'players') {\r\n        setPlayers(data.players); // Update the list of connected players \r\n      } else if (data.type === 'chatHistory') {\r\n        setChatMessages(data.messages); // Load chat history\r\n      } else if (data.type === 'checkResult') {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === 'gameState') {\r\n        // Handle combined game state update including player positions\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value,\r\n            isEditable: data.board[colIndex][rowIndex].isEditable,\r\n          }))\r\n        );\r\n    \r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n        if (data.puzzleId) {\r\n          setPuzzleId(data.puzzleId);\r\n        }\r\n        setIncorrectCells(data.incorrectCells);\r\n        \r\n        // Add this line to update player positions from game state\r\n        if (data.playerPositions) {\r\n          setPlayerPositions(data.playerPositions);\r\n        }\r\n      } else if (data.type === 'playerPositions') {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === 'puzzleNotFound') {\r\n        // Handle case where puzzle was not found\r\n        alert('Puzzle not found. Returning to puzzle selection.');\r\n        navigate('/');\r\n      }\r\n    };\r\n\r\n    ws.current.onclose = () => {\r\n      console.log('Disconnected from WebSocket server');\r\n    };\r\n\r\n    return () => {\r\n      if (ws.current) {\r\n        ws.current.close();\r\n      }\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const sendChatMessage = () => {\r\n    if (chatInput.trim() !== '' && ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      const message = {\r\n        user: clientInfo.name,\r\n        color: clientInfo.color,\r\n        text: chatInput,\r\n        puzzleId: puzzleId || 1,\r\n      };\r\n      \r\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\r\n      setChatInput('');\r\n    }\r\n  };\r\n\r\n  const handleCheckSolution = () => {\r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      ws.current.send(JSON.stringify({ \r\n        type: 'checkSolution'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    // Update the local grid\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col\r\n          ? { ...cell, value }\r\n          : cell\r\n      )\r\n    );\r\n  \r\n    // Update local state\r\n    setGridData(newGrid);\r\n  \r\n    // Immediately remove this cell from incorrectCells locally for better user experience\r\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\r\n  \r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      // Transpose the grid before sending to the server\r\n      const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n        Array.from({ length: 9 }, (_, colIndex) => ({\r\n          value: newGrid[colIndex][rowIndex].value,\r\n          isEditable: newGrid[colIndex][rowIndex].isEditable,\r\n        }))\r\n      );\r\n    \r\n      // Send with properly transposed coordinates for changedCell\r\n      ws.current.send(JSON.stringify({ \r\n        type: 'update', \r\n        board: transposedGrid,\r\n        changedCell: { \r\n          row: row,\r\n          col: col\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map(row =>\r\n      row.map(cell => ({\r\n        ...cell,\r\n        value: cell.isEditable ? '' : cell.value\r\n      }))\r\n    );\r\n    \r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    \r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      // Notify the server to clear the board\r\n      ws.current.send(JSON.stringify({ \r\n        type: 'clearBoard'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleReturnToMenu = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (connectionError) {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"error-container\">\r\n          <h2>Connection Error</h2>\r\n          <p>Unable to connect to the game server. Please try again later.</p>\r\n          <button className=\"menu-button\" onClick={handleReturnToMenu}>\r\n            Return to Puzzle Selection\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"sudokuTitle\">{puzzleTitle}</div>\r\n      \r\n      <div className=\"app-container\">\r\n        <div className=\"left-section\">\r\n          <div className=\"board-section\">\r\n            <FinalGrid \r\n              gridData={gridData} \r\n              onCellChange={handleCellChange}\r\n              incorrectCells={incorrectCells}\r\n              playerPositions={playerPositions}\r\n              wsRef={ws} \r\n            />\r\n          </div>\r\n          \r\n          <div className=\"board-controls-section\">\r\n            <button \r\n              className=\"clearBoardBtn\" \r\n              onClick={handleClearBoard}\r\n            >\r\n              Clear Board\r\n            </button>\r\n            <button \r\n              className=\"checkSolutionBtn\" \r\n              onClick={handleCheckSolution}\r\n            >\r\n              Check Solution\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"right-section\">\r\n          <div className=\"chatBox\">\r\n            <div className=\"chatLog\" ref={chatLogRef}>\r\n              {chatMessages.map((msg, index) => (\r\n                <div key={index}>\r\n                  <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\r\n                  <span className=\"message\">{msg.message}</span>\r\n                  <span className=\"time\">\r\n                    {new Date(msg.time).toLocaleTimeString([], {\r\n                      hour: '2-digit',\r\n                      minute: '2-digit',\r\n                      hour12: true,\r\n                    })}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"chatInput\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatInput}\r\n                onChange={(e) => setChatInput(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    sendChatMessage();\r\n                  }\r\n                }}\r\n                placeholder=\"Type to chat\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"players-section\">\r\n            <div className=\"clientInfo\">\r\n              <span>You are:</span>\r\n              <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\r\n            </div>\r\n\r\n            <h3 className=\"playerHeader\">Connected Players:</h3>\r\n\r\n            <div className=\"playerList\">\r\n              <ul>\r\n                {players.map((player, index) => (\r\n                  <li key={index} style={{ color: player.color }}>\r\n                    {player.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,SAAS,CAAEC,WAAW,KAAQ,kBAAkB,CACzD,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,MAAO,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtB,QAAS,CAAAC,IAAIA,CAAAC,IAAA,CAAiF,IAAhF,CAAEC,KAAK,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,GAAG,CAAEC,GAAG,CAAEC,eAAe,CAAEC,KAAM,CAAC,CAAAR,IAAA,CAC1F,KAAM,CAAAS,YAAY,CAAIC,KAAK,EAAK,CAC9B,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAACX,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,CAC/C,GAAI,UAAU,CAACC,IAAI,CAACH,UAAU,CAAC,CAAE,CAC/BR,QAAQ,CAACQ,UAAU,CAAC,CACtB,CACF,CAAC,CAED;AACA,KAAM,CAAAI,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAIP,KAAK,EAAIA,KAAK,CAACQ,OAAO,EAAIR,KAAK,CAACQ,OAAO,CAACC,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CACzEX,KAAK,CAACQ,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAChCC,IAAI,CAAE,eAAe,CACrBC,QAAQ,CAAE,CAAEnB,GAAG,CAAEC,GAAI,CACvB,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAED;AACA,GAAI,CAAAmB,SAAS,CAAGvB,UAAU,CAAG,MAAM,CAAG,mBAAmB,CACzD,GAAIE,WAAW,CAAE,CACfqB,SAAS,EAAI,iBAAiB,CAChC,CAEA;AACA,KAAM,CAAAC,gBAAgB,CAAGnB,eAAe,CACrCoB,MAAM,CAACC,MAAM,EAAIA,MAAM,CAACJ,QAAQ,CAACnB,GAAG,GAAKA,GAAG,EAAIuB,MAAM,CAACJ,QAAQ,CAAClB,GAAG,GAAKA,GAAG,CAAC,CAC5EuB,GAAG,CAACD,MAAM,EAAI,CACb,MAAO,CACLE,SAAS,CAAE,mBAAmBF,MAAM,CAACG,KAAK,EAAE,CAC5CC,MAAM,CAAE,CAAC,CACTR,QAAQ,CAAE,UACZ,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,CAAC,EAAI,CAAC,CAAC,CAEb,mBACE5B,IAAA,UACE2B,IAAI,CAAC,MAAM,CACXtB,KAAK,CAAEA,KAAM,CACbE,QAAQ,CAAED,UAAU,CAAGO,YAAY,CAAGwB,SAAU,CAChDC,OAAO,CAAEnB,WAAY,CACrBoB,QAAQ,CAAE,CAACjC,UAAW,CACtBkC,SAAS,CAAC,GAAG,CACbC,SAAS,CAAEZ,SAAU,CACrBa,KAAK,CAAEZ,gBAAiB,CACzB,CAAC,CAEN,CAEA,QAAS,CAAAa,SAASA,CAAAC,KAAA,CAA2F,IAA1F,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,SAAS,CAAEC,SAAS,CAAEC,cAAc,CAAEtC,eAAe,CAAEC,KAAM,CAAC,CAAAgC,KAAA,CACzG,KAAM,CAAAM,kBAAkB,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEC,CAAC,GACxDJ,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEE,CAAC,GAAKX,QAAQ,CAACW,CAAC,CAAC,CAACD,CAAC,CAAC,CACpD,CAAC,CAED,mBACEvD,IAAA,QAAKyC,SAAS,CAAC,WAAW,CAAAgB,QAAA,CACvBP,kBAAkB,CAACjB,GAAG,CAAC,CAACxB,GAAG,CAAEiD,QAAQ,gBACpC1D,IAAA,QAAoByC,SAAS,CAAC,UAAU,CAAAgB,QAAA,CACrChD,GAAG,CAACwB,GAAG,CAAC,CAAC0B,IAAI,CAAEC,QAAQ,GAAK,CAC3B;AACA,KAAM,CAAAC,SAAS,CAAGd,SAAS,CAAGa,QAAQ,CACtC,KAAM,CAAAE,SAAS,CAAGd,SAAS,CAAGU,QAAQ,CAEtC;AACA,KAAM,CAAAlD,WAAW,CAAGyC,cAAc,CAACc,IAAI,CACrCJ,IAAI,EAAIA,IAAI,CAAClD,GAAG,GAAKoD,SAAS,EAAIF,IAAI,CAACjD,GAAG,GAAKoD,SACjD,CAAC,CAED,mBACE9D,IAAA,CAACG,IAAI,EAEHE,KAAK,CAAEsD,IAAI,CAACtD,KAAM,CAClBC,UAAU,CAAEqD,IAAI,CAACrD,UAAW,CAC5BE,WAAW,CAAEA,WAAY,CACzBC,GAAG,CAAEoD,SAAU,CACfnD,GAAG,CAAEoD,SAAU,CACfvD,QAAQ,CAAGF,KAAK,EACdyC,YAAY,CAACe,SAAS,CAAEC,SAAS,CAAEzD,KAAK,CACzC,CACDM,eAAe,CAAEA,eAAgB,CACjCC,KAAK,CAAEA,KAAM,EAVRgD,QAWN,CAAC,CAEN,CAAC,CAAC,EA1BMF,QA2BL,CACN,CAAC,CACC,CAAC,CAEV,CAEA,QAAS,CAAAM,SAASA,CAAAC,KAAA,CAAqE,IAApE,CAAEpB,QAAQ,CAAEC,YAAY,CAAEG,cAAc,CAAEtC,eAAe,CAAEC,KAAM,CAAC,CAAAqD,KAAA,CACnF,mBACEjE,IAAA,QAAKyC,SAAS,CAAC,WAAW,CAAAgB,QAAA,CACvBN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEY,OAAO,gBACpClE,IAAA,QAAmByC,SAAS,CAAC,UAAU,CAAAgB,QAAA,CACpCN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEa,OAAO,gBACpCnE,IAAA,CAAC2C,SAAS,EAERE,QAAQ,CAAEA,QAAQ,CAAC5B,KAAK,CAACiD,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAG,CAAC,CAAG,CAAC,CAAC,CAACjC,GAAG,CAAExB,GAAG,EAC7DA,GAAG,CAACQ,KAAK,CAACkD,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAG,CAAC,CAAG,CAAC,CACxC,CAAE,CACFrB,YAAY,CAAEA,YAAa,CAC3BC,SAAS,CAAEmB,OAAO,CAAG,CAAE,CACvBlB,SAAS,CAAEmB,OAAO,CAAG,CAAE,CACvBlB,cAAc,CAAEA,cAAe,CAC/BtC,eAAe,CAAEA,eAAgB,CACjCC,KAAK,CAAEA,KAAM,EATRuD,OAUN,CACF,CAAC,EAdMD,OAeL,CACN,CAAC,CACC,CAAC,CAEV,CAEA;AACA,GAAI,CAAAE,QAAQ,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC/C,GAAI,CAACF,QAAQ,CAAE,CACbA,QAAQ,CAAGG,MAAM,CAACC,UAAU,CAAC,CAAC,CAC9BH,YAAY,CAACI,OAAO,CAAC,UAAU,CAAEL,QAAQ,CAAC,CAC5C,CAEA,QAAS,CAAAM,UAAUA,CAAA,CAAG,CACpB,KAAM,CAAEC,QAAQ,CAAEC,WAAY,CAAC,CAAGhF,SAAS,CAAC,CAAC,CAC7C,KAAM,CAAAiF,QAAQ,CAAGhF,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAC8E,QAAQ,CAAEG,WAAW,CAAC,CAAGrF,QAAQ,CAACsF,QAAQ,CAACH,WAAW,CAAE,EAAE,CAAC,EAAI,IAAI,CAAC,CAC3E,KAAM,CAAC/B,QAAQ,CAAEmC,WAAW,CAAC,CAAGvF,QAAQ,CAAC0D,KAAK,CAAC,CAAC,CAAC,CAAC8B,IAAI,CAAC9B,KAAK,CAAC,CAAC,CAAC,CAAC8B,IAAI,CAAC,CAAE5E,KAAK,CAAE,EAAE,CAAEC,UAAU,CAAE,IAAK,CAAC,CAAC,CAAC,CAAC,CACvG,KAAM,CAAC4E,WAAW,CAAEC,cAAc,CAAC,CAAG1F,QAAQ,CAAC,mBAAmB,CAAC,CACnE,KAAM,CAAC2F,UAAU,CAAEC,aAAa,CAAC,CAAG5F,QAAQ,CAAC,CAAE6F,IAAI,CAAE,EAAE,CAAEnD,KAAK,CAAE,EAAG,CAAC,CAAC,CACrE,KAAM,CAACoD,OAAO,CAAEC,UAAU,CAAC,CAAG/F,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACgG,SAAS,CAAEC,YAAY,CAAC,CAAGjG,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACkG,YAAY,CAAEC,eAAe,CAAC,CAAGnG,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACwD,cAAc,CAAE4C,iBAAiB,CAAC,CAAGpG,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACkB,eAAe,CAAEmF,kBAAkB,CAAC,CAAGrG,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACsG,eAAe,CAAEC,kBAAkB,CAAC,CAAGvG,QAAQ,CAAC,KAAK,CAAC,CAE7D,KAAM,CAAAwG,UAAU,CAAGtG,MAAM,CAAC,IAAI,CAAC,CAC/B,KAAM,CAAAuG,EAAE,CAAGvG,MAAM,CAAC,IAAI,CAAC,CAEvBD,SAAS,CAAC,IAAM,CACd;AACA,GAAIuG,UAAU,CAAC7E,OAAO,CAAE,CACtB6E,UAAU,CAAC7E,OAAO,CAAC+E,SAAS,CAAGF,UAAU,CAAC7E,OAAO,CAACgF,YAAY,CAChE,CACF,CAAC,CAAE,CAACT,YAAY,CAAC,CAAC,CAElBjG,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAA2G,KAAK,CAAG,mEAAmE,CACjFC,OAAO,CAACC,GAAG,CAAC,8BAA8BF,KAAK,EAAE,CAAC,CAElDH,EAAE,CAAC9E,OAAO,CAAG,GAAI,CAAAE,SAAS,CAAC+E,KAAK,CAAC,CAEnCH,EAAE,CAAC9E,OAAO,CAACoF,MAAM,CAAG,IAAM,CACxBF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CP,kBAAkB,CAAC,KAAK,CAAC,CACzBE,EAAE,CAAC9E,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,UAAU,CAChByC,QAAQ,CACRO,QAAQ,CAAEA,QACZ,CAAC,CAAC,CAAC,CACHuB,EAAE,CAAC9E,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAE,UAAW,CAAC,CAAC,CAAC,CACvD,CAAC,CAECuE,EAAE,CAAC9E,OAAO,CAACqF,OAAO,CAAIC,KAAK,EAAK,CAC9BJ,OAAO,CAACI,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxCV,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAEDE,EAAE,CAAC9E,OAAO,CAACuF,SAAS,CAAI7F,KAAK,EAAK,CAChC,KAAM,CAAA8F,IAAI,CAAGnF,IAAI,CAACoF,KAAK,CAAC/F,KAAK,CAAC8F,IAAI,CAAC,CAEnC,GAAIA,IAAI,CAACjF,IAAI,GAAK,QAAQ,CAAE,CAC1B;AACA,KAAM,CAAAmF,WAAW,CAAG3D,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEI,QAAQ,GACxDP,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEM,QAAQ,IAAM,CAC1CvD,KAAK,CAAEuG,IAAI,CAACG,KAAK,CAACnD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACrD,KAAK,CAAE;AAC7CC,UAAU,CAAEsG,IAAI,CAACG,KAAK,CAACnD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACpD,UAAY;AACzD,CAAC,CAAC,CACJ,CAAC,CAED0E,WAAW,CAAC8B,WAAW,CAAC,CAAE;AAC1B3B,cAAc,CAACyB,IAAI,CAACI,KAAK,CAAC,CAAE;AAE5B,GAAIJ,IAAI,CAACjC,QAAQ,CAAE,CACjBG,WAAW,CAAC8B,IAAI,CAACjC,QAAQ,CAAC,CAC5B,CAEA,GAAIiC,IAAI,CAACK,MAAM,CAAE,CACf5B,aAAa,CAACuB,IAAI,CAACK,MAAM,CAAC,CAAE;AAC9B,CACF,CAAC,IAAM,IAAIL,IAAI,CAACjF,IAAI,GAAK,SAAS,CAAE,CAClC6D,UAAU,CAACoB,IAAI,CAACrB,OAAO,CAAC,CAAE;AAC5B,CAAC,IAAM,IAAIqB,IAAI,CAACjF,IAAI,GAAK,aAAa,CAAE,CACtCiE,eAAe,CAACgB,IAAI,CAACM,QAAQ,CAAC,CAAE;AAClC,CAAC,IAAM,IAAIN,IAAI,CAACjF,IAAI,GAAK,aAAa,CAAE,CACtCkE,iBAAiB,CAACe,IAAI,CAAC3D,cAAc,CAAC,CACxC,CAAC,IAAM,IAAI2D,IAAI,CAACjF,IAAI,GAAK,WAAW,CAAE,CACpC;AACA,KAAM,CAAAmF,WAAW,CAAG3D,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEI,QAAQ,GACxDP,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEM,QAAQ,IAAM,CAC1CvD,KAAK,CAAEuG,IAAI,CAACG,KAAK,CAACnD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACrD,KAAK,CAC3CC,UAAU,CAAEsG,IAAI,CAACG,KAAK,CAACnD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACpD,UAC7C,CAAC,CAAC,CACJ,CAAC,CAED0E,WAAW,CAAC8B,WAAW,CAAC,CACxB3B,cAAc,CAACyB,IAAI,CAACI,KAAK,CAAC,CAC1B,GAAIJ,IAAI,CAACjC,QAAQ,CAAE,CACjBG,WAAW,CAAC8B,IAAI,CAACjC,QAAQ,CAAC,CAC5B,CACAkB,iBAAiB,CAACe,IAAI,CAAC3D,cAAc,CAAC,CAEtC;AACA,GAAI2D,IAAI,CAACjG,eAAe,CAAE,CACxBmF,kBAAkB,CAACc,IAAI,CAACjG,eAAe,CAAC,CAC1C,CACF,CAAC,IAAM,IAAIiG,IAAI,CAACjF,IAAI,GAAK,iBAAiB,CAAE,CAC1CmE,kBAAkB,CAACc,IAAI,CAACO,SAAS,CAAC,CACpC,CAAC,IAAM,IAAIP,IAAI,CAACjF,IAAI,GAAK,gBAAgB,CAAE,CACzC;AACAyF,KAAK,CAAC,kDAAkD,CAAC,CACzDvC,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CAAC,CAEDqB,EAAE,CAAC9E,OAAO,CAACiG,OAAO,CAAG,IAAM,CACzBf,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACnD,CAAC,CAED,MAAO,IAAM,CACX,GAAIL,EAAE,CAAC9E,OAAO,CAAE,CACd8E,EAAE,CAAC9E,OAAO,CAACkG,KAAK,CAAC,CAAC,CACpB,CACF,CAAC,CACH,CAAC,CAAE,CAAC3C,QAAQ,CAAEE,QAAQ,CAAC,CAAC,CAExB,KAAM,CAAA0C,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI9B,SAAS,CAAC+B,IAAI,CAAC,CAAC,GAAK,EAAE,EAAItB,EAAE,CAAC9E,OAAO,EAAI8E,EAAE,CAAC9E,OAAO,CAACC,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CACrF,KAAM,CAAAkG,OAAO,CAAG,CACdC,IAAI,CAAEtC,UAAU,CAACE,IAAI,CACrBnD,KAAK,CAAEiD,UAAU,CAACjD,KAAK,CACvBwF,IAAI,CAAElC,SAAS,CACfd,QAAQ,CAAEA,QAAQ,EAAI,CACxB,CAAC,CAEDuB,EAAE,CAAC9E,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAE8F,OAAQ,CAAC,CAAC,CAAC,CAC1D/B,YAAY,CAAC,EAAE,CAAC,CAClB,CACF,CAAC,CAED,KAAM,CAAAkC,mBAAmB,CAAGA,CAAA,GAAM,CAChC,GAAI1B,EAAE,CAAC9E,OAAO,EAAI8E,EAAE,CAAC9E,OAAO,CAACC,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CAC1D2E,EAAE,CAAC9E,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,eACR,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAAkG,gBAAgB,CAAGA,CAACpH,GAAG,CAAEC,GAAG,CAAEL,KAAK,GAAK,CAC5C;AACA,KAAM,CAAAyH,OAAO,CAAGjF,QAAQ,CAACZ,GAAG,CAAC,CAAC8F,CAAC,CAAErE,QAAQ,GACvCqE,CAAC,CAAC9F,GAAG,CAAC,CAAC0B,IAAI,CAAEC,QAAQ,GACnBF,QAAQ,GAAKjD,GAAG,EAAImD,QAAQ,GAAKlD,GAAG,CAChC,CAAE,GAAGiD,IAAI,CAAEtD,KAAM,CAAC,CAClBsD,IACN,CACF,CAAC,CAED;AACAqB,WAAW,CAAC8C,OAAO,CAAC,CAEpB;AACAjC,iBAAiB,CAACmC,IAAI,EAAIA,IAAI,CAACjG,MAAM,CAAC4B,IAAI,EAAI,EAAEA,IAAI,CAAClD,GAAG,GAAKA,GAAG,EAAIkD,IAAI,CAACjD,GAAG,GAAKA,GAAG,CAAC,CAAC,CAAC,CAEvF,GAAIwF,EAAE,CAAC9E,OAAO,EAAI8E,EAAE,CAAC9E,OAAO,CAACC,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CAC1D;AACA,KAAM,CAAA0G,cAAc,CAAG9E,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEI,QAAQ,GAC3DP,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEM,QAAQ,IAAM,CAC1CvD,KAAK,CAAEyH,OAAO,CAAClE,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACrD,KAAK,CACxCC,UAAU,CAAEwH,OAAO,CAAClE,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACpD,UAC1C,CAAC,CAAC,CACJ,CAAC,CAED;AACA4F,EAAE,CAAC9E,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,QAAQ,CACdoF,KAAK,CAAEkB,cAAc,CACrBC,WAAW,CAAE,CACXzH,GAAG,CAAEA,GAAG,CACRC,GAAG,CAAEA,GACP,CACF,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAAyH,gBAAgB,CAAGA,CAAA,GAAM,CAC7B;AACA,KAAM,CAAAC,WAAW,CAAGvF,QAAQ,CAACZ,GAAG,CAACxB,GAAG,EAClCA,GAAG,CAACwB,GAAG,CAAC0B,IAAI,GAAK,CACf,GAAGA,IAAI,CACPtD,KAAK,CAAEsD,IAAI,CAACrD,UAAU,CAAG,EAAE,CAAGqD,IAAI,CAACtD,KACrC,CAAC,CAAC,CACJ,CAAC,CAED;AACA2E,WAAW,CAACoD,WAAW,CAAC,CACxBvC,iBAAiB,CAAC,EAAE,CAAC,CAErB,GAAIK,EAAE,CAAC9E,OAAO,EAAI8E,EAAE,CAAC9E,OAAO,CAACC,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CAC1D;AACA2E,EAAE,CAAC9E,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,YACR,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAA0G,kBAAkB,CAAGA,CAAA,GAAM,CAC/BxD,QAAQ,CAAC,GAAG,CAAC,CACf,CAAC,CAED,GAAIkB,eAAe,CAAE,CACnB,mBACE7F,KAAA,QAAAuD,QAAA,eACEzD,IAAA,CAACF,MAAM,GAAE,CAAC,cACVI,KAAA,QAAKuC,SAAS,CAAC,iBAAiB,CAAAgB,QAAA,eAC9BzD,IAAA,OAAAyD,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzBzD,IAAA,MAAAyD,QAAA,CAAG,+DAA6D,CAAG,CAAC,cACpEzD,IAAA,WAAQyC,SAAS,CAAC,aAAa,CAAC6F,OAAO,CAAED,kBAAmB,CAAA5E,QAAA,CAAC,4BAE7D,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,CAEV,CAEA,mBACEvD,KAAA,QAAAuD,QAAA,eACEzD,IAAA,CAACF,MAAM,GAAE,CAAC,cACVE,IAAA,QAAKyC,SAAS,CAAC,aAAa,CAAAgB,QAAA,CAAEyB,WAAW,CAAM,CAAC,cAEhDhF,KAAA,QAAKuC,SAAS,CAAC,eAAe,CAAAgB,QAAA,eAC5BvD,KAAA,QAAKuC,SAAS,CAAC,cAAc,CAAAgB,QAAA,eAC3BzD,IAAA,QAAKyC,SAAS,CAAC,eAAe,CAAAgB,QAAA,cAC5BzD,IAAA,CAACgE,SAAS,EACRnB,QAAQ,CAAEA,QAAS,CACnBC,YAAY,CAAE+E,gBAAiB,CAC/B5E,cAAc,CAAEA,cAAe,CAC/BtC,eAAe,CAAEA,eAAgB,CACjCC,KAAK,CAAEsF,EAAG,CACX,CAAC,CACC,CAAC,cAENhG,KAAA,QAAKuC,SAAS,CAAC,wBAAwB,CAAAgB,QAAA,eACrCzD,IAAA,WACEyC,SAAS,CAAC,eAAe,CACzB6F,OAAO,CAAEH,gBAAiB,CAAA1E,QAAA,CAC3B,aAED,CAAQ,CAAC,cACTzD,IAAA,WACEyC,SAAS,CAAC,kBAAkB,CAC5B6F,OAAO,CAAEV,mBAAoB,CAAAnE,QAAA,CAC9B,gBAED,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,cAENvD,KAAA,QAAKuC,SAAS,CAAC,eAAe,CAAAgB,QAAA,eAC5BvD,KAAA,QAAKuC,SAAS,CAAC,SAAS,CAAAgB,QAAA,eACtBzD,IAAA,QAAKyC,SAAS,CAAC,SAAS,CAAC8F,GAAG,CAAEtC,UAAW,CAAAxC,QAAA,CACtCkC,YAAY,CAAC1D,GAAG,CAAC,CAACuG,GAAG,CAAEC,KAAK,gBAC3BvI,KAAA,QAAAuD,QAAA,eACEvD,KAAA,WAAQwC,KAAK,CAAE,CAAEP,KAAK,CAAEqG,GAAG,CAACrG,KAAK,EAAI,MAAO,CAAE,CAAAsB,QAAA,EAAE+E,GAAG,CAACd,IAAI,CAAC,GAAC,EAAQ,CAAC,cACnE1H,IAAA,SAAMyC,SAAS,CAAC,SAAS,CAAAgB,QAAA,CAAE+E,GAAG,CAACf,OAAO,CAAO,CAAC,cAC9CzH,IAAA,SAAMyC,SAAS,CAAC,MAAM,CAAAgB,QAAA,CACnB,GAAI,CAAAiF,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC,CAACC,kBAAkB,CAAC,EAAE,CAAE,CACzCC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,IACV,CAAC,CAAC,CACE,CAAC,GATCN,KAUL,CACN,CAAC,CACC,CAAC,cAENzI,IAAA,QAAKyC,SAAS,CAAC,WAAW,CAAAgB,QAAA,cACxBzD,IAAA,UACE2B,IAAI,CAAC,MAAM,CACXtB,KAAK,CAAEoF,SAAU,CACjBlF,QAAQ,CAAGyI,CAAC,EAAKtD,YAAY,CAACsD,CAAC,CAAChI,MAAM,CAACX,KAAK,CAAE,CAC9C4I,SAAS,CAAGD,CAAC,EAAK,CAChB,GAAIA,CAAC,CAACE,GAAG,GAAK,OAAO,CAAE,CACrB3B,eAAe,CAAC,CAAC,CACnB,CACF,CAAE,CACF4B,WAAW,CAAC,cAAc,CAC3B,CAAC,CACC,CAAC,EACH,CAAC,cAENjJ,KAAA,QAAKuC,SAAS,CAAC,iBAAiB,CAAAgB,QAAA,eAC9BvD,KAAA,QAAKuC,SAAS,CAAC,YAAY,CAAAgB,QAAA,eACzBzD,IAAA,SAAAyD,QAAA,CAAM,UAAQ,CAAM,CAAC,cACrBvD,KAAA,SAAMwC,KAAK,CAAE,CAAEP,KAAK,CAAEiD,UAAU,CAACjD,KAAM,CAAE,CAAAsB,QAAA,EAAC,GAAC,CAAC2B,UAAU,CAACE,IAAI,EAAO,CAAC,EAChE,CAAC,cAENtF,IAAA,OAAIyC,SAAS,CAAC,cAAc,CAAAgB,QAAA,CAAC,oBAAkB,CAAI,CAAC,cAEpDzD,IAAA,QAAKyC,SAAS,CAAC,YAAY,CAAAgB,QAAA,cACzBzD,IAAA,OAAAyD,QAAA,CACG8B,OAAO,CAACtD,GAAG,CAAC,CAACD,MAAM,CAAEyG,KAAK,gBACzBzI,IAAA,OAAgB0C,KAAK,CAAE,CAAEP,KAAK,CAAEH,MAAM,CAACG,KAAM,CAAE,CAAAsB,QAAA,CAC5CzB,MAAM,CAACsD,IAAI,EADLmD,KAEL,CACL,CAAC,CACA,CAAC,CACF,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAA/D,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}