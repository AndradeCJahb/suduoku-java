{"ast":null,"code":"class WebSocketManager {\n  constructor() {\n    this.ws = null;\n    this.listeners = [];\n    this.errorListeners = [];\n    this.messageQueue = []; // Add a queue for messages\n    this.isConnected = false; // Track connection state\n  }\n  connect(url) {\n    if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n      console.log(\"Attempting to connect to WebSocket server...\");\n      this.ws = new WebSocket(url);\n      this.ws.onopen = () => {\n        console.log(\"Connected to WebSocket server\");\n        this.isConnected = true;\n\n        // Process any queued messages\n        while (this.messageQueue.length > 0) {\n          const message = this.messageQueue.shift();\n          this.sendImmediately(message);\n        }\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          this.listeners.forEach(listener => listener(data));\n        } catch (error) {\n          console.error(\"Error parsing message:\", error);\n        }\n      };\n      this.ws.onerror = error => {\n        console.error(\"WebSocket error:\", error);\n        this.isConnected = false;\n        this.errorListeners.forEach(listener => listener(error));\n      };\n      this.ws.onclose = () => {\n        console.log(\"WebSocket connection closed\");\n        this.isConnected = false;\n        // Attempt to reconnect\n        setTimeout(() => this.connect(url), 3000);\n      };\n    }\n  }\n  sendImmediately(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const messageString = JSON.stringify(message);\n      this.ws.send(messageString);\n      return true;\n    }\n    return false;\n  }\n  send(message) {\n    if (this.isConnected && this.sendImmediately(message)) {\n      return true;\n    } else {\n      this.messageQueue.push(message);\n      return false;\n    }\n  }\n  addListener(listener) {\n    this.listeners.push(listener);\n  }\n  removeListener(listener) {\n    this.listeners = this.listeners.filter(l => l !== listener);\n  }\n}\nconst webSocketManager = new WebSocketManager();\nexport default webSocketManager;","map":{"version":3,"names":["WebSocketManager","constructor","ws","listeners","errorListeners","messageQueue","isConnected","connect","url","readyState","WebSocket","CLOSED","console","log","onopen","length","message","shift","sendImmediately","onmessage","event","data","JSON","parse","forEach","listener","error","onerror","onclose","setTimeout","OPEN","messageString","stringify","send","push","addListener","removeListener","filter","l","webSocketManager"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/WebSocketManager.js"],"sourcesContent":["class WebSocketManager {\n    constructor() {\n        this.ws = null;\n        this.listeners = [];\n        this.errorListeners = [];\n        this.messageQueue = []; // Add a queue for messages\n        this.isConnected = false; // Track connection state\n    }\n\n    connect(url) {\n        if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n            console.log(\"Attempting to connect to WebSocket server...\");\n            this.ws = new WebSocket(url);\n\n            this.ws.onopen = () => {\n                console.log(\"Connected to WebSocket server\");\n                this.isConnected = true;\n\n                // Process any queued messages\n                while (this.messageQueue.length > 0) {\n                    const message = this.messageQueue.shift();\n                    this.sendImmediately(message);\n                }\n            };\n\n            this.ws.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    this.listeners.forEach((listener) => listener(data));\n                } catch (error) {\n                    console.error(\"Error parsing message:\", error);\n                }\n            };\n\n            this.ws.onerror = (error) => {\n                console.error(\"WebSocket error:\", error);\n                this.isConnected = false;\n                this.errorListeners.forEach((listener) => listener(error));\n            };\n\n            this.ws.onclose = () => {\n                console.log(\"WebSocket connection closed\");\n                this.isConnected = false;\n                // Attempt to reconnect\n                setTimeout(() => this.connect(url), 3000);\n            };\n        }\n    }\n\n    sendImmediately(message) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const messageString = JSON.stringify(message);\n            this.ws.send(messageString);\n            return true;\n        }\n        return false;\n    }\n\n    send(message) {\n        if (this.isConnected && this.sendImmediately(message)) {\n            return true;\n        } else {\n            this.messageQueue.push(message);\n            return false;\n        }\n    }\n\n    addListener(listener) {\n        this.listeners.push(listener);\n    }\n\n    removeListener(listener) {\n        this.listeners = this.listeners.filter((l) => l !== listener);\n    }\n}\n\nconst webSocketManager = new WebSocketManager();\nexport default webSocketManager;\n"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,EAAE,GAAG,IAAI;IACd,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,YAAY,GAAG,EAAE,CAAC,CAAC;IACxB,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC,CAAC;EAC9B;EAEAC,OAAOA,CAACC,GAAG,EAAE;IACT,IAAI,CAAC,IAAI,CAACN,EAAE,IAAI,IAAI,CAACA,EAAE,CAACO,UAAU,KAAKC,SAAS,CAACC,MAAM,EAAE;MACrDC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D,IAAI,CAACX,EAAE,GAAG,IAAIQ,SAAS,CAACF,GAAG,CAAC;MAE5B,IAAI,CAACN,EAAE,CAACY,MAAM,GAAG,MAAM;QACnBF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5C,IAAI,CAACP,WAAW,GAAG,IAAI;;QAEvB;QACA,OAAO,IAAI,CAACD,YAAY,CAACU,MAAM,GAAG,CAAC,EAAE;UACjC,MAAMC,OAAO,GAAG,IAAI,CAACX,YAAY,CAACY,KAAK,CAAC,CAAC;UACzC,IAAI,CAACC,eAAe,CAACF,OAAO,CAAC;QACjC;MACJ,CAAC;MAED,IAAI,CAACd,EAAE,CAACiB,SAAS,GAAIC,KAAK,IAAK;QAC3B,IAAI;UACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;UACnC,IAAI,CAAClB,SAAS,CAACqB,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACJ,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,OAAOK,KAAK,EAAE;UACZd,OAAO,CAACc,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAClD;MACJ,CAAC;MAED,IAAI,CAACxB,EAAE,CAACyB,OAAO,GAAID,KAAK,IAAK;QACzBd,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxC,IAAI,CAACpB,WAAW,GAAG,KAAK;QACxB,IAAI,CAACF,cAAc,CAACoB,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,KAAK,CAAC,CAAC;MAC9D,CAAC;MAED,IAAI,CAACxB,EAAE,CAAC0B,OAAO,GAAG,MAAM;QACpBhB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,IAAI,CAACP,WAAW,GAAG,KAAK;QACxB;QACAuB,UAAU,CAAC,MAAM,IAAI,CAACtB,OAAO,CAACC,GAAG,CAAC,EAAE,IAAI,CAAC;MAC7C,CAAC;IACL;EACJ;EAEAU,eAAeA,CAACF,OAAO,EAAE;IACrB,IAAI,IAAI,CAACd,EAAE,IAAI,IAAI,CAACA,EAAE,CAACO,UAAU,KAAKC,SAAS,CAACoB,IAAI,EAAE;MAClD,MAAMC,aAAa,GAAGT,IAAI,CAACU,SAAS,CAAChB,OAAO,CAAC;MAC7C,IAAI,CAACd,EAAE,CAAC+B,IAAI,CAACF,aAAa,CAAC;MAC3B,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EAEAE,IAAIA,CAACjB,OAAO,EAAE;IACV,IAAI,IAAI,CAACV,WAAW,IAAI,IAAI,CAACY,eAAe,CAACF,OAAO,CAAC,EAAE;MACnD,OAAO,IAAI;IACf,CAAC,MAAM;MACH,IAAI,CAACX,YAAY,CAAC6B,IAAI,CAAClB,OAAO,CAAC;MAC/B,OAAO,KAAK;IAChB;EACJ;EAEAmB,WAAWA,CAACV,QAAQ,EAAE;IAClB,IAAI,CAACtB,SAAS,CAAC+B,IAAI,CAACT,QAAQ,CAAC;EACjC;EAEAW,cAAcA,CAACX,QAAQ,EAAE;IACrB,IAAI,CAACtB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkC,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKb,QAAQ,CAAC;EACjE;AACJ;AAEA,MAAMc,gBAAgB,GAAG,IAAIvC,gBAAgB,CAAC,CAAC;AAC/C,eAAeuC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}