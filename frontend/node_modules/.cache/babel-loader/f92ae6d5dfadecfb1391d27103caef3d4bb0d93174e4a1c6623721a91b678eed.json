{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport \"../index.css\";\nimport webSocketManager from \"./WebSocketManager\";\nimport SudokuBoard from \"./SudokuBoard\";\nimport PlayerChat from \"./PlayerChat\";\nimport Keypad from \"./Keypad\";\n\n// Check if a client ID exists in localStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet clientId = localStorage.getItem(\"clientId\");\nif (!clientId) {\n  clientId = generateUUID();\n  localStorage.setItem(\"clientId\", clientId);\n}\nfunction generateUUID() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c === \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nfunction SudokuGame() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    puzzleId: urlPuzzleId\n  } = useParams();\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\n  const [puzzleTitle, setPuzzleTitle] = useState(\"Loading puzzle...\");\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({\n    value: \"\",\n    isEditable: true\n  })));\n  const [players, setPlayers] = useState([]);\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const [focusedCell, setFocusedCell] = useState({\n    row: 5,\n    col: 5\n  });\n  const [clientInfo, setClientInfo] = useState({\n    name: \"\",\n    color: \"\"\n  });\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [incorrectCells, setIncorrectCells] = useState([]);\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    const wsUrl = \"ws://localhost:8080/ws\";\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\n    webSocketManager.connect(wsUrl);\n    const handleMessage = data => {\n      if (data.type === \"updatePuzzle\") {\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n      } else if (data.type === \"updatePlayers\") {\n        setPlayers(data.players);\n      } else if (data.type === \"updateIdentity\") {\n        setClientInfo(data.client);\n      } else if (data.type === \"updateChat\") {\n        setChatMessages(data.messages);\n      } else if (data.type === \"updatePuzzleSolved\") {\n        setPuzzleSolved(true);\n      } else if (data.type === \"updateIncorrectCells\") {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === \"updatePlayerPositions\") {\n        setPlayerPositions(data.positions);\n      } else if (data.type === \"puzzleNotFound\") {\n        alert(\"Puzzle not found. Returning to puzzle selection.\");\n        navigate(\"/\");\n      }\n    };\n    webSocketManager.addListener(handleMessage);\n\n    // Send initial messages\n    webSocketManager.send({\n      type: \"fetchIdentity\",\n      clientId\n    });\n    webSocketManager.send({\n      type: \"fetchPuzzle\",\n      clientId,\n      puzzleId\n    });\n    webSocketManager.send({\n      type: \"fetchChat\",\n      puzzleId\n    });\n    return () => {\n      webSocketManager.removeListener(handleMessage);\n      webSocketManager.send({\n        type: \"sendLeaveRoom\",\n        clientId: clientId,\n        puzzleId: puzzleId\n      });\n    };\n  }, [puzzleId, navigate]);\n  const handleKeyDown = event => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    switch (event.key) {\n      case \"ArrowUp\":\n        if (col > 0) setFocusedCell({\n          row: row,\n          col: col - 1\n        });\n        break;\n      case \"ArrowDown\":\n        if (col < 8) setFocusedCell({\n          row: row,\n          col: col + 1\n        });\n        break;\n      case \"ArrowLeft\":\n        if (row > 0) setFocusedCell({\n          row: row - 1,\n          col: col\n        });\n        break;\n      case \"ArrowRight\":\n        if (row < 8) setFocusedCell({\n          row: row + 1,\n          col: col\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    const handleKeyPress = event => handleKeyDown(event);\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  });\n  useEffect(() => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    const targetCell = document.querySelector(`input[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    if (targetCell) {\n      targetCell.focus();\n      // Ensure the cursor is always at the end of the input value\n      const valueLength = targetCell.value.length;\n      setTimeout(() => {\n        targetCell.setSelectionRange(valueLength, valueLength);\n      }, 0); // Use a timeout to ensure this runs after the focus event\n    }\n  }, [focusedCell]);\n  const handleCheckSolution = () => {\n    webSocketManager.send({\n      type: \"sendCheckSolution\",\n      puzzleId: puzzleId\n    });\n  };\n  const handleCellChange = (row, col, value) => {\n    // First check if the cell is editable\n    const currentCell = gridData[row][col];\n    if (!currentCell.isEditable) {\n      return; // Exit early if the cell is not editable\n    }\n\n    // Continue with update since the cell is editable\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n    setGridData(newGrid);\n    setPuzzleSolved(false);\n\n    // Send updates to server\n    webSocketManager.send({\n      type: \"sendIncorrectCellsUpdate\",\n      puzzleId: puzzleId,\n      row: col,\n      col: row\n    });\n    webSocketManager.send({\n      type: \"sendCellChange\",\n      puzzleId: puzzleId,\n      row: col,\n      col: row,\n      value: value || 0\n    });\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? \"\" : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    setPuzzleSolved(false);\n    webSocketManager.send({\n      type: \"sendClearBoard\",\n      puzzleId: puzzleId\n    });\n  };\n  const handleNumberClick = number => {\n    if (focusedCell) {\n      const {\n        row,\n        col\n      } = focusedCell;\n      handleCellChange(row, col, number);\n    }\n  };\n  const handleBackspaceClick = () => {\n    if (focusedCell) {\n      const {\n        row,\n        col\n      } = focusedCell;\n      handleCellChange(row, col, \"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solved-popup\",\n      style: {\n        display: puzzleSolved ? \"flex\" : \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"solved-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close-solved\",\n          onClick: () => setPuzzleSolved(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"solved-title\",\n          children: \"Puzzle Solved!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"solved-text\",\n          children: \"Congratulations! You've successfully completed the puzzle.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: [/*#__PURE__*/_jsxDEV(Keypad, {\n          onNumberClick: handleNumberClick,\n          onBackspaceClick: handleBackspaceClick,\n          handleClearBoard: handleClearBoard,\n          handleCheckSolution: handleCheckSolution,\n          gridData: gridData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SudokuBoard, {\n          puzzleTitle: puzzleTitle,\n          gridData: gridData,\n          handleCellChange: handleCellChange,\n          incorrectCells: incorrectCells,\n          playerPositions: playerPositions,\n          setFocusedCell: setFocusedCell,\n          clientId: clientId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerChat, {\n        chatMessages: chatMessages,\n        chatInput: chatInput,\n        setChatInput: setChatInput,\n        chatLogRef: chatLogRef,\n        clientInfo: clientInfo,\n        players: players,\n        puzzleId: puzzleId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n}\n_s(SudokuGame, \"Z2pGvgSBgcZAUUN09wy+e9bitRk=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = SudokuGame;\nexport default SudokuGame;\nvar _c;\n$RefreshReg$(_c, \"SudokuGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","webSocketManager","SudokuBoard","PlayerChat","Keypad","jsxDEV","_jsxDEV","clientId","localStorage","getItem","generateUUID","setItem","replace","c","r","Math","random","v","toString","SudokuGame","_s","navigate","puzzleId","urlPuzzleId","parseInt","puzzleTitle","setPuzzleTitle","gridData","setGridData","Array","fill","value","isEditable","players","setPlayers","playerPositions","setPlayerPositions","focusedCell","setFocusedCell","row","col","clientInfo","setClientInfo","name","color","chatInput","setChatInput","chatMessages","setChatMessages","incorrectCells","setIncorrectCells","puzzleSolved","setPuzzleSolved","chatLogRef","current","scrollTop","scrollHeight","wsUrl","console","log","connect","handleMessage","data","type","updatedGrid","from","length","_","rowIndex","colIndex","board","title","client","messages","positions","alert","addListener","send","removeListener","handleKeyDown","event","key","handleKeyPress","window","addEventListener","removeEventListener","targetCell","document","querySelector","focus","valueLength","setTimeout","setSelectionRange","handleCheckSolution","handleCellChange","currentCell","newGrid","map","cell","handleClearBoard","clearedGrid","handleNumberClick","number","handleBackspaceClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","onClick","onNumberClick","onBackspaceClick","_c","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport \"../index.css\";\nimport webSocketManager from \"./WebSocketManager\";\nimport SudokuBoard from \"./SudokuBoard\";\nimport PlayerChat from \"./PlayerChat\";\nimport Keypad from \"./Keypad\";\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem(\"clientId\");\nif (!clientId) {\n    clientId = generateUUID();\n    localStorage.setItem(\"clientId\", clientId);\n}\n\nfunction generateUUID() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n        /[xy]/g,\n        function (c) {\n            var r = (Math.random() * 16) | 0,\n                v = c === \"x\" ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        },\n    );\n}\n\nfunction SudokuGame() {\n    const navigate = useNavigate();\n    const { puzzleId: urlPuzzleId } = useParams();\n    const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\n    const [puzzleTitle, setPuzzleTitle] = useState(\"Loading puzzle...\");\n    const [gridData, setGridData] = useState(\n        Array(9).fill(Array(9).fill({ value: \"\", isEditable: true })),\n    );\n    const [players, setPlayers] = useState([]);\n    const [playerPositions, setPlayerPositions] = useState([]);\n    const [focusedCell, setFocusedCell] = useState({ row: 5, col: 5 });\n    const [clientInfo, setClientInfo] = useState({ name: \"\", color: \"\" });\n    const [chatInput, setChatInput] = useState(\"\");\n    const [chatMessages, setChatMessages] = useState([]);\n    const [incorrectCells, setIncorrectCells] = useState([]);\n    const [puzzleSolved, setPuzzleSolved] = useState(false);\n    const chatLogRef = useRef(null);\n\n    useEffect(() => {\n        // Scroll to the bottom of the chat log whenever messages are updated\n        if (chatLogRef.current) {\n            chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n        }\n    }, [chatMessages]);\n\n    useEffect(() => {\n        const wsUrl = \"ws://localhost:8080/ws\";\n        console.log(`Connecting to WebSocket at ${wsUrl}`);\n        webSocketManager.connect(wsUrl);\n\n        const handleMessage = (data) => {\n            if (data.type === \"updatePuzzle\") {\n                const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n                    Array.from({ length: 9 }, (_, colIndex) => ({\n                        value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n                        isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n                    })),\n                );\n                setGridData(updatedGrid);\n                setPuzzleTitle(data.title);\n            } else if (data.type === \"updatePlayers\") {\n                setPlayers(data.players);\n            } else if (data.type === \"updateIdentity\") {\n                setClientInfo(data.client);\n            } else if (data.type === \"updateChat\") {\n                setChatMessages(data.messages);\n            } else if (data.type === \"updatePuzzleSolved\") {\n                setPuzzleSolved(true);\n            } else if (data.type === \"updateIncorrectCells\") {\n                setIncorrectCells(data.incorrectCells);\n            } else if (data.type === \"updatePlayerPositions\") {\n                setPlayerPositions(data.positions);\n            } else if (data.type === \"puzzleNotFound\") {\n                alert(\"Puzzle not found. Returning to puzzle selection.\");\n                navigate(\"/\");\n            }\n        };\n\n        webSocketManager.addListener(handleMessage);\n\n        // Send initial messages\n        webSocketManager.send({ type: \"fetchIdentity\", clientId });\n        webSocketManager.send({ type: \"fetchPuzzle\", clientId, puzzleId });\n        webSocketManager.send({ type: \"fetchChat\", puzzleId });\n\n        return () => {\n            webSocketManager.removeListener(handleMessage);\n            webSocketManager.send({\n                type: \"sendLeaveRoom\",\n                clientId: clientId,\n                puzzleId: puzzleId,\n            });\n        };\n    }, [puzzleId, navigate]);\n\n    const handleKeyDown = (event) => {\n        const { row, col } = focusedCell;\n        switch (event.key) {\n            case \"ArrowUp\":\n                if (col > 0) setFocusedCell({ row: row, col: col - 1 });\n                break;\n            case \"ArrowDown\":\n                if (col < 8) setFocusedCell({ row: row, col: col + 1 });\n                break;\n            case \"ArrowLeft\":\n                if (row > 0) setFocusedCell({ row: row - 1, col: col });\n                break;\n            case \"ArrowRight\":\n                if (row < 8) setFocusedCell({ row: row + 1, col: col });\n                break;\n            default:\n                break;\n        }\n    };\n\n    useEffect(() => {\n        const handleKeyPress = (event) => handleKeyDown(event);\n\n        window.addEventListener(\"keydown\", handleKeyPress);\n        return () => {\n            window.removeEventListener(\"keydown\", handleKeyPress);\n        };\n    });\n\n    useEffect(() => {\n        const { row, col } = focusedCell;\n        const targetCell = document.querySelector(\n            `input[data-row=\"${row}\"][data-col=\"${col}\"]`,\n        );\n        if (targetCell) {\n            targetCell.focus();\n            // Ensure the cursor is always at the end of the input value\n            const valueLength = targetCell.value.length;\n            setTimeout(() => {\n                targetCell.setSelectionRange(valueLength, valueLength);\n            }, 0); // Use a timeout to ensure this runs after the focus event\n        }\n    }, [focusedCell]);\n\n    const handleCheckSolution = () => {\n        webSocketManager.send({\n            type: \"sendCheckSolution\",\n            puzzleId: puzzleId,\n        });\n    };\n\n    const handleCellChange = (row, col, value) => {\n        // First check if the cell is editable\n        const currentCell = gridData[row][col];\n        if (!currentCell.isEditable) {\n            return; // Exit early if the cell is not editable\n        }\n\n        // Continue with update since the cell is editable\n        const newGrid = gridData.map((r, rowIndex) =>\n            r.map((cell, colIndex) =>\n                rowIndex === row && colIndex === col\n                    ? { ...cell, value }\n                    : cell,\n            ),\n        );\n\n        setGridData(newGrid);\n        setPuzzleSolved(false);\n\n        // Send updates to server\n        webSocketManager.send({\n            type: \"sendIncorrectCellsUpdate\",\n            puzzleId: puzzleId,\n            row: col,\n            col: row,\n        });\n\n        webSocketManager.send({\n            type: \"sendCellChange\",\n            puzzleId: puzzleId,\n            row: col,\n            col: row,\n            value: value || 0,\n        });\n    };\n\n    const handleClearBoard = () => {\n        // Create a new grid with only locked cells\n        const clearedGrid = gridData.map((row) =>\n            row.map((cell) => ({\n                ...cell,\n                value: cell.isEditable ? \"\" : cell.value,\n            })),\n        );\n\n        // Update local state\n        setGridData(clearedGrid);\n        setIncorrectCells([]);\n        setPuzzleSolved(false);\n\n        webSocketManager.send({\n            type: \"sendClearBoard\",\n            puzzleId: puzzleId,\n        });\n    };\n\n    const handleNumberClick = (number) => {\n        if (focusedCell) {\n            const { row, col } = focusedCell;\n            handleCellChange(row, col, number);\n        }\n    };\n\n    const handleBackspaceClick = () => {\n        if (focusedCell) {\n            const { row, col } = focusedCell;\n            handleCellChange(row, col, \"\");\n        }\n    };\n\n    return (\n        <div>\n            <Header />\n\n            <div\n                className=\"solved-popup\"\n                style={{ display: puzzleSolved ? \"flex\" : \"none\" }}\n            >\n                <div className=\"solved-popup-content\">\n                    <span\n                        className=\"close-solved\"\n                        onClick={() => setPuzzleSolved(false)}\n                    >\n                        &times;\n                    </span>\n                    <h2 className=\"solved-title\">Puzzle Solved!</h2>\n                    <p className=\"solved-text\">\n                        Congratulations! You've successfully completed the\n                        puzzle.\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"app-container\">\n                <div className=\"left-section\">\n                    <Keypad\n                        onNumberClick={handleNumberClick}\n                        onBackspaceClick={handleBackspaceClick}\n                        handleClearBoard={handleClearBoard}\n                        handleCheckSolution={handleCheckSolution}\n                        gridData={gridData}\n                    />\n\n                    <SudokuBoard\n                        puzzleTitle={puzzleTitle}\n                        gridData={gridData}\n                        handleCellChange={handleCellChange}\n                        incorrectCells={incorrectCells}\n                        playerPositions={playerPositions}\n                        setFocusedCell={setFocusedCell}\n                        clientId={clientId}\n                    />\n                </div>\n\n                <PlayerChat\n                    chatMessages={chatMessages}\n                    chatInput={chatInput}\n                    setChatInput={setChatInput}\n                    chatLogRef={chatLogRef}\n                    clientInfo={clientInfo}\n                    players={players}\n                    puzzleId={puzzleId}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default SudokuGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}