{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\frontend\\\\src\\\\components\\\\PuzzleSelection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PuzzleSelection() {\n  _s();\n  const [puzzles, setPuzzles] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch('', {\n      method: \"get\",\n      headers: new Headers({\n        \"ngrok-skip-browser-warning\": \"69420\"\n      })\n    }).then(async response => {\n      // Get the raw response text\n      const rawText = await response.text();\n      try {\n        const data = JSON.parse(rawText);\n        return data;\n      } catch (parseError) {\n        throw parseError;\n      }\n    }).then(data => {\n      console.log('Setting puzzles with data:', data);\n      setPuzzles(data);\n    }).catch(err => {\n      console.error('Error fetching puzzles:', err);\n    });\n  }, []);\n  const handlePuzzleSelect = puzzleId => {\n    navigate(`/puzzle/${puzzleId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-grid\",\n        children: puzzles.map(puzzle => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"puzzle-card\",\n          onClick: () => handlePuzzleSelect(puzzle.id),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: puzzle.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"puzzle-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"difficulty\",\n              children: puzzle.difficulty || 'Medium'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status\",\n              children: puzzle.status || 'New'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, puzzle.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(PuzzleSelection, \"l7jr7+GOA5L42b8xd0Vb2n/A/zw=\", false, function () {\n  return [useNavigate];\n});\n_c = PuzzleSelection;\nexport default PuzzleSelection;\nvar _c;\n$RefreshReg$(_c, \"PuzzleSelection\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Header","jsxDEV","_jsxDEV","PuzzleSelection","_s","puzzles","setPuzzles","navigate","fetch","method","headers","Headers","then","response","rawText","text","data","JSON","parse","parseError","console","log","catch","err","error","handlePuzzleSelect","puzzleId","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","puzzle","onClick","id","title","difficulty","status","_c","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/components/PuzzleSelection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from './Header';\r\n\r\nfunction PuzzleSelection() {\r\n  const [puzzles, setPuzzles] = useState([]);\r\n  const navigate = useNavigate();\r\n  \r\n  useEffect(() => {\r\n    fetch('', {\r\n      method: \"get\",\r\n      headers: new Headers({\r\n        \"ngrok-skip-browser-warning\": \"69420\",\r\n      }),\r\n    })\r\n      .then(async response => {\r\n        // Get the raw response text\r\n        const rawText = await response.text();\r\n        try {\r\n          const data = JSON.parse(rawText);\r\n          return data;\r\n        } catch (parseError) {\r\n\r\n          throw parseError;\r\n        }\r\n      })\r\n      .then(data => {\r\n        console.log('Setting puzzles with data:', data);\r\n        setPuzzles(data);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error fetching puzzles:', err);\r\n      });\r\n  }, []);\r\n\r\n  const handlePuzzleSelect = (puzzleId) => {\r\n    navigate(`/puzzle/${puzzleId}`);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container\">        \r\n        <div className=\"puzzle-grid\">\r\n          {puzzles.map(puzzle => (\r\n            <div \r\n              key={puzzle.id} \r\n              className=\"puzzle-card\"\r\n              onClick={() => handlePuzzleSelect(puzzle.id)}\r\n            >\r\n              <h3>{puzzle.title}</h3>\r\n              <div className=\"puzzle-meta\">\r\n                <span className=\"difficulty\">{puzzle.difficulty || 'Medium'}</span>\r\n                <span className=\"status\">{puzzle.status || 'New'}</span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PuzzleSelection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}