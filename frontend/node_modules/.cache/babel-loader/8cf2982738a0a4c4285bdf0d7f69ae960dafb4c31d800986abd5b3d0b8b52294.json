{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\suduoku-java\\\\frontend\\\\src\\\\components\\\\SudokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport \"../index.css\";\nimport webSocketManager from \"./WebSocketManager\";\nimport SudokuBoard from \"./SudokuBoard\";\nimport PlayerChat from \"./PlayerChat\";\nimport Keypad from \"./Keypad\";\n\n// Check if a client ID exists in localStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet clientId = localStorage.getItem(\"clientId\");\nif (!clientId) {\n  clientId = generateUUID();\n  localStorage.setItem(\"clientId\", clientId);\n}\nfunction generateUUID() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c === \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nfunction SudokuGame() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    puzzleId: urlPuzzleId\n  } = useParams();\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\n  const [puzzleTitle, setPuzzleTitle] = useState(\"Loading puzzle...\");\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill({\n    value: \"\",\n    isEditable: true\n  })));\n  const [players, setPlayers] = useState([]);\n  const [playerPositions, setPlayerPositions] = useState([]);\n  const [focusedCell, setFocusedCell] = useState({\n    row: 5,\n    col: 5\n  });\n  const [clientInfo, setClientInfo] = useState({\n    name: \"\",\n    color: \"\"\n  });\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [incorrectCells, setIncorrectCells] = useState([]);\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    const wsUrl = \"ws://localhost:8080/ws\";\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\n    webSocketManager.connect(wsUrl);\n    const handleMessage = data => {\n      if (data.type === \"updatePuzzle\") {\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n      } else if (data.type === \"updatePlayers\") {\n        setPlayers(data.players);\n      } else if (data.type === \"updateIdentity\") {\n        setClientInfo(data.client);\n      } else if (data.type === \"updateChat\") {\n        setChatMessages(data.messages);\n      } else if (data.type === \"updatePuzzleSolved\") {\n        setPuzzleSolved(true);\n      } else if (data.type === \"updateIncorrectCells\") {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === \"updatePlayerPositions\") {\n        setPlayerPositions(data.positions);\n      } else if (data.type === \"puzzleNotFound\") {\n        alert(\"Puzzle not found. Returning to puzzle selection.\");\n        navigate(\"/\");\n      }\n    };\n    webSocketManager.addListener(handleMessage);\n\n    // Send initial messages\n    webSocketManager.send({\n      type: \"fetchIdentity\",\n      clientId\n    });\n    webSocketManager.send({\n      type: \"fetchPuzzle\",\n      clientId,\n      puzzleId\n    });\n    webSocketManager.send({\n      type: \"fetchChat\",\n      puzzleId\n    });\n    return () => {\n      webSocketManager.removeListener(handleMessage);\n      webSocketManager.send({\n        type: \"sendLeaveRoom\",\n        clientId: clientId,\n        puzzleId: puzzleId\n      });\n    };\n  }, [puzzleId, navigate]);\n  const handleKeyDown = event => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    switch (event.key) {\n      case \"ArrowUp\":\n        if (col > 0) setFocusedCell({\n          row: row,\n          col: col - 1\n        });\n        break;\n      case \"ArrowDown\":\n        if (col < 8) setFocusedCell({\n          row: row,\n          col: col + 1\n        });\n        break;\n      case \"ArrowLeft\":\n        if (row > 0) setFocusedCell({\n          row: row - 1,\n          col: col\n        });\n        break;\n      case \"ArrowRight\":\n        if (row < 8) setFocusedCell({\n          row: row + 1,\n          col: col\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    const handleKeyPress = event => handleKeyDown(event);\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  });\n  useEffect(() => {\n    const {\n      row,\n      col\n    } = focusedCell;\n    const targetCell = document.querySelector(`input[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    if (targetCell) {\n      targetCell.focus();\n      // Ensure the cursor is always at the end of the input value\n      const valueLength = targetCell.value.length;\n      setTimeout(() => {\n        targetCell.setSelectionRange(valueLength, valueLength);\n      }, 0); // Use a timeout to ensure this runs after the focus event\n    }\n  }, [focusedCell]);\n  const handleCheckSolution = () => {\n    webSocketManager.send({\n      type: \"sendCheckSolution\",\n      puzzleId: puzzleId\n    });\n  };\n  const handleCellChange = (row, col, value) => {\n    // First check if the cell is editable\n    const currentCell = gridData[row][col];\n    if (!currentCell.isEditable) {\n      return; // Exit early if the cell is not editable\n    }\n\n    // Continue with update since the cell is editable\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } : cell));\n    setGridData(newGrid);\n    setPuzzleSolved(false);\n\n    // Send updates to server\n    webSocketManager.send({\n      type: \"sendIncorrectCellsUpdate\",\n      puzzleId: puzzleId,\n      row: col,\n      col: row\n    });\n    webSocketManager.send({\n      type: \"sendCellChange\",\n      puzzleId: puzzleId,\n      row: col,\n      col: row,\n      value: value || 0\n    });\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? \"\" : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    setPuzzleSolved(false);\n    webSocketManager.send({\n      type: \"sendClearBoard\",\n      puzzleId: puzzleId\n    });\n  };\n  const handleNumberClick = number => {\n    if (focusedCell) {\n      const {\n        row,\n        col\n      } = focusedCell;\n      handleCellChange(row, col, number);\n    }\n  };\n  const handleBackspaceClick = () => {\n    if (focusedCell) {\n      const {\n        row,\n        col\n      } = focusedCell;\n      handleCellChange(row, col, \"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solved-popup\",\n      style: {\n        display: puzzleSolved ? \"flex\" : \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"solved-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close-solved\",\n          onClick: () => setPuzzleSolved(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"solved-title\",\n          children: \"Puzzle Solved!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"solved-text\",\n          children: \"Congratulations! You've successfully completed the puzzle.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(Keypad, {\n        onNumberClick: handleNumberClick,\n        onBackspaceClick: handleBackspaceClick,\n        handleClearBoard: handleClearBoard,\n        handleCheckSolution: handleCheckSolution\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SudokuBoard, {\n        gridData: gridData,\n        handleCellChange: handleCellChange,\n        incorrectCells: incorrectCells,\n        playerPositions: playerPositions,\n        setFocusedCell: setFocusedCell,\n        clientId: clientId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayerChat, {\n        chatMessages: chatMessages,\n        chatInput: chatInput,\n        setChatInput: setChatInput,\n        chatLogRef: chatLogRef,\n        clientInfo: clientInfo,\n        players: players,\n        puzzleId: puzzleId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuGame, \"Z2pGvgSBgcZAUUN09wy+e9bitRk=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = SudokuGame;\nexport default SudokuGame;\nvar _c;\n$RefreshReg$(_c, \"SudokuGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","Header","webSocketManager","SudokuBoard","PlayerChat","Keypad","jsxDEV","_jsxDEV","clientId","localStorage","getItem","generateUUID","setItem","replace","c","r","Math","random","v","toString","SudokuGame","_s","navigate","puzzleId","urlPuzzleId","parseInt","puzzleTitle","setPuzzleTitle","gridData","setGridData","Array","fill","value","isEditable","players","setPlayers","playerPositions","setPlayerPositions","focusedCell","setFocusedCell","row","col","clientInfo","setClientInfo","name","color","chatInput","setChatInput","chatMessages","setChatMessages","incorrectCells","setIncorrectCells","puzzleSolved","setPuzzleSolved","chatLogRef","current","scrollTop","scrollHeight","wsUrl","console","log","connect","handleMessage","data","type","updatedGrid","from","length","_","rowIndex","colIndex","board","title","client","messages","positions","alert","addListener","send","removeListener","handleKeyDown","event","key","handleKeyPress","window","addEventListener","removeEventListener","targetCell","document","querySelector","focus","valueLength","setTimeout","setSelectionRange","handleCheckSolution","handleCellChange","currentCell","newGrid","map","cell","handleClearBoard","clearedGrid","handleNumberClick","number","handleBackspaceClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","onClick","onNumberClick","onBackspaceClick","_c","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/SudokuGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport \"../index.css\";\r\nimport webSocketManager from \"./WebSocketManager\";\r\nimport SudokuBoard from \"./SudokuBoard\";\r\nimport PlayerChat from \"./PlayerChat\";\r\nimport Keypad from \"./Keypad\";\r\n\r\n// Check if a client ID exists in localStorage\r\nlet clientId = localStorage.getItem(\"clientId\");\r\nif (!clientId) {\r\n  clientId = generateUUID();\r\n  localStorage.setItem(\"clientId\", clientId);\r\n}\r\n\r\nfunction generateUUID() {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nfunction SudokuGame() {\r\n  const navigate = useNavigate();\r\n  const { puzzleId: urlPuzzleId } = useParams();\r\n  const [puzzleId] = useState(parseInt(urlPuzzleId) || null);\r\n  const [puzzleTitle, setPuzzleTitle] = useState(\"Loading puzzle...\");\r\n  const [gridData, setGridData] = useState(\r\n    Array(9).fill(Array(9).fill({ value: \"\", isEditable: true }))\r\n  );\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerPositions, setPlayerPositions] = useState([]);\r\n  const [focusedCell, setFocusedCell] = useState({ row: 5, col: 5 });\r\n  const [clientInfo, setClientInfo] = useState({ name: \"\", color: \"\" });\r\n  const [chatInput, setChatInput] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [incorrectCells, setIncorrectCells] = useState([]);\r\n  const [puzzleSolved, setPuzzleSolved] = useState(false);\r\n  const chatLogRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat log whenever messages are updated\r\n    if (chatLogRef.current) {\r\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    const wsUrl = \"ws://localhost:8080/ws\";\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    webSocketManager.connect(wsUrl);\r\n\r\n    const handleMessage = (data) => {\r\n      if (data.type === \"updatePuzzle\") {\r\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\r\n          Array.from({ length: 9 }, (_, colIndex) => ({\r\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\r\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\r\n          }))\r\n        );\r\n        setGridData(updatedGrid);\r\n        setPuzzleTitle(data.title);\r\n      } else if (data.type === \"updatePlayers\") {\r\n        setPlayers(data.players);\r\n      } else if (data.type === \"updateIdentity\") {\r\n        setClientInfo(data.client);\r\n      } else if (data.type === \"updateChat\") {\r\n        setChatMessages(data.messages);\r\n      } else if (data.type === \"updatePuzzleSolved\") {\r\n        setPuzzleSolved(true);\r\n      } else if (data.type === \"updateIncorrectCells\") {\r\n        setIncorrectCells(data.incorrectCells);\r\n      } else if (data.type === \"updatePlayerPositions\") {\r\n        setPlayerPositions(data.positions);\r\n      } else if (data.type === \"puzzleNotFound\") {\r\n        alert(\"Puzzle not found. Returning to puzzle selection.\");\r\n        navigate(\"/\");\r\n      }\r\n    };\r\n\r\n    webSocketManager.addListener(handleMessage);\r\n\r\n    // Send initial messages\r\n    webSocketManager.send({ type: \"fetchIdentity\", clientId });\r\n    webSocketManager.send({ type: \"fetchPuzzle\", clientId, puzzleId });\r\n    webSocketManager.send({ type: \"fetchChat\", puzzleId });\r\n\r\n    return () => {\r\n      webSocketManager.removeListener(handleMessage);\r\n      webSocketManager.send({\r\n        type: \"sendLeaveRoom\",\r\n        clientId: clientId,\r\n        puzzleId: puzzleId,\r\n      });\r\n    };\r\n  }, [puzzleId, navigate]);\r\n\r\n  const handleKeyDown = (event) => {\r\n    const { row, col } = focusedCell;\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        if (col > 0) setFocusedCell({ row: row, col: col - 1 });\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (col < 8) setFocusedCell({ row: row, col: col + 1 });\r\n        break;\r\n      case \"ArrowLeft\":\r\n        if (row > 0) setFocusedCell({ row: row - 1, col: col });\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (row < 8) setFocusedCell({ row: row + 1, col: col });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => handleKeyDown(event);\r\n\r\n    window.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { row, col } = focusedCell;\r\n    const targetCell = document.querySelector(\r\n      `input[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n    );\r\n    if (targetCell) {\r\n      targetCell.focus();\r\n      // Ensure the cursor is always at the end of the input value\r\n      const valueLength = targetCell.value.length;\r\n      setTimeout(() => {\r\n        targetCell.setSelectionRange(valueLength, valueLength);\r\n      }, 0); // Use a timeout to ensure this runs after the focus event\r\n    }\r\n  }, [focusedCell]);\r\n\r\n  const handleCheckSolution = () => {\r\n    webSocketManager.send({\r\n      type: \"sendCheckSolution\",\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleCellChange = (row, col, value) => {\r\n    // First check if the cell is editable\r\n    const currentCell = gridData[row][col];\r\n    if (!currentCell.isEditable) {\r\n      return; // Exit early if the cell is not editable\r\n    }\r\n\r\n    // Continue with update since the cell is editable\r\n    const newGrid = gridData.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) =>\r\n        rowIndex === row && colIndex === col ? { ...cell, value } : cell\r\n      )\r\n    );\r\n\r\n    setGridData(newGrid);\r\n    setPuzzleSolved(false);\r\n\r\n    // Send updates to server\r\n    webSocketManager.send({\r\n      type: \"sendIncorrectCellsUpdate\",\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n    });\r\n\r\n    webSocketManager.send({\r\n      type: \"sendCellChange\",\r\n      puzzleId: puzzleId,\r\n      row: col,\r\n      col: row,\r\n      value: value || 0,\r\n    });\r\n  };\r\n\r\n  const handleClearBoard = () => {\r\n    // Create a new grid with only locked cells\r\n    const clearedGrid = gridData.map((row) =>\r\n      row.map((cell) => ({\r\n        ...cell,\r\n        value: cell.isEditable ? \"\" : cell.value,\r\n      }))\r\n    );\r\n\r\n    // Update local state\r\n    setGridData(clearedGrid);\r\n    setIncorrectCells([]);\r\n    setPuzzleSolved(false);\r\n\r\n    webSocketManager.send({\r\n      type: \"sendClearBoard\",\r\n      puzzleId: puzzleId,\r\n    });\r\n  };\r\n\r\n  const handleNumberClick = (number) => {\r\n    if (focusedCell) {\r\n      const { row, col } = focusedCell;\r\n      handleCellChange(row, col, number);\r\n    }\r\n  };\r\n\r\n  const handleBackspaceClick = () => {\r\n    if (focusedCell) {\r\n      const { row, col } = focusedCell;\r\n      handleCellChange(row, col, \"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n\r\n      <div\r\n        className=\"solved-popup\"\r\n        style={{ display: puzzleSolved ? \"flex\" : \"none\" }}\r\n      >\r\n        <div className=\"solved-popup-content\">\r\n          <span className=\"close-solved\" onClick={() => setPuzzleSolved(false)}>\r\n            &times;\r\n          </span>\r\n          <h2 className=\"solved-title\">Puzzle Solved!</h2>\r\n          <p className=\"solved-text\">\r\n            Congratulations! You've successfully completed the puzzle.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n\r\n      <div className=\"app-container\">\r\n        <Keypad\r\n          onNumberClick={handleNumberClick}\r\n          onBackspaceClick={handleBackspaceClick}\r\n          handleClearBoard={handleClearBoard}\r\n          handleCheckSolution={handleCheckSolution}\r\n        />\r\n\r\n        <SudokuBoard\r\n          gridData={gridData}\r\n          handleCellChange={handleCellChange}\r\n          incorrectCells={incorrectCells}\r\n          playerPositions={playerPositions}\r\n          setFocusedCell={setFocusedCell}\r\n          clientId={clientId}\r\n        />\r\n\r\n        <PlayerChat\r\n          chatMessages={chatMessages}\r\n          chatInput={chatInput}\r\n          setChatInput={setChatInput}\r\n          chatLogRef={chatLogRef}\r\n          clientInfo={clientInfo}\r\n          players={players}\r\n          puzzleId={puzzleId}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}