{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\Desktop\\\\Projects\\\\sudoku\\\\suduoku\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"header\",\n    children: \"Suduoku\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = Header;\nfunction Cell({\n  value,\n  isEditable,\n  onChange,\n  isIncorrect\n}) {\n  const handleChange = event => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue); // Notify parent of the change\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: isEditable ? handleChange : undefined // Disable editing if not editable\n    ,\n    readOnly: !isEditable,\n    maxLength: \"2\" // Limit input to a single character\n    ,\n    className: isEditable ? 'cell' : 'non-editable-cell'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Cell;\nfunction ThreeGrid({\n  gridData,\n  onCellChange,\n  rowOffset,\n  colOffset\n}) {\n  // Create a transposed version of the gridData for the inner 3x3 grid\n  const transposedGridData = Array.from({\n    length: 3\n  }, (_, i) => Array.from({\n    length: 3\n  }, (_, j) => gridData[j][i]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"threeGrid\",\n    children: transposedGridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: cell.value,\n        isEditable: cell.isEditable,\n        onChange: value =>\n        // The indices need to be swapped here for the correct mapping\n        onCellChange(rowOffset + colIndex, colOffset + rowIndex, value)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c3 = ThreeGrid;\nfunction FinalGrid({\n  gridData,\n  onCellChange\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finalGrid\",\n    children: Array.from({\n      length: 3\n    }, (_, gridRow) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: Array.from({\n        length: 3\n      }, (_, gridCol) => /*#__PURE__*/_jsxDEV(ThreeGrid, {\n        gridData: gridData.slice(gridRow * 3, gridRow * 3 + 3).map(row => row.slice(gridCol * 3, gridCol * 3 + 3)),\n        onCellChange: onCellChange,\n        rowOffset: gridRow * 3,\n        colOffset: gridCol * 3\n      }, gridCol, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this))\n    }, gridRow, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n// Check if a client ID exists in localStorage\n_c4 = FinalGrid;\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\nfunction App() {\n  _s();\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n  const [puzzleTitle, setPuzzleTitle] = useState(''); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({\n    name: '',\n    color: ''\n  }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n\n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  useEffect(() => {\n    ws.current = new WebSocket(' https://dabf-2601-1c2-4503-61b0-9d5b-8d64-ba07-e34a.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      // Send the client ID to the server\n      ws.current.send(JSON.stringify({\n        type: 'identify',\n        clientId\n      }));\n\n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({\n        type: 'loadChat'\n      }));\n    };\n    ws.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => ({\n          value: data.board[colIndex][rowIndex].value,\n          // Swap row and column indices\n          isEditable: data.board[colIndex][rowIndex].isEditable // Swap row and column indices\n        })));\n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      }\n    };\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1 // Use the actual puzzle ID from state\n      };\n\n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({\n        type: 'chat',\n        message\n      }));\n\n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid first\n    const newGrid = gridData.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value\n    } // Update only the value property\n    : cell));\n    const handleCheckSolution = () => {\n      // Request solution check from server\n      ws.current.send(JSON.stringify({\n        type: 'checkSolution'\n      }));\n    };\n\n    // Update local state\n    setGridData(newGrid);\n\n    // Transpose the grid before sending to the server to match the expected format\n    const transposedGrid = Array.from({\n      length: 9\n    }, (_, rowIndex) => Array.from({\n      length: 9\n    }, (_, colIndex) => ({\n      value: newGrid[colIndex][rowIndex].value,\n      isEditable: newGrid[colIndex][rowIndex].isEditable\n    })));\n\n    // Send the transposed grid to the server\n    ws.current.send(JSON.stringify({\n      type: 'update',\n      board: transposedGrid\n    }));\n  };\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row => row.map(cell => ({\n      ...cell,\n      value: cell.isEditable ? '' : cell.value\n    })));\n\n    // Update local state\n    setGridData(clearedGrid);\n\n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({\n      length: 9\n    }, (_, rowIndex) => Array.from({\n      length: 9\n    }, (_, colIndex) => ({\n      value: clearedGrid[colIndex][rowIndex].value,\n      isEditable: clearedGrid[colIndex][rowIndex].isEditable\n    })));\n\n    // Send the cleared grid to the server\n    ws.current.send(JSON.stringify({\n      type: 'clearBoard',\n      board: transposedGrid\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sudokuTitle\",\n        children: puzzleTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FinalGrid, {\n        gridData: gridData,\n        onCellChange: handleCellChange,\n        incorrectCells: incorrectCells\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clientInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"You are:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: clientInfo.color\n        },\n        children: [\" \", clientInfo.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"playerHeader\",\n      children: \"Connected Players:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerList\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            color: player.color\n          },\n          children: player.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatLog\",\n        ref: chatLogRef,\n        children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            style: {\n              color: msg.color || '#000'\n            },\n            children: [msg.user, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message\",\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"time\",\n            children: new Date(msg.time).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 7\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatInput\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: chatInput,\n          onChange: e => setChatInput(e.target.value),\n          onKeyDown: e => {\n            if (e.key === 'Enter') {\n              sendChatMessage(); // Trigger the sendChatMessage function on Enter\n            }\n          },\n          placeholder: \"Type to chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardControls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clearBoardBtn\",\n        onClick: handleClearBoard,\n        children: \"Clear Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"checkSolutionBtn\",\n        onClick: handleCheckSolution,\n        children: \"Check Solution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WDP8cw86Ghs19OAZganQksBdv6s=\");\n_c5 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 314,\n  columnNumber: 3\n}, this));\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"ThreeGrid\");\n$RefreshReg$(_c4, \"FinalGrid\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactDOM","jsxDEV","_jsxDEV","Header","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Cell","value","isEditable","onChange","isIncorrect","handleChange","event","inputValue","target","slice","test","type","undefined","readOnly","maxLength","_c2","ThreeGrid","gridData","onCellChange","rowOffset","colOffset","transposedGridData","Array","from","length","_","i","j","map","row","rowIndex","cell","colIndex","_c3","FinalGrid","gridRow","gridCol","_c4","clientId","localStorage","getItem","crypto","randomUUID","setItem","App","_s","setGridData","fill","puzzleTitle","setPuzzleTitle","puzzleId","setPuzzleId","clientInfo","setClientInfo","name","color","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","incorrectCells","setIncorrectCells","chatLogRef","ws","current","scrollTop","scrollHeight","WebSocket","onopen","console","log","send","JSON","stringify","onmessage","data","parse","updatedGrid","board","title","client","messages","onclose","close","sendChatMessage","trim","message","user","text","handleCellChange","col","newGrid","r","handleCheckSolution","transposedGrid","handleClearBoard","clearedGrid","style","player","index","ref","msg","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","onClick","_c5","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Header() {\n  return <h1 className=\"header\">Suduoku</h1>;\n}\n\nfunction Cell({ value, isEditable, onChange, isIncorrect  }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1); // Get the last character entered\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue); // Notify parent of the change\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={isEditable ? handleChange : undefined} // Disable editing if not editable\n      readOnly={!isEditable}\n      maxLength=\"2\" // Limit input to a single character\n      className={isEditable ? 'cell' : 'non-editable-cell'}\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset }) {\n  // Create a transposed version of the gridData for the inner 3x3 grid\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\n  );\n\n  return (\n    <div className=\"threeGrid\">\n      {transposedGridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              value={cell.value}\n              isEditable={cell.isEditable}\n              onChange={(value) =>\n                // The indices need to be swapped here for the correct mapping\n                onCellChange(rowOffset + colIndex, colOffset + rowIndex, value)\n              }\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\nfunction FinalGrid({ gridData, onCellChange }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(\n    Array(9).fill(Array(9).fill('')) // Initialize empty 9x9 grid\n  );\n\n  const [puzzleTitle, setPuzzleTitle] = useState(''); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n  \n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    ws.current = new WebSocket(' https://dabf-2601-1c2-4503-61b0-9d5b-8d64-ba07-e34a.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n\n      // Send the client ID to the server\n      ws.current.send(JSON.stringify({ type: 'identify', clientId }));\n  \n      // Request chat history for the current puzzle\n      ws.current.send(JSON.stringify({ type: 'loadChat' }));\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n          }))\n        );\n    \n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1, // Use the actual puzzle ID from state\n      };\n      \n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\n      \n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid first\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value } // Update only the value property\n          : cell\n      )\n    );\n\n    const handleCheckSolution = () => {\n      // Request solution check from server\n      ws.current.send(JSON.stringify({ \n        type: 'checkSolution'\n      }));\n    };\n  \n    // Update local state\n    setGridData(newGrid);\n  \n    // Transpose the grid before sending to the server to match the expected format\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n  \n    // Send the transposed grid to the server\n    ws.current.send(JSON.stringify({ type: 'update', board: transposedGrid }));\n  };\n\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row =>\n      row.map(cell => ({\n        ...cell,\n        value: cell.isEditable ? '' : cell.value\n      }))\n    );\n    \n    // Update local state\n    setGridData(clearedGrid);\n    \n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: clearedGrid[colIndex][rowIndex].value,\n        isEditable: clearedGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n    \n    // Send the cleared grid to the server\n    ws.current.send(JSON.stringify({ \n      type: 'clearBoard', \n      board: transposedGrid \n    }));\n  };\n\n\n  return (\n    <div>\n      <div>\n        <Header />\n        <div className=\"sudokuTitle\">{puzzleTitle}</div>\n        <FinalGrid \n  gridData={gridData} \n  onCellChange={handleCellChange}\n  incorrectCells={incorrectCells}\n/>\n      </div>\n\n      <div className=\"clientInfo\">\n        <span>You are:</span>\n        <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\n      </div>\n\n      <h3 className=\"playerHeader\">Connected Players:</h3>\n\n      <div className=\"playerList\">\n        <ul>\n          {players.map((player, index) => (\n            <li key={index} style={{ color: player.color }}>\n              {player.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"chatBox\">\n      <div className=\"chatLog\" ref={chatLogRef}>\n  {chatMessages.map((msg, index) => (\n    <div key={index}>\n      <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\n      <span className=\"message\">{msg.message}</span>\n      <span className=\"time\">\n        {new Date(msg.time).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true,\n        })}\n      </span>\n    </div>\n  ))}\n</div>\n\n        <div className=\"chatInput\">\n          <input\n            type=\"text\"\n            value={chatInput}\n            onChange={(e) => setChatInput(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                sendChatMessage(); // Trigger the sendChatMessage function on Enter\n              }\n            }}\n            placeholder=\"Type to chat\"\n          />\n        </div>\n</div>\n\n<div className=\"boardControls\">\n  <button \n    className=\"clearBoardBtn\" \n    onClick={handleClearBoard}\n  >\n    Clear Board\n  </button>\n  <button \n    className=\"checkSolutionBtn\" \n    onClick={handleCheckSolution}\n  >\n    Check Solution\n  </button>\n</div>\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}