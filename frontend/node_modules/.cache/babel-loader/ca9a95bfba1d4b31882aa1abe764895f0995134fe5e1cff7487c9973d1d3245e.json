{"ast":null,"code":"class WebSocketManager {\n  constructor() {\n    this.ws = null;\n    this.listeners = [];\n  }\n  connect(url) {\n    if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n      this.ws = new WebSocket(url);\n      this.ws.onopen = () => {\n        console.log('Connected to WebSocket server');\n      };\n      this.ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        this.listeners.forEach(listener => listener(data));\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket connection closed');\n        // Optionally, attempt to reconnect\n        setTimeout(() => this.connect(url), 3000); // Retry after 3 seconds\n      };\n    }\n  }\n  send(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not open. Message not sent:', message);\n    }\n  }\n  addListener(listener) {\n    this.listeners.push(listener);\n  }\n  removeListener(listener) {\n    this.listeners = this.listeners.filter(l => l !== listener);\n  }\n}\nconst webSocketManager = new WebSocketManager();\nexport default webSocketManager;","map":{"version":3,"names":["WebSocketManager","constructor","ws","listeners","connect","url","readyState","WebSocket","CLOSED","onopen","console","log","onmessage","event","data","JSON","parse","forEach","listener","onerror","error","onclose","setTimeout","send","message","OPEN","stringify","warn","addListener","push","removeListener","filter","l","webSocketManager"],"sources":["C:/Users/andra/Desktop/Projects/suduoku-java/frontend/src/components/WebSocketManager.js"],"sourcesContent":["class WebSocketManager {\r\n    constructor() {\r\n      this.ws = null;\r\n      this.listeners = [];\r\n    }\r\n  \r\n    connect(url) {\r\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\r\n        this.ws = new WebSocket(url);\r\n  \r\n        this.ws.onopen = () => {\r\n          console.log('Connected to WebSocket server');\r\n        };\r\n  \r\n        this.ws.onmessage = (event) => {\r\n          const data = JSON.parse(event.data);\r\n          this.listeners.forEach((listener) => listener(data));\r\n        };\r\n  \r\n        this.ws.onerror = (error) => {\r\n          console.error('WebSocket error:', error);\r\n        };\r\n  \r\n        this.ws.onclose = () => {\r\n          console.log('WebSocket connection closed');\r\n          // Optionally, attempt to reconnect\r\n          setTimeout(() => this.connect(url), 3000); // Retry after 3 seconds\r\n        };\r\n      }\r\n    }\r\n  \r\n    send(message) {\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n        this.ws.send(JSON.stringify(message));\r\n      } else {\r\n        console.warn('WebSocket is not open. Message not sent:', message);\r\n      }\r\n    }\r\n  \r\n    addListener(listener) {\r\n      this.listeners.push(listener);\r\n    }\r\n  \r\n    removeListener(listener) {\r\n      this.listeners = this.listeners.filter((l) => l !== listener);\r\n    }\r\n  }\r\n  \r\n  const webSocketManager = new WebSocketManager();\r\n  export default webSocketManager;"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,EAAE,GAAG,IAAI;IACd,IAAI,CAACC,SAAS,GAAG,EAAE;EACrB;EAEAC,OAAOA,CAACC,GAAG,EAAE;IACX,IAAI,CAAC,IAAI,CAACH,EAAE,IAAI,IAAI,CAACA,EAAE,CAACI,UAAU,KAAKC,SAAS,CAACC,MAAM,EAAE;MACvD,IAAI,CAACN,EAAE,GAAG,IAAIK,SAAS,CAACF,GAAG,CAAC;MAE5B,IAAI,CAACH,EAAE,CAACO,MAAM,GAAG,MAAM;QACrBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC9C,CAAC;MAED,IAAI,CAACT,EAAE,CAACU,SAAS,GAAIC,KAAK,IAAK;QAC7B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;QACnC,IAAI,CAACX,SAAS,CAACc,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACJ,IAAI,CAAC,CAAC;MACtD,CAAC;MAED,IAAI,CAACZ,EAAE,CAACiB,OAAO,GAAIC,KAAK,IAAK;QAC3BV,OAAO,CAACU,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;MAED,IAAI,CAAClB,EAAE,CAACmB,OAAO,GAAG,MAAM;QACtBX,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C;QACAW,UAAU,CAAC,MAAM,IAAI,CAAClB,OAAO,CAACC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MAC7C,CAAC;IACH;EACF;EAEAkB,IAAIA,CAACC,OAAO,EAAE;IACZ,IAAI,IAAI,CAACtB,EAAE,IAAI,IAAI,CAACA,EAAE,CAACI,UAAU,KAAKC,SAAS,CAACkB,IAAI,EAAE;MACpD,IAAI,CAACvB,EAAE,CAACqB,IAAI,CAACR,IAAI,CAACW,SAAS,CAACF,OAAO,CAAC,CAAC;IACvC,CAAC,MAAM;MACLd,OAAO,CAACiB,IAAI,CAAC,0CAA0C,EAAEH,OAAO,CAAC;IACnE;EACF;EAEAI,WAAWA,CAACV,QAAQ,EAAE;IACpB,IAAI,CAACf,SAAS,CAAC0B,IAAI,CAACX,QAAQ,CAAC;EAC/B;EAEAY,cAAcA,CAACZ,QAAQ,EAAE;IACvB,IAAI,CAACf,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC4B,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKd,QAAQ,CAAC;EAC/D;AACF;AAEA,MAAMe,gBAAgB,GAAG,IAAIjC,gBAAgB,CAAC,CAAC;AAC/C,eAAeiC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}