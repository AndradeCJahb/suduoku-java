{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import ReactDOM from'react-dom/client';import'./index.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Header(){return/*#__PURE__*/_jsx(\"div\",{className:\"header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-content\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/favicon.ico\",alt:\"Suduoku Logo\",className:\"header-logo\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"header-title\",children:\"Suduoku\"})]})});}function Cell(_ref){let{value,isEditable,onChange,isIncorrect,row,col,playerPositions,wsRef}=_ref;const handleChange=event=>{const inputValue=event.target.value.slice(-1);if(/^[1-9]?$/.test(inputValue)){onChange(inputValue);}};// Send position to server when cell is focused\nconst handleFocus=()=>{if(wsRef&&wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({type:'cellSelection',position:{row,col}}));}};// Determine the CSS class based on editable state, incorrect state, and player positions\nlet cellClass=isEditable?'cell':'non-editable-cell';if(isIncorrect){cellClass+=' incorrect-cell';}// Add player position highlights\nconst playerHighlights=playerPositions.filter(player=>player.position.row===row&&player.position.col===col).map(player=>{return{boxShadow:`inset 0 0 0 3px ${player.color}`,zIndex:1,position:'relative'};})[0]||{};return/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:value,onChange:isEditable?handleChange:undefined,onFocus:handleFocus,readOnly:!isEditable,maxLength:\"2\",className:cellClass,style:playerHighlights});}function ThreeGrid(_ref2){let{gridData,onCellChange,rowOffset,colOffset,incorrectCells,playerPositions,wsRef}=_ref2;const transposedGridData=Array.from({length:3},(_,i)=>Array.from({length:3},(_,j)=>gridData[j][i]));return/*#__PURE__*/_jsx(\"div\",{className:\"threeGrid\",children:transposedGridData.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:row.map((cell,colIndex)=>{// Calculate the global row and column for this cell\nconst globalRow=rowOffset+colIndex;const globalCol=colOffset+rowIndex;// Check if this cell is in the incorrect cells list\nconst isIncorrect=incorrectCells.some(cell=>cell.row===globalRow&&cell.col===globalCol);return/*#__PURE__*/_jsx(Cell,{value:cell.value,isEditable:cell.isEditable,isIncorrect:isIncorrect,row:globalRow,col:globalCol,onChange:value=>onCellChange(globalRow,globalCol,value),playerPositions:playerPositions,wsRef:wsRef// Pass to Cell\n},colIndex);})},rowIndex))});}function FinalGrid(_ref3){let{gridData,onCellChange,incorrectCells,playerPositions,wsRef}=_ref3;return/*#__PURE__*/_jsx(\"div\",{className:\"finalGrid\",children:Array.from({length:3},(_,gridRow)=>/*#__PURE__*/_jsx(\"div\",{className:\"grid-row\",children:Array.from({length:3},(_,gridCol)=>/*#__PURE__*/_jsx(ThreeGrid,{gridData:gridData.slice(gridRow*3,gridRow*3+3).map(row=>row.slice(gridCol*3,gridCol*3+3)),onCellChange:onCellChange,rowOffset:gridRow*3,colOffset:gridCol*3,incorrectCells:incorrectCells,playerPositions:playerPositions,wsRef:wsRef// Pass it further down\n},gridCol))},gridRow))});}// Check if a client ID exists in localStorage\nlet clientId=localStorage.getItem('clientId');if(!clientId){clientId=crypto.randomUUID();localStorage.setItem('clientId',clientId);}function App(){const[gridData,setGridData]=useState(Array(9).fill(Array(9).fill('')));const[puzzleTitle,setPuzzleTitle]=useState('SUDUOKU');// State for the puzzle title\nconst[puzzleId,setPuzzleId]=useState(null);// Add state for the puzzle ID\nconst[clientInfo,setClientInfo]=useState({name:'',color:''});// State for the client's name and color\nconst[players,setPlayers]=useState([]);// State for the list of connected players\nconst[chatInput,setChatInput]=useState('');// State for the chat input box\nconst[chatMessages,setChatMessages]=useState([]);// State for the list of chat messages\nconst[incorrectCells,setIncorrectCells]=useState([]);// Track incorrect cells\nconst[playerPositions,setPlayerPositions]=useState([]);const chatLogRef=useRef(null);const ws=useRef(null);// Use useRef to persist the WebSocket instance\nuseEffect(()=>{// Scroll to the bottom of the chat log whenever messages are updated\nif(chatLogRef.current){chatLogRef.current.scrollTop=chatLogRef.current.scrollHeight;}},[chatMessages]);useEffect(()=>{ws.current=new WebSocket('https://2a72-2601-1c2-4503-61b0-62-7a49-5af4-c336.ngrok-free.app');// Connect to the backend WebSocket server\nws.current.onopen=()=>{console.log('Connected to WebSocket server');ws.current.send(JSON.stringify({type:'identify',clientId}));ws.current.send(JSON.stringify({type:'loadChat'}));};ws.current.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='update'){// Update the grid with the new state from the server\nconst updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,// Swap row and column indices\nisEditable:data.board[colIndex][rowIndex].isEditable// Swap row and column indices\n})));setGridData(updatedGrid);// Set the grid data in row-major order\nsetPuzzleTitle(data.title);// Update the puzzle title\nif(data.puzzleId){setPuzzleId(data.puzzleId);}if(data.client){setClientInfo(data.client);// Set the client's name and color\n}}else if(data.type==='players'){setPlayers(data.players);// Update the list of connected players \n}else if(data.type==='chatHistory'){setChatMessages(data.messages);// Load chat history\n}else if(data.type==='checkResult'){setIncorrectCells(data.incorrectCells);}else if(data.type==='gameState'){// Handle combined game state update including player positions\nconst updatedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:data.board[colIndex][rowIndex].value,isEditable:data.board[colIndex][rowIndex].isEditable})));setGridData(updatedGrid);setPuzzleTitle(data.title);if(data.puzzleId){setPuzzleId(data.puzzleId);}setIncorrectCells(data.incorrectCells);// Add this line to update player positions from game state\nif(data.playerPositions){setPlayerPositions(data.playerPositions);}}else if(data.type==='playerPositions'){setPlayerPositions(data.positions);}};ws.current.onclose=()=>{console.log('Disconnected from WebSocket server');};return()=>ws.current.close();// Clean up WebSocket connection on unmount\n},[]);const sendChatMessage=()=>{if(chatInput.trim()!==''){const message={user:clientInfo.name,color:clientInfo.color,text:chatInput,puzzleId:puzzleId||1// Use the actual puzzle ID from state\n};// Send the chat message to the server\nws.current.send(JSON.stringify({type:'chat',message}));// Clear the input box after sending the message\nsetChatInput('');}};const handleCheckSolution=()=>{// Request solution check from server\nws.current.send(JSON.stringify({type:'checkSolution'}));};const handleCellChange=(row,col,value)=>{// Update the local grid\nconst newGrid=gridData.map((r,rowIndex)=>r.map((cell,colIndex)=>rowIndex===row&&colIndex===col?{...cell,value}:cell));// Update local state\nsetGridData(newGrid);// Immediately remove this cell from incorrectCells locally for better user experience\nsetIncorrectCells(prev=>prev.filter(cell=>!(cell.row===row&&cell.col===col)));// Transpose the grid before sending to the server\nconst transposedGrid=Array.from({length:9},(_,rowIndex)=>Array.from({length:9},(_,colIndex)=>({value:newGrid[colIndex][rowIndex].value,isEditable:newGrid[colIndex][rowIndex].isEditable})));// Send with properly transposed coordinates for changedCell\nws.current.send(JSON.stringify({type:'update',board:transposedGrid,changedCell:{row:row,// Note the transposition here\ncol:col}}));};const handleClearBoard=()=>{// Create a new grid with only locked cells\nconst clearedGrid=gridData.map(row=>row.map(cell=>({...cell,value:cell.isEditable?'':cell.value})));// Update local state\nsetGridData(clearedGrid);setIncorrectCells([]);// Just notify the server to clear the board\nws.current.send(JSON.stringify({type:'clearBoard'}));};// Update the App component's return statement\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"sudokuTitle\",children:puzzleTitle}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"board-section\",children:/*#__PURE__*/_jsx(FinalGrid,{gridData:gridData,onCellChange:handleCellChange,incorrectCells:incorrectCells,playerPositions:playerPositions,wsRef:ws})}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-controls-section\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"clearBoardBtn\",onClick:handleClearBoard,children:\"Clear Board\"}),/*#__PURE__*/_jsx(\"button\",{className:\"checkSolutionBtn\",onClick:handleCheckSolution,children:\"Check Solution\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"right-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatLog\",ref:chatLogRef,children:chatMessages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{style:{color:msg.color||'#000'},children:[msg.user,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"message\",children:msg.message}),/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:new Date(msg.time).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit',hour12:true})})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"chatInput\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:chatInput,onChange:e=>setChatInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'){sendChatMessage();}},placeholder:\"Type to chat\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"players-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"clientInfo\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"You are:\"}),/*#__PURE__*/_jsxs(\"span\",{style:{color:clientInfo.color},children:[\" \",clientInfo.name]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"playerHeader\",children:\"Connected Players:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"playerList\",children:/*#__PURE__*/_jsx(\"ul\",{children:players.map((player,index)=>/*#__PURE__*/_jsx(\"li\",{style:{color:player.color},children:player.name},index))})})]})]})]})]});}const root=ReactDOM.createRoot(document.getElementById('root'));root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactDOM","jsx","_jsx","jsxs","_jsxs","Header","className","children","src","alt","Cell","_ref","value","isEditable","onChange","isIncorrect","row","col","playerPositions","wsRef","handleChange","event","inputValue","target","slice","test","handleFocus","current","readyState","WebSocket","OPEN","send","JSON","stringify","type","position","cellClass","playerHighlights","filter","player","map","boxShadow","color","zIndex","undefined","onFocus","readOnly","maxLength","style","ThreeGrid","_ref2","gridData","onCellChange","rowOffset","colOffset","incorrectCells","transposedGridData","Array","from","length","_","i","j","rowIndex","cell","colIndex","globalRow","globalCol","some","FinalGrid","_ref3","gridRow","gridCol","clientId","localStorage","getItem","crypto","randomUUID","setItem","App","setGridData","fill","puzzleTitle","setPuzzleTitle","puzzleId","setPuzzleId","clientInfo","setClientInfo","name","players","setPlayers","chatInput","setChatInput","chatMessages","setChatMessages","setIncorrectCells","setPlayerPositions","chatLogRef","ws","scrollTop","scrollHeight","onopen","console","log","onmessage","data","parse","updatedGrid","board","title","client","messages","positions","onclose","close","sendChatMessage","trim","message","user","text","handleCheckSolution","handleCellChange","newGrid","r","prev","transposedGrid","changedCell","handleClearBoard","clearedGrid","onClick","ref","msg","index","Date","time","toLocaleTimeString","hour","minute","hour12","e","onKeyDown","key","placeholder","root","createRoot","document","getElementById","render","StrictMode"],"sources":["C:/Users/andra/Desktop/Projects/sudoku/suduoku/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"header-content\">\n        <img \n          src=\"/favicon.ico\" \n          alt=\"Suduoku Logo\" \n          className=\"header-logo\" \n        />\n        <h1 className=\"header-title\">Suduoku</h1>\n      </div>\n    </div>\n  );\n}\n\nfunction Cell({ value, isEditable, onChange, isIncorrect, row, col, playerPositions, wsRef }) {\n  const handleChange = (event) => {\n    const inputValue = event.target.value.slice(-1);\n    if (/^[1-9]?$/.test(inputValue)) {\n      onChange(inputValue);\n    }\n  };\n\n  // Send position to server when cell is focused\n  const handleFocus = () => {\n    if (wsRef && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({ \n        type: 'cellSelection', \n        position: { \n          row, \n          col \n        } \n      }));\n    }\n  };\n\n  // Determine the CSS class based on editable state, incorrect state, and player positions\n  let cellClass = isEditable ? 'cell' : 'non-editable-cell';\n  if (isIncorrect) {\n    cellClass += ' incorrect-cell';\n  }\n\n  // Add player position highlights\n  const playerHighlights = playerPositions\n    .filter(player => player.position.row === row && player.position.col === col)\n    .map(player => {\n      return {\n        boxShadow: `inset 0 0 0 3px ${player.color}`,\n        zIndex: 1,\n        position: 'relative'\n      };\n    })[0] || {};\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={isEditable ? handleChange : undefined}\n      onFocus={handleFocus}\n      readOnly={!isEditable}\n      maxLength=\"2\"\n      className={cellClass}\n      style={playerHighlights}\n    />\n  );\n}\n\nfunction ThreeGrid({ gridData, onCellChange, rowOffset, colOffset, incorrectCells, playerPositions, wsRef }) {\n  const transposedGridData = Array.from({ length: 3 }, (_, i) =>\n    Array.from({ length: 3 }, (_, j) => gridData[j][i])\n  );\n\n  return (\n    <div className=\"threeGrid\">\n      {transposedGridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => {\n            // Calculate the global row and column for this cell\n            const globalRow = rowOffset + colIndex;\n            const globalCol = colOffset + rowIndex;\n            \n            // Check if this cell is in the incorrect cells list\n            const isIncorrect = incorrectCells.some(\n              cell => cell.row === globalRow && cell.col === globalCol\n            );\n            \n            return (\n              <Cell\n                key={colIndex}\n                value={cell.value}\n                isEditable={cell.isEditable}\n                isIncorrect={isIncorrect}\n                row={globalRow}\n                col={globalCol}\n                onChange={(value) =>\n                  onCellChange(globalRow, globalCol, value)\n                }\n                playerPositions={playerPositions}\n                wsRef={wsRef} // Pass to Cell\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FinalGrid({ gridData, onCellChange, incorrectCells, playerPositions, wsRef }) {\n  return (\n    <div className=\"finalGrid\">\n      {Array.from({ length: 3 }, (_, gridRow) => (\n        <div key={gridRow} className=\"grid-row\">\n          {Array.from({ length: 3 }, (_, gridCol) => (\n            <ThreeGrid\n              key={gridCol}\n              gridData={gridData.slice(gridRow * 3, gridRow * 3 + 3).map((row) =>\n                row.slice(gridCol * 3, gridCol * 3 + 3)\n              )}\n              onCellChange={onCellChange}\n              rowOffset={gridRow * 3}\n              colOffset={gridCol * 3}\n              incorrectCells={incorrectCells}\n              playerPositions={playerPositions}\n              wsRef={wsRef} // Pass it further down\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Check if a client ID exists in localStorage\nlet clientId = localStorage.getItem('clientId');\nif (!clientId) {\n  clientId = crypto.randomUUID();\n  localStorage.setItem('clientId', clientId);\n}\n\nfunction App() {\n  const [gridData, setGridData] = useState(Array(9).fill(Array(9).fill('')) );\n  const [puzzleTitle, setPuzzleTitle] = useState('SUDUOKU'); // State for the puzzle title\n  const [puzzleId, setPuzzleId] = useState(null); // Add state for the puzzle ID\n  const [clientInfo, setClientInfo] = useState({ name: '', color: '' }); // State for the client's name and color\n  const [players, setPlayers] = useState([]); // State for the list of connected players\n  const [chatInput, setChatInput] = useState(''); // State for the chat input box\n  const [chatMessages, setChatMessages] = useState([]); // State for the list of chat messages\n  const [incorrectCells, setIncorrectCells] = useState([]); // Track incorrect cells\n  const [playerPositions, setPlayerPositions] = useState([]);\n\n  const chatLogRef = useRef(null);\n  const ws = useRef(null); // Use useRef to persist the WebSocket instance\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat log whenever messages are updated\n    if (chatLogRef.current) {\n      chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    ws.current = new WebSocket('https://2a72-2601-1c2-4503-61b0-62-7a49-5af4-c336.ngrok-free.app'); // Connect to the backend WebSocket server\n\n    ws.current.onopen = () => {\n      console.log('Connected to WebSocket server');\n      ws.current.send(JSON.stringify({ type: 'identify', clientId }));\n      ws.current.send(JSON.stringify({ type: 'loadChat' }));\n    };\n\n    ws.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'update') {\n        // Update the grid with the new state from the server\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value, // Swap row and column indices\n            isEditable: data.board[colIndex][rowIndex].isEditable, // Swap row and column indices\n          }))\n        );\n    \n        setGridData(updatedGrid); // Set the grid data in row-major order\n        setPuzzleTitle(data.title); // Update the puzzle title\n\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n\n        if (data.client) {\n          setClientInfo(data.client); // Set the client's name and color\n        }\n      } else if (data.type === 'players') {\n        setPlayers(data.players); // Update the list of connected players \n      } else if (data.type === 'chatHistory') {\n        setChatMessages(data.messages); // Load chat history\n      } else if (data.type === 'checkResult') {\n        setIncorrectCells(data.incorrectCells);\n      } else if (data.type === 'gameState') {\n        // Handle combined game state update including player positions\n        const updatedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n          Array.from({ length: 9 }, (_, colIndex) => ({\n            value: data.board[colIndex][rowIndex].value,\n            isEditable: data.board[colIndex][rowIndex].isEditable,\n          }))\n        );\n    \n        setGridData(updatedGrid);\n        setPuzzleTitle(data.title);\n        if (data.puzzleId) {\n          setPuzzleId(data.puzzleId);\n        }\n        setIncorrectCells(data.incorrectCells);\n        \n        // Add this line to update player positions from game state\n        if (data.playerPositions) {\n          setPlayerPositions(data.playerPositions);\n        }\n      } else if (data.type === 'playerPositions') {\n        setPlayerPositions(data.positions);\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('Disconnected from WebSocket server');\n    };\n\n    return () => ws.current.close(); // Clean up WebSocket connection on unmount\n  }, []);\n\n  const sendChatMessage = () => {\n    if (chatInput.trim() !== '') {\n      const message = {\n        user: clientInfo.name,\n        color: clientInfo.color,\n        text: chatInput,\n        puzzleId: puzzleId || 1, // Use the actual puzzle ID from state\n      };\n      \n      // Send the chat message to the server\n      ws.current.send(JSON.stringify({ type: 'chat', message }));\n      \n      // Clear the input box after sending the message\n      setChatInput('');\n    }\n  };\n\n  const handleCheckSolution = () => {\n    // Request solution check from server\n    ws.current.send(JSON.stringify({ \n      type: 'checkSolution'\n    }));\n  };\n\n  const handleCellChange = (row, col, value) => {\n    // Update the local grid\n    const newGrid = gridData.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value }\n          : cell\n      )\n    );\n  \n    // Update local state\n    setGridData(newGrid);\n  \n    // Immediately remove this cell from incorrectCells locally for better user experience\n    setIncorrectCells(prev => prev.filter(cell => !(cell.row === row && cell.col === col)));\n  \n    // Transpose the grid before sending to the server\n    const transposedGrid = Array.from({ length: 9 }, (_, rowIndex) =>\n      Array.from({ length: 9 }, (_, colIndex) => ({\n        value: newGrid[colIndex][rowIndex].value,\n        isEditable: newGrid[colIndex][rowIndex].isEditable,\n      }))\n    );\n  \n    // Send with properly transposed coordinates for changedCell\n    ws.current.send(JSON.stringify({ \n      type: 'update', \n      board: transposedGrid,\n      changedCell: { \n        row: row,  // Note the transposition here\n        col: col\n      }\n    }));\n  };\n\n  const handleClearBoard = () => {\n    // Create a new grid with only locked cells\n    const clearedGrid = gridData.map(row =>\n      row.map(cell => ({\n        ...cell,\n        value: cell.isEditable ? '' : cell.value\n      }))\n    );\n    \n    // Update local state\n    setGridData(clearedGrid);\n    setIncorrectCells([]);\n    \n    // Just notify the server to clear the board\n    ws.current.send(JSON.stringify({ \n      type: 'clearBoard'\n    }));\n  };\n\n\n  // Update the App component's return statement\n\nreturn (\n  <div>\n    <Header />\n    <div className=\"sudokuTitle\">{puzzleTitle}</div>\n    \n    <div className=\"app-container\">\n      <div className=\"left-section\">\n        <div className=\"board-section\">\n          <FinalGrid \n            gridData={gridData} \n            onCellChange={handleCellChange}\n            incorrectCells={incorrectCells}\n            playerPositions={playerPositions}\n            wsRef={ws} \n          />\n        </div>\n        \n        <div className=\"board-controls-section\">\n          <button \n            className=\"clearBoardBtn\" \n            onClick={handleClearBoard}\n          >\n            Clear Board\n          </button>\n          <button \n            className=\"checkSolutionBtn\" \n            onClick={handleCheckSolution}\n          >\n            Check Solution\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"right-section\">\n        <div className=\"chatBox\">\n          <div className=\"chatLog\" ref={chatLogRef}>\n            {chatMessages.map((msg, index) => (\n              <div key={index}>\n                <strong style={{ color: msg.color || '#000' }}>{msg.user}:</strong>\n                <span className=\"message\">{msg.message}</span>\n                <span className=\"time\">\n                  {new Date(msg.time).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: true,\n                  })}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"chatInput\">\n            <input\n              type=\"text\"\n              value={chatInput}\n              onChange={(e) => setChatInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  sendChatMessage();\n                }\n              }}\n              placeholder=\"Type to chat\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"players-section\">\n          <div className=\"clientInfo\">\n            <span>You are:</span>\n            <span style={{ color: clientInfo.color }}> {clientInfo.name}</span>\n          </div>\n\n          <h3 className=\"playerHeader\">Connected Players:</h3>\n\n          <div className=\"playerList\">\n            <ul>\n              {players.map((player, index) => (\n                <li key={index} style={{ color: player.color }}>\n                  {player.name}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErB,QAAS,CAAAC,MAAMA,CAAA,CAAG,CAChB,mBACEH,IAAA,QAAKI,SAAS,CAAC,QAAQ,CAAAC,QAAA,cACrBH,KAAA,QAAKE,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BL,IAAA,QACEM,GAAG,CAAC,cAAc,CAClBC,GAAG,CAAC,cAAc,CAClBH,SAAS,CAAC,aAAa,CACxB,CAAC,cACFJ,IAAA,OAAII,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,SAAO,CAAI,CAAC,EACtC,CAAC,CACH,CAAC,CAEV,CAEA,QAAS,CAAAG,IAAIA,CAAAC,IAAA,CAAiF,IAAhF,CAAEC,KAAK,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,GAAG,CAAEC,GAAG,CAAEC,eAAe,CAAEC,KAAM,CAAC,CAAAR,IAAA,CAC1F,KAAM,CAAAS,YAAY,CAAIC,KAAK,EAAK,CAC9B,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAACX,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,CAC/C,GAAI,UAAU,CAACC,IAAI,CAACH,UAAU,CAAC,CAAE,CAC/BR,QAAQ,CAACQ,UAAU,CAAC,CACtB,CACF,CAAC,CAED;AACA,KAAM,CAAAI,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAIP,KAAK,EAAIA,KAAK,CAACQ,OAAO,EAAIR,KAAK,CAACQ,OAAO,CAACC,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CACzEX,KAAK,CAACQ,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAChCC,IAAI,CAAE,eAAe,CACrBC,QAAQ,CAAE,CACRnB,GAAG,CACHC,GACF,CACF,CAAC,CAAC,CAAC,CACL,CACF,CAAC,CAED;AACA,GAAI,CAAAmB,SAAS,CAAGvB,UAAU,CAAG,MAAM,CAAG,mBAAmB,CACzD,GAAIE,WAAW,CAAE,CACfqB,SAAS,EAAI,iBAAiB,CAChC,CAEA;AACA,KAAM,CAAAC,gBAAgB,CAAGnB,eAAe,CACrCoB,MAAM,CAACC,MAAM,EAAIA,MAAM,CAACJ,QAAQ,CAACnB,GAAG,GAAKA,GAAG,EAAIuB,MAAM,CAACJ,QAAQ,CAAClB,GAAG,GAAKA,GAAG,CAAC,CAC5EuB,GAAG,CAACD,MAAM,EAAI,CACb,MAAO,CACLE,SAAS,CAAE,mBAAmBF,MAAM,CAACG,KAAK,EAAE,CAC5CC,MAAM,CAAE,CAAC,CACTR,QAAQ,CAAE,UACZ,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,CAAC,EAAI,CAAC,CAAC,CAEb,mBACEjC,IAAA,UACEgC,IAAI,CAAC,MAAM,CACXtB,KAAK,CAAEA,KAAM,CACbE,QAAQ,CAAED,UAAU,CAAGO,YAAY,CAAGwB,SAAU,CAChDC,OAAO,CAAEnB,WAAY,CACrBoB,QAAQ,CAAE,CAACjC,UAAW,CACtBkC,SAAS,CAAC,GAAG,CACbzC,SAAS,CAAE8B,SAAU,CACrBY,KAAK,CAAEX,gBAAiB,CACzB,CAAC,CAEN,CAEA,QAAS,CAAAY,SAASA,CAAAC,KAAA,CAA2F,IAA1F,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,SAAS,CAAEC,SAAS,CAAEC,cAAc,CAAErC,eAAe,CAAEC,KAAM,CAAC,CAAA+B,KAAA,CACzG,KAAM,CAAAM,kBAAkB,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEC,CAAC,GACxDJ,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEE,CAAC,GAAKX,QAAQ,CAACW,CAAC,CAAC,CAACD,CAAC,CAAC,CACpD,CAAC,CAED,mBACE3D,IAAA,QAAKI,SAAS,CAAC,WAAW,CAAAC,QAAA,CACvBiD,kBAAkB,CAAChB,GAAG,CAAC,CAACxB,GAAG,CAAE+C,QAAQ,gBACpC7D,IAAA,QAAoBI,SAAS,CAAC,UAAU,CAAAC,QAAA,CACrCS,GAAG,CAACwB,GAAG,CAAC,CAACwB,IAAI,CAAEC,QAAQ,GAAK,CAC3B;AACA,KAAM,CAAAC,SAAS,CAAGb,SAAS,CAAGY,QAAQ,CACtC,KAAM,CAAAE,SAAS,CAAGb,SAAS,CAAGS,QAAQ,CAEtC;AACA,KAAM,CAAAhD,WAAW,CAAGwC,cAAc,CAACa,IAAI,CACrCJ,IAAI,EAAIA,IAAI,CAAChD,GAAG,GAAKkD,SAAS,EAAIF,IAAI,CAAC/C,GAAG,GAAKkD,SACjD,CAAC,CAED,mBACEjE,IAAA,CAACQ,IAAI,EAEHE,KAAK,CAAEoD,IAAI,CAACpD,KAAM,CAClBC,UAAU,CAAEmD,IAAI,CAACnD,UAAW,CAC5BE,WAAW,CAAEA,WAAY,CACzBC,GAAG,CAAEkD,SAAU,CACfjD,GAAG,CAAEkD,SAAU,CACfrD,QAAQ,CAAGF,KAAK,EACdwC,YAAY,CAACc,SAAS,CAAEC,SAAS,CAAEvD,KAAK,CACzC,CACDM,eAAe,CAAEA,eAAgB,CACjCC,KAAK,CAAEA,KAAO;AAAA,EAVT8C,QAWN,CAAC,CAEN,CAAC,CAAC,EA1BMF,QA2BL,CACN,CAAC,CACC,CAAC,CAEV,CAEA,QAAS,CAAAM,SAASA,CAAAC,KAAA,CAAqE,IAApE,CAAEnB,QAAQ,CAAEC,YAAY,CAAEG,cAAc,CAAErC,eAAe,CAAEC,KAAM,CAAC,CAAAmD,KAAA,CACnF,mBACEpE,IAAA,QAAKI,SAAS,CAAC,WAAW,CAAAC,QAAA,CACvBkD,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEW,OAAO,gBACpCrE,IAAA,QAAmBI,SAAS,CAAC,UAAU,CAAAC,QAAA,CACpCkD,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEY,OAAO,gBACpCtE,IAAA,CAAC+C,SAAS,EAERE,QAAQ,CAAEA,QAAQ,CAAC3B,KAAK,CAAC+C,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAG,CAAC,CAAG,CAAC,CAAC,CAAC/B,GAAG,CAAExB,GAAG,EAC7DA,GAAG,CAACQ,KAAK,CAACgD,OAAO,CAAG,CAAC,CAAEA,OAAO,CAAG,CAAC,CAAG,CAAC,CACxC,CAAE,CACFpB,YAAY,CAAEA,YAAa,CAC3BC,SAAS,CAAEkB,OAAO,CAAG,CAAE,CACvBjB,SAAS,CAAEkB,OAAO,CAAG,CAAE,CACvBjB,cAAc,CAAEA,cAAe,CAC/BrC,eAAe,CAAEA,eAAgB,CACjCC,KAAK,CAAEA,KAAO;AAAA,EATTqD,OAUN,CACF,CAAC,EAdMD,OAeL,CACN,CAAC,CACC,CAAC,CAEV,CAEA;AACA,GAAI,CAAAE,QAAQ,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC/C,GAAI,CAACF,QAAQ,CAAE,CACbA,QAAQ,CAAGG,MAAM,CAACC,UAAU,CAAC,CAAC,CAC9BH,YAAY,CAACI,OAAO,CAAC,UAAU,CAAEL,QAAQ,CAAC,CAC5C,CAEA,QAAS,CAAAM,GAAGA,CAAA,CAAG,CACb,KAAM,CAAC5B,QAAQ,CAAE6B,WAAW,CAAC,CAAGnF,QAAQ,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAACwB,IAAI,CAACxB,KAAK,CAAC,CAAC,CAAC,CAACwB,IAAI,CAAC,EAAE,CAAC,CAAE,CAAC,CAC3E,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGtF,QAAQ,CAAC,SAAS,CAAC,CAAE;AAC3D,KAAM,CAACuF,QAAQ,CAAEC,WAAW,CAAC,CAAGxF,QAAQ,CAAC,IAAI,CAAC,CAAE;AAChD,KAAM,CAACyF,UAAU,CAAEC,aAAa,CAAC,CAAG1F,QAAQ,CAAC,CAAE2F,IAAI,CAAE,EAAE,CAAE9C,KAAK,CAAE,EAAG,CAAC,CAAC,CAAE;AACvE,KAAM,CAAC+C,OAAO,CAAEC,UAAU,CAAC,CAAG7F,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC5C,KAAM,CAAC8F,SAAS,CAAEC,YAAY,CAAC,CAAG/F,QAAQ,CAAC,EAAE,CAAC,CAAE;AAChD,KAAM,CAACgG,YAAY,CAAEC,eAAe,CAAC,CAAGjG,QAAQ,CAAC,EAAE,CAAC,CAAE;AACtD,KAAM,CAAC0D,cAAc,CAAEwC,iBAAiB,CAAC,CAAGlG,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC1D,KAAM,CAACqB,eAAe,CAAE8E,kBAAkB,CAAC,CAAGnG,QAAQ,CAAC,EAAE,CAAC,CAE1D,KAAM,CAAAoG,UAAU,CAAGlG,MAAM,CAAC,IAAI,CAAC,CAC/B,KAAM,CAAAmG,EAAE,CAAGnG,MAAM,CAAC,IAAI,CAAC,CAAE;AAEzBD,SAAS,CAAC,IAAM,CACd;AACA,GAAImG,UAAU,CAACtE,OAAO,CAAE,CACtBsE,UAAU,CAACtE,OAAO,CAACwE,SAAS,CAAGF,UAAU,CAACtE,OAAO,CAACyE,YAAY,CAChE,CACF,CAAC,CAAE,CAACP,YAAY,CAAC,CAAC,CAElB/F,SAAS,CAAC,IAAM,CACdoG,EAAE,CAACvE,OAAO,CAAG,GAAI,CAAAE,SAAS,CAAC,kEAAkE,CAAC,CAAE;AAEhGqE,EAAE,CAACvE,OAAO,CAAC0E,MAAM,CAAG,IAAM,CACxBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CL,EAAE,CAACvE,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAE,UAAU,CAAEuC,QAAS,CAAC,CAAC,CAAC,CAC/DyB,EAAE,CAACvE,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAE,UAAW,CAAC,CAAC,CAAC,CACvD,CAAC,CAEDgE,EAAE,CAACvE,OAAO,CAAC6E,SAAS,CAAInF,KAAK,EAAK,CAChC,KAAM,CAAAoF,IAAI,CAAGzE,IAAI,CAAC0E,KAAK,CAACrF,KAAK,CAACoF,IAAI,CAAC,CAEnC,GAAIA,IAAI,CAACvE,IAAI,GAAK,QAAQ,CAAE,CAC1B;AACA,KAAM,CAAAyE,WAAW,CAAGlD,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEG,QAAQ,GACxDN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEK,QAAQ,IAAM,CAC1CrD,KAAK,CAAE6F,IAAI,CAACG,KAAK,CAAC3C,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACnD,KAAK,CAAE;AAC7CC,UAAU,CAAE4F,IAAI,CAACG,KAAK,CAAC3C,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAAClD,UAAY;AACzD,CAAC,CAAC,CACJ,CAAC,CAEDmE,WAAW,CAAC2B,WAAW,CAAC,CAAE;AAC1BxB,cAAc,CAACsB,IAAI,CAACI,KAAK,CAAC,CAAE;AAE5B,GAAIJ,IAAI,CAACrB,QAAQ,CAAE,CACjBC,WAAW,CAACoB,IAAI,CAACrB,QAAQ,CAAC,CAC5B,CAEA,GAAIqB,IAAI,CAACK,MAAM,CAAE,CACfvB,aAAa,CAACkB,IAAI,CAACK,MAAM,CAAC,CAAE;AAC9B,CACF,CAAC,IAAM,IAAIL,IAAI,CAACvE,IAAI,GAAK,SAAS,CAAE,CAClCwD,UAAU,CAACe,IAAI,CAAChB,OAAO,CAAC,CAAE;AAC5B,CAAC,IAAM,IAAIgB,IAAI,CAACvE,IAAI,GAAK,aAAa,CAAE,CACtC4D,eAAe,CAACW,IAAI,CAACM,QAAQ,CAAC,CAAE;AAClC,CAAC,IAAM,IAAIN,IAAI,CAACvE,IAAI,GAAK,aAAa,CAAE,CACtC6D,iBAAiB,CAACU,IAAI,CAAClD,cAAc,CAAC,CACxC,CAAC,IAAM,IAAIkD,IAAI,CAACvE,IAAI,GAAK,WAAW,CAAE,CACpC;AACA,KAAM,CAAAyE,WAAW,CAAGlD,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEG,QAAQ,GACxDN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEK,QAAQ,IAAM,CAC1CrD,KAAK,CAAE6F,IAAI,CAACG,KAAK,CAAC3C,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACnD,KAAK,CAC3CC,UAAU,CAAE4F,IAAI,CAACG,KAAK,CAAC3C,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAAClD,UAC7C,CAAC,CAAC,CACJ,CAAC,CAEDmE,WAAW,CAAC2B,WAAW,CAAC,CACxBxB,cAAc,CAACsB,IAAI,CAACI,KAAK,CAAC,CAC1B,GAAIJ,IAAI,CAACrB,QAAQ,CAAE,CACjBC,WAAW,CAACoB,IAAI,CAACrB,QAAQ,CAAC,CAC5B,CACAW,iBAAiB,CAACU,IAAI,CAAClD,cAAc,CAAC,CAEtC;AACA,GAAIkD,IAAI,CAACvF,eAAe,CAAE,CACxB8E,kBAAkB,CAACS,IAAI,CAACvF,eAAe,CAAC,CAC1C,CACF,CAAC,IAAM,IAAIuF,IAAI,CAACvE,IAAI,GAAK,iBAAiB,CAAE,CAC1C8D,kBAAkB,CAACS,IAAI,CAACO,SAAS,CAAC,CACpC,CACF,CAAC,CAEDd,EAAE,CAACvE,OAAO,CAACsF,OAAO,CAAG,IAAM,CACzBX,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACnD,CAAC,CAED,MAAO,IAAML,EAAE,CAACvE,OAAO,CAACuF,KAAK,CAAC,CAAC,CAAE;AACnC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAIxB,SAAS,CAACyB,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAC3B,KAAM,CAAAC,OAAO,CAAG,CACdC,IAAI,CAAEhC,UAAU,CAACE,IAAI,CACrB9C,KAAK,CAAE4C,UAAU,CAAC5C,KAAK,CACvB6E,IAAI,CAAE5B,SAAS,CACfP,QAAQ,CAAEA,QAAQ,EAAI,CAAG;AAC3B,CAAC,CAED;AACAc,EAAE,CAACvE,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEmF,OAAQ,CAAC,CAAC,CAAC,CAE1D;AACAzB,YAAY,CAAC,EAAE,CAAC,CAClB,CACF,CAAC,CAED,KAAM,CAAA4B,mBAAmB,CAAGA,CAAA,GAAM,CAChC;AACAtB,EAAE,CAACvE,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,eACR,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAuF,gBAAgB,CAAGA,CAACzG,GAAG,CAAEC,GAAG,CAAEL,KAAK,GAAK,CAC5C;AACA,KAAM,CAAA8G,OAAO,CAAGvE,QAAQ,CAACX,GAAG,CAAC,CAACmF,CAAC,CAAE5D,QAAQ,GACvC4D,CAAC,CAACnF,GAAG,CAAC,CAACwB,IAAI,CAAEC,QAAQ,GACnBF,QAAQ,GAAK/C,GAAG,EAAIiD,QAAQ,GAAKhD,GAAG,CAChC,CAAE,GAAG+C,IAAI,CAAEpD,KAAM,CAAC,CAClBoD,IACN,CACF,CAAC,CAED;AACAgB,WAAW,CAAC0C,OAAO,CAAC,CAEpB;AACA3B,iBAAiB,CAAC6B,IAAI,EAAIA,IAAI,CAACtF,MAAM,CAAC0B,IAAI,EAAI,EAAEA,IAAI,CAAChD,GAAG,GAAKA,GAAG,EAAIgD,IAAI,CAAC/C,GAAG,GAAKA,GAAG,CAAC,CAAC,CAAC,CAEvF;AACA,KAAM,CAAA4G,cAAc,CAAGpE,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEG,QAAQ,GAC3DN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAAE,CAACC,CAAC,CAAEK,QAAQ,IAAM,CAC1CrD,KAAK,CAAE8G,OAAO,CAACzD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAACnD,KAAK,CACxCC,UAAU,CAAE6G,OAAO,CAACzD,QAAQ,CAAC,CAACF,QAAQ,CAAC,CAAClD,UAC1C,CAAC,CAAC,CACJ,CAAC,CAED;AACAqF,EAAE,CAACvE,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,QAAQ,CACd0E,KAAK,CAAEiB,cAAc,CACrBC,WAAW,CAAE,CACX9G,GAAG,CAAEA,GAAG,CAAG;AACXC,GAAG,CAAEA,GACP,CACF,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAA8G,gBAAgB,CAAGA,CAAA,GAAM,CAC7B;AACA,KAAM,CAAAC,WAAW,CAAG7E,QAAQ,CAACX,GAAG,CAACxB,GAAG,EAClCA,GAAG,CAACwB,GAAG,CAACwB,IAAI,GAAK,CACf,GAAGA,IAAI,CACPpD,KAAK,CAAEoD,IAAI,CAACnD,UAAU,CAAG,EAAE,CAAGmD,IAAI,CAACpD,KACrC,CAAC,CAAC,CACJ,CAAC,CAED;AACAoE,WAAW,CAACgD,WAAW,CAAC,CACxBjC,iBAAiB,CAAC,EAAE,CAAC,CAErB;AACAG,EAAE,CAACvE,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC7BC,IAAI,CAAE,YACR,CAAC,CAAC,CAAC,CACL,CAAC,CAGD;AAEF,mBACE9B,KAAA,QAAAG,QAAA,eACEL,IAAA,CAACG,MAAM,GAAE,CAAC,cACVH,IAAA,QAAKI,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAE2E,WAAW,CAAM,CAAC,cAEhD9E,KAAA,QAAKE,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BH,KAAA,QAAKE,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3BL,IAAA,QAAKI,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5BL,IAAA,CAACmE,SAAS,EACRlB,QAAQ,CAAEA,QAAS,CACnBC,YAAY,CAAEqE,gBAAiB,CAC/BlE,cAAc,CAAEA,cAAe,CAC/BrC,eAAe,CAAEA,eAAgB,CACjCC,KAAK,CAAE+E,EAAG,CACX,CAAC,CACC,CAAC,cAEN9F,KAAA,QAAKE,SAAS,CAAC,wBAAwB,CAAAC,QAAA,eACrCL,IAAA,WACEI,SAAS,CAAC,eAAe,CACzB2H,OAAO,CAAEF,gBAAiB,CAAAxH,QAAA,CAC3B,aAED,CAAQ,CAAC,cACTL,IAAA,WACEI,SAAS,CAAC,kBAAkB,CAC5B2H,OAAO,CAAET,mBAAoB,CAAAjH,QAAA,CAC9B,gBAED,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,cAENH,KAAA,QAAKE,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BH,KAAA,QAAKE,SAAS,CAAC,SAAS,CAAAC,QAAA,eACtBL,IAAA,QAAKI,SAAS,CAAC,SAAS,CAAC4H,GAAG,CAAEjC,UAAW,CAAA1F,QAAA,CACtCsF,YAAY,CAACrD,GAAG,CAAC,CAAC2F,GAAG,CAAEC,KAAK,gBAC3BhI,KAAA,QAAAG,QAAA,eACEH,KAAA,WAAQ4C,KAAK,CAAE,CAAEN,KAAK,CAAEyF,GAAG,CAACzF,KAAK,EAAI,MAAO,CAAE,CAAAnC,QAAA,EAAE4H,GAAG,CAACb,IAAI,CAAC,GAAC,EAAQ,CAAC,cACnEpH,IAAA,SAAMI,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAE4H,GAAG,CAACd,OAAO,CAAO,CAAC,cAC9CnH,IAAA,SAAMI,SAAS,CAAC,MAAM,CAAAC,QAAA,CACnB,GAAI,CAAA8H,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC,CAACC,kBAAkB,CAAC,EAAE,CAAE,CACzCC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,IACV,CAAC,CAAC,CACE,CAAC,GATCN,KAUL,CACN,CAAC,CACC,CAAC,cAENlI,IAAA,QAAKI,SAAS,CAAC,WAAW,CAAAC,QAAA,cACxBL,IAAA,UACEgC,IAAI,CAAC,MAAM,CACXtB,KAAK,CAAE+E,SAAU,CACjB7E,QAAQ,CAAG6H,CAAC,EAAK/C,YAAY,CAAC+C,CAAC,CAACpH,MAAM,CAACX,KAAK,CAAE,CAC9CgI,SAAS,CAAGD,CAAC,EAAK,CAChB,GAAIA,CAAC,CAACE,GAAG,GAAK,OAAO,CAAE,CACrB1B,eAAe,CAAC,CAAC,CACnB,CACF,CAAE,CACF2B,WAAW,CAAC,cAAc,CAC3B,CAAC,CACC,CAAC,EACH,CAAC,cAEN1I,KAAA,QAAKE,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BH,KAAA,QAAKE,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBL,IAAA,SAAAK,QAAA,CAAM,UAAQ,CAAM,CAAC,cACrBH,KAAA,SAAM4C,KAAK,CAAE,CAAEN,KAAK,CAAE4C,UAAU,CAAC5C,KAAM,CAAE,CAAAnC,QAAA,EAAC,GAAC,CAAC+E,UAAU,CAACE,IAAI,EAAO,CAAC,EAChE,CAAC,cAENtF,IAAA,OAAII,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,oBAAkB,CAAI,CAAC,cAEpDL,IAAA,QAAKI,SAAS,CAAC,YAAY,CAAAC,QAAA,cACzBL,IAAA,OAAAK,QAAA,CACGkF,OAAO,CAACjD,GAAG,CAAC,CAACD,MAAM,CAAE6F,KAAK,gBACzBlI,IAAA,OAAgB8C,KAAK,CAAE,CAAEN,KAAK,CAAEH,MAAM,CAACG,KAAM,CAAE,CAAAnC,QAAA,CAC5CgC,MAAM,CAACiD,IAAI,EADL4C,KAEL,CACL,CAAC,CACA,CAAC,CACF,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,CAER,CAEA,KAAM,CAAAW,IAAI,CAAG/I,QAAQ,CAACgJ,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CACjEH,IAAI,CAACI,MAAM,cACTjJ,IAAA,CAACN,KAAK,CAACwJ,UAAU,EAAA7I,QAAA,cACfL,IAAA,CAAC6E,GAAG,GAAE,CAAC,CACS,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}